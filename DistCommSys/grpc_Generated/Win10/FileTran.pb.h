// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FileTran.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_FileTran_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_FileTran_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Metadata.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_FileTran_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_FileTran_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[26]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FileTran_2eproto;
namespace InforGuard_ {
class GetFileBlockReq;
class GetFileBlockReqDefaultTypeInternal;
extern GetFileBlockReqDefaultTypeInternal _GetFileBlockReq_default_instance_;
class GetFileBlockRes;
class GetFileBlockResDefaultTypeInternal;
extern GetFileBlockResDefaultTypeInternal _GetFileBlockRes_default_instance_;
class MakeDirectoryReq;
class MakeDirectoryReqDefaultTypeInternal;
extern MakeDirectoryReqDefaultTypeInternal _MakeDirectoryReq_default_instance_;
class MakeDirectoryRes;
class MakeDirectoryResDefaultTypeInternal;
extern MakeDirectoryResDefaultTypeInternal _MakeDirectoryRes_default_instance_;
class MoveFileInReq;
class MoveFileInReqDefaultTypeInternal;
extern MoveFileInReqDefaultTypeInternal _MoveFileInReq_default_instance_;
class MoveFileInRes;
class MoveFileInResDefaultTypeInternal;
extern MoveFileInResDefaultTypeInternal _MoveFileInRes_default_instance_;
class MoveFileOutReq;
class MoveFileOutReqDefaultTypeInternal;
extern MoveFileOutReqDefaultTypeInternal _MoveFileOutReq_default_instance_;
class MoveFileOutRes;
class MoveFileOutResDefaultTypeInternal;
extern MoveFileOutResDefaultTypeInternal _MoveFileOutRes_default_instance_;
class PutFileBlockReq;
class PutFileBlockReqDefaultTypeInternal;
extern PutFileBlockReqDefaultTypeInternal _PutFileBlockReq_default_instance_;
class PutFileBlockRes;
class PutFileBlockResDefaultTypeInternal;
extern PutFileBlockResDefaultTypeInternal _PutFileBlockRes_default_instance_;
class QueryBasePathReq;
class QueryBasePathReqDefaultTypeInternal;
extern QueryBasePathReqDefaultTypeInternal _QueryBasePathReq_default_instance_;
class QueryBasePathRes;
class QueryBasePathResDefaultTypeInternal;
extern QueryBasePathResDefaultTypeInternal _QueryBasePathRes_default_instance_;
class RenameFileReq;
class RenameFileReqDefaultTypeInternal;
extern RenameFileReqDefaultTypeInternal _RenameFileReq_default_instance_;
class RenameFileRes;
class RenameFileResDefaultTypeInternal;
extern RenameFileResDefaultTypeInternal _RenameFileRes_default_instance_;
class checkFileListReq;
class checkFileListReqDefaultTypeInternal;
extern checkFileListReqDefaultTypeInternal _checkFileListReq_default_instance_;
class checkFileListRes;
class checkFileListResDefaultTypeInternal;
extern checkFileListResDefaultTypeInternal _checkFileListRes_default_instance_;
class getFileTimeReq;
class getFileTimeReqDefaultTypeInternal;
extern getFileTimeReqDefaultTypeInternal _getFileTimeReq_default_instance_;
class getFileTimeRes;
class getFileTimeResDefaultTypeInternal;
extern getFileTimeResDefaultTypeInternal _getFileTimeRes_default_instance_;
class isFileExistReq;
class isFileExistReqDefaultTypeInternal;
extern isFileExistReqDefaultTypeInternal _isFileExistReq_default_instance_;
class isFileExistRes;
class isFileExistResDefaultTypeInternal;
extern isFileExistResDefaultTypeInternal _isFileExistRes_default_instance_;
class sendAccessReq;
class sendAccessReqDefaultTypeInternal;
extern sendAccessReqDefaultTypeInternal _sendAccessReq_default_instance_;
class sendAccessRes;
class sendAccessResDefaultTypeInternal;
extern sendAccessResDefaultTypeInternal _sendAccessRes_default_instance_;
class sendFileListReq;
class sendFileListReqDefaultTypeInternal;
extern sendFileListReqDefaultTypeInternal _sendFileListReq_default_instance_;
class sendFileListRes;
class sendFileListResDefaultTypeInternal;
extern sendFileListResDefaultTypeInternal _sendFileListRes_default_instance_;
class setFileTimeReq;
class setFileTimeReqDefaultTypeInternal;
extern setFileTimeReqDefaultTypeInternal _setFileTimeReq_default_instance_;
class setFileTimeRes;
class setFileTimeResDefaultTypeInternal;
extern setFileTimeResDefaultTypeInternal _setFileTimeRes_default_instance_;
}  // namespace InforGuard_
PROTOBUF_NAMESPACE_OPEN
template<> ::InforGuard_::GetFileBlockReq* Arena::CreateMaybeMessage<::InforGuard_::GetFileBlockReq>(Arena*);
template<> ::InforGuard_::GetFileBlockRes* Arena::CreateMaybeMessage<::InforGuard_::GetFileBlockRes>(Arena*);
template<> ::InforGuard_::MakeDirectoryReq* Arena::CreateMaybeMessage<::InforGuard_::MakeDirectoryReq>(Arena*);
template<> ::InforGuard_::MakeDirectoryRes* Arena::CreateMaybeMessage<::InforGuard_::MakeDirectoryRes>(Arena*);
template<> ::InforGuard_::MoveFileInReq* Arena::CreateMaybeMessage<::InforGuard_::MoveFileInReq>(Arena*);
template<> ::InforGuard_::MoveFileInRes* Arena::CreateMaybeMessage<::InforGuard_::MoveFileInRes>(Arena*);
template<> ::InforGuard_::MoveFileOutReq* Arena::CreateMaybeMessage<::InforGuard_::MoveFileOutReq>(Arena*);
template<> ::InforGuard_::MoveFileOutRes* Arena::CreateMaybeMessage<::InforGuard_::MoveFileOutRes>(Arena*);
template<> ::InforGuard_::PutFileBlockReq* Arena::CreateMaybeMessage<::InforGuard_::PutFileBlockReq>(Arena*);
template<> ::InforGuard_::PutFileBlockRes* Arena::CreateMaybeMessage<::InforGuard_::PutFileBlockRes>(Arena*);
template<> ::InforGuard_::QueryBasePathReq* Arena::CreateMaybeMessage<::InforGuard_::QueryBasePathReq>(Arena*);
template<> ::InforGuard_::QueryBasePathRes* Arena::CreateMaybeMessage<::InforGuard_::QueryBasePathRes>(Arena*);
template<> ::InforGuard_::RenameFileReq* Arena::CreateMaybeMessage<::InforGuard_::RenameFileReq>(Arena*);
template<> ::InforGuard_::RenameFileRes* Arena::CreateMaybeMessage<::InforGuard_::RenameFileRes>(Arena*);
template<> ::InforGuard_::checkFileListReq* Arena::CreateMaybeMessage<::InforGuard_::checkFileListReq>(Arena*);
template<> ::InforGuard_::checkFileListRes* Arena::CreateMaybeMessage<::InforGuard_::checkFileListRes>(Arena*);
template<> ::InforGuard_::getFileTimeReq* Arena::CreateMaybeMessage<::InforGuard_::getFileTimeReq>(Arena*);
template<> ::InforGuard_::getFileTimeRes* Arena::CreateMaybeMessage<::InforGuard_::getFileTimeRes>(Arena*);
template<> ::InforGuard_::isFileExistReq* Arena::CreateMaybeMessage<::InforGuard_::isFileExistReq>(Arena*);
template<> ::InforGuard_::isFileExistRes* Arena::CreateMaybeMessage<::InforGuard_::isFileExistRes>(Arena*);
template<> ::InforGuard_::sendAccessReq* Arena::CreateMaybeMessage<::InforGuard_::sendAccessReq>(Arena*);
template<> ::InforGuard_::sendAccessRes* Arena::CreateMaybeMessage<::InforGuard_::sendAccessRes>(Arena*);
template<> ::InforGuard_::sendFileListReq* Arena::CreateMaybeMessage<::InforGuard_::sendFileListReq>(Arena*);
template<> ::InforGuard_::sendFileListRes* Arena::CreateMaybeMessage<::InforGuard_::sendFileListRes>(Arena*);
template<> ::InforGuard_::setFileTimeReq* Arena::CreateMaybeMessage<::InforGuard_::setFileTimeReq>(Arena*);
template<> ::InforGuard_::setFileTimeRes* Arena::CreateMaybeMessage<::InforGuard_::setFileTimeRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace InforGuard_ {

// ===================================================================

class GetFileBlockReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.GetFileBlockReq) */ {
 public:
  inline GetFileBlockReq() : GetFileBlockReq(nullptr) {};
  virtual ~GetFileBlockReq();

  GetFileBlockReq(const GetFileBlockReq& from);
  GetFileBlockReq(GetFileBlockReq&& from) noexcept
    : GetFileBlockReq() {
    *this = ::std::move(from);
  }

  inline GetFileBlockReq& operator=(const GetFileBlockReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFileBlockReq& operator=(GetFileBlockReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFileBlockReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFileBlockReq* internal_default_instance() {
    return reinterpret_cast<const GetFileBlockReq*>(
               &_GetFileBlockReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetFileBlockReq& a, GetFileBlockReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFileBlockReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFileBlockReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFileBlockReq* New() const final {
    return CreateMaybeMessage<GetFileBlockReq>(nullptr);
  }

  GetFileBlockReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFileBlockReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFileBlockReq& from);
  void MergeFrom(const GetFileBlockReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFileBlockReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.GetFileBlockReq";
  }
  protected:
  explicit GetFileBlockReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileTran_2eproto);
    return ::descriptor_table_FileTran_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 2,
    kCallFieldNumber = 1,
    kOffFieldNumber = 3,
    kLenFieldNumber = 4,
  };
  // bytes filename = 2;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const void* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_filename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_filename(
      std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // .InforGuard_.netCallData call = 1;
  bool has_call() const;
  private:
  bool _internal_has_call() const;
  public:
  void clear_call();
  const ::InforGuard_::netCallData& call() const;
  ::InforGuard_::netCallData* release_call();
  ::InforGuard_::netCallData* mutable_call();
  void set_allocated_call(::InforGuard_::netCallData* call);
  private:
  const ::InforGuard_::netCallData& _internal_call() const;
  ::InforGuard_::netCallData* _internal_mutable_call();
  public:
  void unsafe_arena_set_allocated_call(
      ::InforGuard_::netCallData* call);
  ::InforGuard_::netCallData* unsafe_arena_release_call();

  // sint64 off = 3;
  void clear_off();
  ::PROTOBUF_NAMESPACE_ID::int64 off() const;
  void set_off(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_off() const;
  void _internal_set_off(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 len = 4;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::int32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_len() const;
  void _internal_set_len(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.GetFileBlockReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::InforGuard_::netCallData* call_;
  ::PROTOBUF_NAMESPACE_ID::int64 off_;
  ::PROTOBUF_NAMESPACE_ID::int32 len_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileTran_2eproto;
};
// -------------------------------------------------------------------

class GetFileBlockRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.GetFileBlockRes) */ {
 public:
  inline GetFileBlockRes() : GetFileBlockRes(nullptr) {};
  virtual ~GetFileBlockRes();

  GetFileBlockRes(const GetFileBlockRes& from);
  GetFileBlockRes(GetFileBlockRes&& from) noexcept
    : GetFileBlockRes() {
    *this = ::std::move(from);
  }

  inline GetFileBlockRes& operator=(const GetFileBlockRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFileBlockRes& operator=(GetFileBlockRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFileBlockRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFileBlockRes* internal_default_instance() {
    return reinterpret_cast<const GetFileBlockRes*>(
               &_GetFileBlockRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetFileBlockRes& a, GetFileBlockRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFileBlockRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFileBlockRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFileBlockRes* New() const final {
    return CreateMaybeMessage<GetFileBlockRes>(nullptr);
  }

  GetFileBlockRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFileBlockRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFileBlockRes& from);
  void MergeFrom(const GetFileBlockRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFileBlockRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.GetFileBlockRes";
  }
  protected:
  explicit GetFileBlockRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileTran_2eproto);
    return ::descriptor_table_FileTran_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuffFieldNumber = 3,
    kCallFieldNumber = 1,
    kExFieldNumber = 2,
    kLenFieldNumber = 4,
    kRetFieldNumber = 5,
  };
  // bytes buff = 3;
  void clear_buff();
  const std::string& buff() const;
  void set_buff(const std::string& value);
  void set_buff(std::string&& value);
  void set_buff(const char* value);
  void set_buff(const void* value, size_t size);
  std::string* mutable_buff();
  std::string* release_buff();
  void set_allocated_buff(std::string* buff);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_buff();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_buff(
      std::string* buff);
  private:
  const std::string& _internal_buff() const;
  void _internal_set_buff(const std::string& value);
  std::string* _internal_mutable_buff();
  public:

  // .InforGuard_.netCallData call = 1;
  bool has_call() const;
  private:
  bool _internal_has_call() const;
  public:
  void clear_call();
  const ::InforGuard_::netCallData& call() const;
  ::InforGuard_::netCallData* release_call();
  ::InforGuard_::netCallData* mutable_call();
  void set_allocated_call(::InforGuard_::netCallData* call);
  private:
  const ::InforGuard_::netCallData& _internal_call() const;
  ::InforGuard_::netCallData* _internal_mutable_call();
  public:
  void unsafe_arena_set_allocated_call(
      ::InforGuard_::netCallData* call);
  ::InforGuard_::netCallData* unsafe_arena_release_call();

  // .InforGuard_.ExceptionError ex = 2;
  bool has_ex() const;
  private:
  bool _internal_has_ex() const;
  public:
  void clear_ex();
  const ::InforGuard_::ExceptionError& ex() const;
  ::InforGuard_::ExceptionError* release_ex();
  ::InforGuard_::ExceptionError* mutable_ex();
  void set_allocated_ex(::InforGuard_::ExceptionError* ex);
  private:
  const ::InforGuard_::ExceptionError& _internal_ex() const;
  ::InforGuard_::ExceptionError* _internal_mutable_ex();
  public:
  void unsafe_arena_set_allocated_ex(
      ::InforGuard_::ExceptionError* ex);
  ::InforGuard_::ExceptionError* unsafe_arena_release_ex();

  // int32 len = 4;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::int32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_len() const;
  void _internal_set_len(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ret = 5;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.GetFileBlockRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buff_;
  ::InforGuard_::netCallData* call_;
  ::InforGuard_::ExceptionError* ex_;
  ::PROTOBUF_NAMESPACE_ID::int32 len_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileTran_2eproto;
};
// -------------------------------------------------------------------

class PutFileBlockReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.PutFileBlockReq) */ {
 public:
  inline PutFileBlockReq() : PutFileBlockReq(nullptr) {};
  virtual ~PutFileBlockReq();

  PutFileBlockReq(const PutFileBlockReq& from);
  PutFileBlockReq(PutFileBlockReq&& from) noexcept
    : PutFileBlockReq() {
    *this = ::std::move(from);
  }

  inline PutFileBlockReq& operator=(const PutFileBlockReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutFileBlockReq& operator=(PutFileBlockReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PutFileBlockReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutFileBlockReq* internal_default_instance() {
    return reinterpret_cast<const PutFileBlockReq*>(
               &_PutFileBlockReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PutFileBlockReq& a, PutFileBlockReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PutFileBlockReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutFileBlockReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutFileBlockReq* New() const final {
    return CreateMaybeMessage<PutFileBlockReq>(nullptr);
  }

  PutFileBlockReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutFileBlockReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PutFileBlockReq& from);
  void MergeFrom(const PutFileBlockReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutFileBlockReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.PutFileBlockReq";
  }
  protected:
  explicit PutFileBlockReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileTran_2eproto);
    return ::descriptor_table_FileTran_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 2,
    kBuffFieldNumber = 4,
    kCallFieldNumber = 1,
    kOffFieldNumber = 3,
    kLenFieldNumber = 5,
  };
  // bytes filename = 2;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const void* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_filename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_filename(
      std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // bytes buff = 4;
  void clear_buff();
  const std::string& buff() const;
  void set_buff(const std::string& value);
  void set_buff(std::string&& value);
  void set_buff(const char* value);
  void set_buff(const void* value, size_t size);
  std::string* mutable_buff();
  std::string* release_buff();
  void set_allocated_buff(std::string* buff);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_buff();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_buff(
      std::string* buff);
  private:
  const std::string& _internal_buff() const;
  void _internal_set_buff(const std::string& value);
  std::string* _internal_mutable_buff();
  public:

  // .InforGuard_.netCallData call = 1;
  bool has_call() const;
  private:
  bool _internal_has_call() const;
  public:
  void clear_call();
  const ::InforGuard_::netCallData& call() const;
  ::InforGuard_::netCallData* release_call();
  ::InforGuard_::netCallData* mutable_call();
  void set_allocated_call(::InforGuard_::netCallData* call);
  private:
  const ::InforGuard_::netCallData& _internal_call() const;
  ::InforGuard_::netCallData* _internal_mutable_call();
  public:
  void unsafe_arena_set_allocated_call(
      ::InforGuard_::netCallData* call);
  ::InforGuard_::netCallData* unsafe_arena_release_call();

  // sint64 off = 3;
  void clear_off();
  ::PROTOBUF_NAMESPACE_ID::int64 off() const;
  void set_off(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_off() const;
  void _internal_set_off(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 len = 5;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::int32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_len() const;
  void _internal_set_len(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.PutFileBlockReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buff_;
  ::InforGuard_::netCallData* call_;
  ::PROTOBUF_NAMESPACE_ID::int64 off_;
  ::PROTOBUF_NAMESPACE_ID::int32 len_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileTran_2eproto;
};
// -------------------------------------------------------------------

class PutFileBlockRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.PutFileBlockRes) */ {
 public:
  inline PutFileBlockRes() : PutFileBlockRes(nullptr) {};
  virtual ~PutFileBlockRes();

  PutFileBlockRes(const PutFileBlockRes& from);
  PutFileBlockRes(PutFileBlockRes&& from) noexcept
    : PutFileBlockRes() {
    *this = ::std::move(from);
  }

  inline PutFileBlockRes& operator=(const PutFileBlockRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutFileBlockRes& operator=(PutFileBlockRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PutFileBlockRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutFileBlockRes* internal_default_instance() {
    return reinterpret_cast<const PutFileBlockRes*>(
               &_PutFileBlockRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PutFileBlockRes& a, PutFileBlockRes& b) {
    a.Swap(&b);
  }
  inline void Swap(PutFileBlockRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutFileBlockRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutFileBlockRes* New() const final {
    return CreateMaybeMessage<PutFileBlockRes>(nullptr);
  }

  PutFileBlockRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutFileBlockRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PutFileBlockRes& from);
  void MergeFrom(const PutFileBlockRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutFileBlockRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.PutFileBlockRes";
  }
  protected:
  explicit PutFileBlockRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileTran_2eproto);
    return ::descriptor_table_FileTran_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallFieldNumber = 1,
    kExFieldNumber = 2,
    kLenFieldNumber = 3,
    kRetFieldNumber = 4,
  };
  // .InforGuard_.netCallData call = 1;
  bool has_call() const;
  private:
  bool _internal_has_call() const;
  public:
  void clear_call();
  const ::InforGuard_::netCallData& call() const;
  ::InforGuard_::netCallData* release_call();
  ::InforGuard_::netCallData* mutable_call();
  void set_allocated_call(::InforGuard_::netCallData* call);
  private:
  const ::InforGuard_::netCallData& _internal_call() const;
  ::InforGuard_::netCallData* _internal_mutable_call();
  public:
  void unsafe_arena_set_allocated_call(
      ::InforGuard_::netCallData* call);
  ::InforGuard_::netCallData* unsafe_arena_release_call();

  // .InforGuard_.ExceptionError ex = 2;
  bool has_ex() const;
  private:
  bool _internal_has_ex() const;
  public:
  void clear_ex();
  const ::InforGuard_::ExceptionError& ex() const;
  ::InforGuard_::ExceptionError* release_ex();
  ::InforGuard_::ExceptionError* mutable_ex();
  void set_allocated_ex(::InforGuard_::ExceptionError* ex);
  private:
  const ::InforGuard_::ExceptionError& _internal_ex() const;
  ::InforGuard_::ExceptionError* _internal_mutable_ex();
  public:
  void unsafe_arena_set_allocated_ex(
      ::InforGuard_::ExceptionError* ex);
  ::InforGuard_::ExceptionError* unsafe_arena_release_ex();

  // int32 len = 3;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::int32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_len() const;
  void _internal_set_len(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ret = 4;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.PutFileBlockRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::InforGuard_::netCallData* call_;
  ::InforGuard_::ExceptionError* ex_;
  ::PROTOBUF_NAMESPACE_ID::int32 len_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileTran_2eproto;
};
// -------------------------------------------------------------------

class MakeDirectoryReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.MakeDirectoryReq) */ {
 public:
  inline MakeDirectoryReq() : MakeDirectoryReq(nullptr) {};
  virtual ~MakeDirectoryReq();

  MakeDirectoryReq(const MakeDirectoryReq& from);
  MakeDirectoryReq(MakeDirectoryReq&& from) noexcept
    : MakeDirectoryReq() {
    *this = ::std::move(from);
  }

  inline MakeDirectoryReq& operator=(const MakeDirectoryReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MakeDirectoryReq& operator=(MakeDirectoryReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MakeDirectoryReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MakeDirectoryReq* internal_default_instance() {
    return reinterpret_cast<const MakeDirectoryReq*>(
               &_MakeDirectoryReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MakeDirectoryReq& a, MakeDirectoryReq& b) {
    a.Swap(&b);
  }
  inline void Swap(MakeDirectoryReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MakeDirectoryReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MakeDirectoryReq* New() const final {
    return CreateMaybeMessage<MakeDirectoryReq>(nullptr);
  }

  MakeDirectoryReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MakeDirectoryReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MakeDirectoryReq& from);
  void MergeFrom(const MakeDirectoryReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MakeDirectoryReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.MakeDirectoryReq";
  }
  protected:
  explicit MakeDirectoryReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileTran_2eproto);
    return ::descriptor_table_FileTran_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 2,
    kCallFieldNumber = 1,
    kTempFieldNumber = 3,
  };
  // bytes filename = 2;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const void* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_filename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_filename(
      std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // .InforGuard_.netCallData call = 1;
  bool has_call() const;
  private:
  bool _internal_has_call() const;
  public:
  void clear_call();
  const ::InforGuard_::netCallData& call() const;
  ::InforGuard_::netCallData* release_call();
  ::InforGuard_::netCallData* mutable_call();
  void set_allocated_call(::InforGuard_::netCallData* call);
  private:
  const ::InforGuard_::netCallData& _internal_call() const;
  ::InforGuard_::netCallData* _internal_mutable_call();
  public:
  void unsafe_arena_set_allocated_call(
      ::InforGuard_::netCallData* call);
  ::InforGuard_::netCallData* unsafe_arena_release_call();

  // bool temp = 3;
  void clear_temp();
  bool temp() const;
  void set_temp(bool value);
  private:
  bool _internal_temp() const;
  void _internal_set_temp(bool value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.MakeDirectoryReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::InforGuard_::netCallData* call_;
  bool temp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileTran_2eproto;
};
// -------------------------------------------------------------------

class MakeDirectoryRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.MakeDirectoryRes) */ {
 public:
  inline MakeDirectoryRes() : MakeDirectoryRes(nullptr) {};
  virtual ~MakeDirectoryRes();

  MakeDirectoryRes(const MakeDirectoryRes& from);
  MakeDirectoryRes(MakeDirectoryRes&& from) noexcept
    : MakeDirectoryRes() {
    *this = ::std::move(from);
  }

  inline MakeDirectoryRes& operator=(const MakeDirectoryRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline MakeDirectoryRes& operator=(MakeDirectoryRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MakeDirectoryRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MakeDirectoryRes* internal_default_instance() {
    return reinterpret_cast<const MakeDirectoryRes*>(
               &_MakeDirectoryRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MakeDirectoryRes& a, MakeDirectoryRes& b) {
    a.Swap(&b);
  }
  inline void Swap(MakeDirectoryRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MakeDirectoryRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MakeDirectoryRes* New() const final {
    return CreateMaybeMessage<MakeDirectoryRes>(nullptr);
  }

  MakeDirectoryRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MakeDirectoryRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MakeDirectoryRes& from);
  void MergeFrom(const MakeDirectoryRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MakeDirectoryRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.MakeDirectoryRes";
  }
  protected:
  explicit MakeDirectoryRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileTran_2eproto);
    return ::descriptor_table_FileTran_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallFieldNumber = 1,
    kExFieldNumber = 2,
    kRetFieldNumber = 3,
  };
  // .InforGuard_.netCallData call = 1;
  bool has_call() const;
  private:
  bool _internal_has_call() const;
  public:
  void clear_call();
  const ::InforGuard_::netCallData& call() const;
  ::InforGuard_::netCallData* release_call();
  ::InforGuard_::netCallData* mutable_call();
  void set_allocated_call(::InforGuard_::netCallData* call);
  private:
  const ::InforGuard_::netCallData& _internal_call() const;
  ::InforGuard_::netCallData* _internal_mutable_call();
  public:
  void unsafe_arena_set_allocated_call(
      ::InforGuard_::netCallData* call);
  ::InforGuard_::netCallData* unsafe_arena_release_call();

  // .InforGuard_.ExceptionError ex = 2;
  bool has_ex() const;
  private:
  bool _internal_has_ex() const;
  public:
  void clear_ex();
  const ::InforGuard_::ExceptionError& ex() const;
  ::InforGuard_::ExceptionError* release_ex();
  ::InforGuard_::ExceptionError* mutable_ex();
  void set_allocated_ex(::InforGuard_::ExceptionError* ex);
  private:
  const ::InforGuard_::ExceptionError& _internal_ex() const;
  ::InforGuard_::ExceptionError* _internal_mutable_ex();
  public:
  void unsafe_arena_set_allocated_ex(
      ::InforGuard_::ExceptionError* ex);
  ::InforGuard_::ExceptionError* unsafe_arena_release_ex();

  // int32 ret = 3;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.MakeDirectoryRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::InforGuard_::netCallData* call_;
  ::InforGuard_::ExceptionError* ex_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileTran_2eproto;
};
// -------------------------------------------------------------------

class MoveFileInReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.MoveFileInReq) */ {
 public:
  inline MoveFileInReq() : MoveFileInReq(nullptr) {};
  virtual ~MoveFileInReq();

  MoveFileInReq(const MoveFileInReq& from);
  MoveFileInReq(MoveFileInReq&& from) noexcept
    : MoveFileInReq() {
    *this = ::std::move(from);
  }

  inline MoveFileInReq& operator=(const MoveFileInReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveFileInReq& operator=(MoveFileInReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveFileInReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveFileInReq* internal_default_instance() {
    return reinterpret_cast<const MoveFileInReq*>(
               &_MoveFileInReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MoveFileInReq& a, MoveFileInReq& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveFileInReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveFileInReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveFileInReq* New() const final {
    return CreateMaybeMessage<MoveFileInReq>(nullptr);
  }

  MoveFileInReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveFileInReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveFileInReq& from);
  void MergeFrom(const MoveFileInReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveFileInReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.MoveFileInReq";
  }
  protected:
  explicit MoveFileInReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileTran_2eproto);
    return ::descriptor_table_FileTran_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcfileFieldNumber = 2,
    kDstfileFieldNumber = 3,
    kDelfileFieldNumber = 4,
    kCallFieldNumber = 1,
    kBTopPathFieldNumber = 5,
  };
  // bytes srcfile = 2;
  void clear_srcfile();
  const std::string& srcfile() const;
  void set_srcfile(const std::string& value);
  void set_srcfile(std::string&& value);
  void set_srcfile(const char* value);
  void set_srcfile(const void* value, size_t size);
  std::string* mutable_srcfile();
  std::string* release_srcfile();
  void set_allocated_srcfile(std::string* srcfile);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_srcfile();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_srcfile(
      std::string* srcfile);
  private:
  const std::string& _internal_srcfile() const;
  void _internal_set_srcfile(const std::string& value);
  std::string* _internal_mutable_srcfile();
  public:

  // bytes dstfile = 3;
  void clear_dstfile();
  const std::string& dstfile() const;
  void set_dstfile(const std::string& value);
  void set_dstfile(std::string&& value);
  void set_dstfile(const char* value);
  void set_dstfile(const void* value, size_t size);
  std::string* mutable_dstfile();
  std::string* release_dstfile();
  void set_allocated_dstfile(std::string* dstfile);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dstfile();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dstfile(
      std::string* dstfile);
  private:
  const std::string& _internal_dstfile() const;
  void _internal_set_dstfile(const std::string& value);
  std::string* _internal_mutable_dstfile();
  public:

  // bytes delfile = 4;
  void clear_delfile();
  const std::string& delfile() const;
  void set_delfile(const std::string& value);
  void set_delfile(std::string&& value);
  void set_delfile(const char* value);
  void set_delfile(const void* value, size_t size);
  std::string* mutable_delfile();
  std::string* release_delfile();
  void set_allocated_delfile(std::string* delfile);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_delfile();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_delfile(
      std::string* delfile);
  private:
  const std::string& _internal_delfile() const;
  void _internal_set_delfile(const std::string& value);
  std::string* _internal_mutable_delfile();
  public:

  // .InforGuard_.netCallData call = 1;
  bool has_call() const;
  private:
  bool _internal_has_call() const;
  public:
  void clear_call();
  const ::InforGuard_::netCallData& call() const;
  ::InforGuard_::netCallData* release_call();
  ::InforGuard_::netCallData* mutable_call();
  void set_allocated_call(::InforGuard_::netCallData* call);
  private:
  const ::InforGuard_::netCallData& _internal_call() const;
  ::InforGuard_::netCallData* _internal_mutable_call();
  public:
  void unsafe_arena_set_allocated_call(
      ::InforGuard_::netCallData* call);
  ::InforGuard_::netCallData* unsafe_arena_release_call();

  // bool bTopPath = 5;
  void clear_btoppath();
  bool btoppath() const;
  void set_btoppath(bool value);
  private:
  bool _internal_btoppath() const;
  void _internal_set_btoppath(bool value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.MoveFileInReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srcfile_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dstfile_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delfile_;
  ::InforGuard_::netCallData* call_;
  bool btoppath_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileTran_2eproto;
};
// -------------------------------------------------------------------

class MoveFileInRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.MoveFileInRes) */ {
 public:
  inline MoveFileInRes() : MoveFileInRes(nullptr) {};
  virtual ~MoveFileInRes();

  MoveFileInRes(const MoveFileInRes& from);
  MoveFileInRes(MoveFileInRes&& from) noexcept
    : MoveFileInRes() {
    *this = ::std::move(from);
  }

  inline MoveFileInRes& operator=(const MoveFileInRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveFileInRes& operator=(MoveFileInRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveFileInRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveFileInRes* internal_default_instance() {
    return reinterpret_cast<const MoveFileInRes*>(
               &_MoveFileInRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MoveFileInRes& a, MoveFileInRes& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveFileInRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveFileInRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveFileInRes* New() const final {
    return CreateMaybeMessage<MoveFileInRes>(nullptr);
  }

  MoveFileInRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveFileInRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveFileInRes& from);
  void MergeFrom(const MoveFileInRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveFileInRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.MoveFileInRes";
  }
  protected:
  explicit MoveFileInRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileTran_2eproto);
    return ::descriptor_table_FileTran_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallFieldNumber = 1,
    kExFieldNumber = 2,
    kRetFieldNumber = 3,
  };
  // .InforGuard_.netCallData call = 1;
  bool has_call() const;
  private:
  bool _internal_has_call() const;
  public:
  void clear_call();
  const ::InforGuard_::netCallData& call() const;
  ::InforGuard_::netCallData* release_call();
  ::InforGuard_::netCallData* mutable_call();
  void set_allocated_call(::InforGuard_::netCallData* call);
  private:
  const ::InforGuard_::netCallData& _internal_call() const;
  ::InforGuard_::netCallData* _internal_mutable_call();
  public:
  void unsafe_arena_set_allocated_call(
      ::InforGuard_::netCallData* call);
  ::InforGuard_::netCallData* unsafe_arena_release_call();

  // .InforGuard_.ExceptionError ex = 2;
  bool has_ex() const;
  private:
  bool _internal_has_ex() const;
  public:
  void clear_ex();
  const ::InforGuard_::ExceptionError& ex() const;
  ::InforGuard_::ExceptionError* release_ex();
  ::InforGuard_::ExceptionError* mutable_ex();
  void set_allocated_ex(::InforGuard_::ExceptionError* ex);
  private:
  const ::InforGuard_::ExceptionError& _internal_ex() const;
  ::InforGuard_::ExceptionError* _internal_mutable_ex();
  public:
  void unsafe_arena_set_allocated_ex(
      ::InforGuard_::ExceptionError* ex);
  ::InforGuard_::ExceptionError* unsafe_arena_release_ex();

  // int32 ret = 3;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.MoveFileInRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::InforGuard_::netCallData* call_;
  ::InforGuard_::ExceptionError* ex_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileTran_2eproto;
};
// -------------------------------------------------------------------

class MoveFileOutReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.MoveFileOutReq) */ {
 public:
  inline MoveFileOutReq() : MoveFileOutReq(nullptr) {};
  virtual ~MoveFileOutReq();

  MoveFileOutReq(const MoveFileOutReq& from);
  MoveFileOutReq(MoveFileOutReq&& from) noexcept
    : MoveFileOutReq() {
    *this = ::std::move(from);
  }

  inline MoveFileOutReq& operator=(const MoveFileOutReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveFileOutReq& operator=(MoveFileOutReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveFileOutReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveFileOutReq* internal_default_instance() {
    return reinterpret_cast<const MoveFileOutReq*>(
               &_MoveFileOutReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MoveFileOutReq& a, MoveFileOutReq& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveFileOutReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveFileOutReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveFileOutReq* New() const final {
    return CreateMaybeMessage<MoveFileOutReq>(nullptr);
  }

  MoveFileOutReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveFileOutReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveFileOutReq& from);
  void MergeFrom(const MoveFileOutReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveFileOutReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.MoveFileOutReq";
  }
  protected:
  explicit MoveFileOutReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileTran_2eproto);
    return ::descriptor_table_FileTran_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcfileFieldNumber = 2,
    kDstfileFieldNumber = 3,
    kCallFieldNumber = 1,
  };
  // bytes srcfile = 2;
  void clear_srcfile();
  const std::string& srcfile() const;
  void set_srcfile(const std::string& value);
  void set_srcfile(std::string&& value);
  void set_srcfile(const char* value);
  void set_srcfile(const void* value, size_t size);
  std::string* mutable_srcfile();
  std::string* release_srcfile();
  void set_allocated_srcfile(std::string* srcfile);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_srcfile();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_srcfile(
      std::string* srcfile);
  private:
  const std::string& _internal_srcfile() const;
  void _internal_set_srcfile(const std::string& value);
  std::string* _internal_mutable_srcfile();
  public:

  // bytes dstfile = 3;
  void clear_dstfile();
  const std::string& dstfile() const;
  void set_dstfile(const std::string& value);
  void set_dstfile(std::string&& value);
  void set_dstfile(const char* value);
  void set_dstfile(const void* value, size_t size);
  std::string* mutable_dstfile();
  std::string* release_dstfile();
  void set_allocated_dstfile(std::string* dstfile);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dstfile();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dstfile(
      std::string* dstfile);
  private:
  const std::string& _internal_dstfile() const;
  void _internal_set_dstfile(const std::string& value);
  std::string* _internal_mutable_dstfile();
  public:

  // .InforGuard_.netCallData call = 1;
  bool has_call() const;
  private:
  bool _internal_has_call() const;
  public:
  void clear_call();
  const ::InforGuard_::netCallData& call() const;
  ::InforGuard_::netCallData* release_call();
  ::InforGuard_::netCallData* mutable_call();
  void set_allocated_call(::InforGuard_::netCallData* call);
  private:
  const ::InforGuard_::netCallData& _internal_call() const;
  ::InforGuard_::netCallData* _internal_mutable_call();
  public:
  void unsafe_arena_set_allocated_call(
      ::InforGuard_::netCallData* call);
  ::InforGuard_::netCallData* unsafe_arena_release_call();

  // @@protoc_insertion_point(class_scope:InforGuard_.MoveFileOutReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srcfile_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dstfile_;
  ::InforGuard_::netCallData* call_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileTran_2eproto;
};
// -------------------------------------------------------------------

class MoveFileOutRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.MoveFileOutRes) */ {
 public:
  inline MoveFileOutRes() : MoveFileOutRes(nullptr) {};
  virtual ~MoveFileOutRes();

  MoveFileOutRes(const MoveFileOutRes& from);
  MoveFileOutRes(MoveFileOutRes&& from) noexcept
    : MoveFileOutRes() {
    *this = ::std::move(from);
  }

  inline MoveFileOutRes& operator=(const MoveFileOutRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveFileOutRes& operator=(MoveFileOutRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveFileOutRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveFileOutRes* internal_default_instance() {
    return reinterpret_cast<const MoveFileOutRes*>(
               &_MoveFileOutRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MoveFileOutRes& a, MoveFileOutRes& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveFileOutRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveFileOutRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveFileOutRes* New() const final {
    return CreateMaybeMessage<MoveFileOutRes>(nullptr);
  }

  MoveFileOutRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveFileOutRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveFileOutRes& from);
  void MergeFrom(const MoveFileOutRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveFileOutRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.MoveFileOutRes";
  }
  protected:
  explicit MoveFileOutRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileTran_2eproto);
    return ::descriptor_table_FileTran_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallFieldNumber = 1,
    kExFieldNumber = 2,
    kRetFieldNumber = 3,
  };
  // .InforGuard_.netCallData call = 1;
  bool has_call() const;
  private:
  bool _internal_has_call() const;
  public:
  void clear_call();
  const ::InforGuard_::netCallData& call() const;
  ::InforGuard_::netCallData* release_call();
  ::InforGuard_::netCallData* mutable_call();
  void set_allocated_call(::InforGuard_::netCallData* call);
  private:
  const ::InforGuard_::netCallData& _internal_call() const;
  ::InforGuard_::netCallData* _internal_mutable_call();
  public:
  void unsafe_arena_set_allocated_call(
      ::InforGuard_::netCallData* call);
  ::InforGuard_::netCallData* unsafe_arena_release_call();

  // .InforGuard_.ExceptionError ex = 2;
  bool has_ex() const;
  private:
  bool _internal_has_ex() const;
  public:
  void clear_ex();
  const ::InforGuard_::ExceptionError& ex() const;
  ::InforGuard_::ExceptionError* release_ex();
  ::InforGuard_::ExceptionError* mutable_ex();
  void set_allocated_ex(::InforGuard_::ExceptionError* ex);
  private:
  const ::InforGuard_::ExceptionError& _internal_ex() const;
  ::InforGuard_::ExceptionError* _internal_mutable_ex();
  public:
  void unsafe_arena_set_allocated_ex(
      ::InforGuard_::ExceptionError* ex);
  ::InforGuard_::ExceptionError* unsafe_arena_release_ex();

  // int32 ret = 3;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.MoveFileOutRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::InforGuard_::netCallData* call_;
  ::InforGuard_::ExceptionError* ex_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileTran_2eproto;
};
// -------------------------------------------------------------------

class RenameFileReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.RenameFileReq) */ {
 public:
  inline RenameFileReq() : RenameFileReq(nullptr) {};
  virtual ~RenameFileReq();

  RenameFileReq(const RenameFileReq& from);
  RenameFileReq(RenameFileReq&& from) noexcept
    : RenameFileReq() {
    *this = ::std::move(from);
  }

  inline RenameFileReq& operator=(const RenameFileReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenameFileReq& operator=(RenameFileReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RenameFileReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RenameFileReq* internal_default_instance() {
    return reinterpret_cast<const RenameFileReq*>(
               &_RenameFileReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RenameFileReq& a, RenameFileReq& b) {
    a.Swap(&b);
  }
  inline void Swap(RenameFileReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RenameFileReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RenameFileReq* New() const final {
    return CreateMaybeMessage<RenameFileReq>(nullptr);
  }

  RenameFileReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RenameFileReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RenameFileReq& from);
  void MergeFrom(const RenameFileReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenameFileReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.RenameFileReq";
  }
  protected:
  explicit RenameFileReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileTran_2eproto);
    return ::descriptor_table_FileTran_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldfileFieldNumber = 2,
    kNewfileFieldNumber = 3,
    kCallFieldNumber = 1,
    kAttrFieldNumber = 4,
  };
  // bytes oldfile = 2;
  void clear_oldfile();
  const std::string& oldfile() const;
  void set_oldfile(const std::string& value);
  void set_oldfile(std::string&& value);
  void set_oldfile(const char* value);
  void set_oldfile(const void* value, size_t size);
  std::string* mutable_oldfile();
  std::string* release_oldfile();
  void set_allocated_oldfile(std::string* oldfile);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_oldfile();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_oldfile(
      std::string* oldfile);
  private:
  const std::string& _internal_oldfile() const;
  void _internal_set_oldfile(const std::string& value);
  std::string* _internal_mutable_oldfile();
  public:

  // bytes newfile = 3;
  void clear_newfile();
  const std::string& newfile() const;
  void set_newfile(const std::string& value);
  void set_newfile(std::string&& value);
  void set_newfile(const char* value);
  void set_newfile(const void* value, size_t size);
  std::string* mutable_newfile();
  std::string* release_newfile();
  void set_allocated_newfile(std::string* newfile);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_newfile();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_newfile(
      std::string* newfile);
  private:
  const std::string& _internal_newfile() const;
  void _internal_set_newfile(const std::string& value);
  std::string* _internal_mutable_newfile();
  public:

  // .InforGuard_.netCallData call = 1;
  bool has_call() const;
  private:
  bool _internal_has_call() const;
  public:
  void clear_call();
  const ::InforGuard_::netCallData& call() const;
  ::InforGuard_::netCallData* release_call();
  ::InforGuard_::netCallData* mutable_call();
  void set_allocated_call(::InforGuard_::netCallData* call);
  private:
  const ::InforGuard_::netCallData& _internal_call() const;
  ::InforGuard_::netCallData* _internal_mutable_call();
  public:
  void unsafe_arena_set_allocated_call(
      ::InforGuard_::netCallData* call);
  ::InforGuard_::netCallData* unsafe_arena_release_call();

  // int32 attr = 4;
  void clear_attr();
  ::PROTOBUF_NAMESPACE_ID::int32 attr() const;
  void set_attr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attr() const;
  void _internal_set_attr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.RenameFileReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oldfile_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newfile_;
  ::InforGuard_::netCallData* call_;
  ::PROTOBUF_NAMESPACE_ID::int32 attr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileTran_2eproto;
};
// -------------------------------------------------------------------

class RenameFileRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.RenameFileRes) */ {
 public:
  inline RenameFileRes() : RenameFileRes(nullptr) {};
  virtual ~RenameFileRes();

  RenameFileRes(const RenameFileRes& from);
  RenameFileRes(RenameFileRes&& from) noexcept
    : RenameFileRes() {
    *this = ::std::move(from);
  }

  inline RenameFileRes& operator=(const RenameFileRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenameFileRes& operator=(RenameFileRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RenameFileRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RenameFileRes* internal_default_instance() {
    return reinterpret_cast<const RenameFileRes*>(
               &_RenameFileRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RenameFileRes& a, RenameFileRes& b) {
    a.Swap(&b);
  }
  inline void Swap(RenameFileRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RenameFileRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RenameFileRes* New() const final {
    return CreateMaybeMessage<RenameFileRes>(nullptr);
  }

  RenameFileRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RenameFileRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RenameFileRes& from);
  void MergeFrom(const RenameFileRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenameFileRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.RenameFileRes";
  }
  protected:
  explicit RenameFileRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileTran_2eproto);
    return ::descriptor_table_FileTran_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallFieldNumber = 1,
    kExFieldNumber = 2,
    kRetFieldNumber = 3,
  };
  // .InforGuard_.netCallData call = 1;
  bool has_call() const;
  private:
  bool _internal_has_call() const;
  public:
  void clear_call();
  const ::InforGuard_::netCallData& call() const;
  ::InforGuard_::netCallData* release_call();
  ::InforGuard_::netCallData* mutable_call();
  void set_allocated_call(::InforGuard_::netCallData* call);
  private:
  const ::InforGuard_::netCallData& _internal_call() const;
  ::InforGuard_::netCallData* _internal_mutable_call();
  public:
  void unsafe_arena_set_allocated_call(
      ::InforGuard_::netCallData* call);
  ::InforGuard_::netCallData* unsafe_arena_release_call();

  // .InforGuard_.ExceptionError ex = 2;
  bool has_ex() const;
  private:
  bool _internal_has_ex() const;
  public:
  void clear_ex();
  const ::InforGuard_::ExceptionError& ex() const;
  ::InforGuard_::ExceptionError* release_ex();
  ::InforGuard_::ExceptionError* mutable_ex();
  void set_allocated_ex(::InforGuard_::ExceptionError* ex);
  private:
  const ::InforGuard_::ExceptionError& _internal_ex() const;
  ::InforGuard_::ExceptionError* _internal_mutable_ex();
  public:
  void unsafe_arena_set_allocated_ex(
      ::InforGuard_::ExceptionError* ex);
  ::InforGuard_::ExceptionError* unsafe_arena_release_ex();

  // int32 ret = 3;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.RenameFileRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::InforGuard_::netCallData* call_;
  ::InforGuard_::ExceptionError* ex_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileTran_2eproto;
};
// -------------------------------------------------------------------

class QueryBasePathReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.QueryBasePathReq) */ {
 public:
  inline QueryBasePathReq() : QueryBasePathReq(nullptr) {};
  virtual ~QueryBasePathReq();

  QueryBasePathReq(const QueryBasePathReq& from);
  QueryBasePathReq(QueryBasePathReq&& from) noexcept
    : QueryBasePathReq() {
    *this = ::std::move(from);
  }

  inline QueryBasePathReq& operator=(const QueryBasePathReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryBasePathReq& operator=(QueryBasePathReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryBasePathReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryBasePathReq* internal_default_instance() {
    return reinterpret_cast<const QueryBasePathReq*>(
               &_QueryBasePathReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(QueryBasePathReq& a, QueryBasePathReq& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryBasePathReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryBasePathReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryBasePathReq* New() const final {
    return CreateMaybeMessage<QueryBasePathReq>(nullptr);
  }

  QueryBasePathReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryBasePathReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryBasePathReq& from);
  void MergeFrom(const QueryBasePathReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryBasePathReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.QueryBasePathReq";
  }
  protected:
  explicit QueryBasePathReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileTran_2eproto);
    return ::descriptor_table_FileTran_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReqFieldNumber = 1,
  };
  // bool req = 1;
  void clear_req();
  bool req() const;
  void set_req(bool value);
  private:
  bool _internal_req() const;
  void _internal_set_req(bool value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.QueryBasePathReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool req_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileTran_2eproto;
};
// -------------------------------------------------------------------

class QueryBasePathRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.QueryBasePathRes) */ {
 public:
  inline QueryBasePathRes() : QueryBasePathRes(nullptr) {};
  virtual ~QueryBasePathRes();

  QueryBasePathRes(const QueryBasePathRes& from);
  QueryBasePathRes(QueryBasePathRes&& from) noexcept
    : QueryBasePathRes() {
    *this = ::std::move(from);
  }

  inline QueryBasePathRes& operator=(const QueryBasePathRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryBasePathRes& operator=(QueryBasePathRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryBasePathRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryBasePathRes* internal_default_instance() {
    return reinterpret_cast<const QueryBasePathRes*>(
               &_QueryBasePathRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(QueryBasePathRes& a, QueryBasePathRes& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryBasePathRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryBasePathRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryBasePathRes* New() const final {
    return CreateMaybeMessage<QueryBasePathRes>(nullptr);
  }

  QueryBasePathRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryBasePathRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryBasePathRes& from);
  void MergeFrom(const QueryBasePathRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryBasePathRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.QueryBasePathRes";
  }
  protected:
  explicit QueryBasePathRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileTran_2eproto);
    return ::descriptor_table_FileTran_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBasepathFieldNumber = 2,
    kExFieldNumber = 1,
    kRetFieldNumber = 3,
  };
  // bytes basepath = 2;
  void clear_basepath();
  const std::string& basepath() const;
  void set_basepath(const std::string& value);
  void set_basepath(std::string&& value);
  void set_basepath(const char* value);
  void set_basepath(const void* value, size_t size);
  std::string* mutable_basepath();
  std::string* release_basepath();
  void set_allocated_basepath(std::string* basepath);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_basepath();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_basepath(
      std::string* basepath);
  private:
  const std::string& _internal_basepath() const;
  void _internal_set_basepath(const std::string& value);
  std::string* _internal_mutable_basepath();
  public:

  // .InforGuard_.ExceptionError ex = 1;
  bool has_ex() const;
  private:
  bool _internal_has_ex() const;
  public:
  void clear_ex();
  const ::InforGuard_::ExceptionError& ex() const;
  ::InforGuard_::ExceptionError* release_ex();
  ::InforGuard_::ExceptionError* mutable_ex();
  void set_allocated_ex(::InforGuard_::ExceptionError* ex);
  private:
  const ::InforGuard_::ExceptionError& _internal_ex() const;
  ::InforGuard_::ExceptionError* _internal_mutable_ex();
  public:
  void unsafe_arena_set_allocated_ex(
      ::InforGuard_::ExceptionError* ex);
  ::InforGuard_::ExceptionError* unsafe_arena_release_ex();

  // int32 ret = 3;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.QueryBasePathRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr basepath_;
  ::InforGuard_::ExceptionError* ex_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileTran_2eproto;
};
// -------------------------------------------------------------------

class isFileExistReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.isFileExistReq) */ {
 public:
  inline isFileExistReq() : isFileExistReq(nullptr) {};
  virtual ~isFileExistReq();

  isFileExistReq(const isFileExistReq& from);
  isFileExistReq(isFileExistReq&& from) noexcept
    : isFileExistReq() {
    *this = ::std::move(from);
  }

  inline isFileExistReq& operator=(const isFileExistReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline isFileExistReq& operator=(isFileExistReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const isFileExistReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const isFileExistReq* internal_default_instance() {
    return reinterpret_cast<const isFileExistReq*>(
               &_isFileExistReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(isFileExistReq& a, isFileExistReq& b) {
    a.Swap(&b);
  }
  inline void Swap(isFileExistReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(isFileExistReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline isFileExistReq* New() const final {
    return CreateMaybeMessage<isFileExistReq>(nullptr);
  }

  isFileExistReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<isFileExistReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const isFileExistReq& from);
  void MergeFrom(const isFileExistReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(isFileExistReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.isFileExistReq";
  }
  protected:
  explicit isFileExistReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileTran_2eproto);
    return ::descriptor_table_FileTran_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilePathFieldNumber = 1,
  };
  // bytes filePath = 1;
  void clear_filepath();
  const std::string& filepath() const;
  void set_filepath(const std::string& value);
  void set_filepath(std::string&& value);
  void set_filepath(const char* value);
  void set_filepath(const void* value, size_t size);
  std::string* mutable_filepath();
  std::string* release_filepath();
  void set_allocated_filepath(std::string* filepath);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_filepath();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_filepath(
      std::string* filepath);
  private:
  const std::string& _internal_filepath() const;
  void _internal_set_filepath(const std::string& value);
  std::string* _internal_mutable_filepath();
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.isFileExistReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filepath_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileTran_2eproto;
};
// -------------------------------------------------------------------

class isFileExistRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.isFileExistRes) */ {
 public:
  inline isFileExistRes() : isFileExistRes(nullptr) {};
  virtual ~isFileExistRes();

  isFileExistRes(const isFileExistRes& from);
  isFileExistRes(isFileExistRes&& from) noexcept
    : isFileExistRes() {
    *this = ::std::move(from);
  }

  inline isFileExistRes& operator=(const isFileExistRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline isFileExistRes& operator=(isFileExistRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const isFileExistRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const isFileExistRes* internal_default_instance() {
    return reinterpret_cast<const isFileExistRes*>(
               &_isFileExistRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(isFileExistRes& a, isFileExistRes& b) {
    a.Swap(&b);
  }
  inline void Swap(isFileExistRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(isFileExistRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline isFileExistRes* New() const final {
    return CreateMaybeMessage<isFileExistRes>(nullptr);
  }

  isFileExistRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<isFileExistRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const isFileExistRes& from);
  void MergeFrom(const isFileExistRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(isFileExistRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.isFileExistRes";
  }
  protected:
  explicit isFileExistRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileTran_2eproto);
    return ::descriptor_table_FileTran_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExFieldNumber = 1,
    kFileSizeFieldNumber = 2,
    kRetFieldNumber = 3,
  };
  // .InforGuard_.ExceptionError ex = 1;
  bool has_ex() const;
  private:
  bool _internal_has_ex() const;
  public:
  void clear_ex();
  const ::InforGuard_::ExceptionError& ex() const;
  ::InforGuard_::ExceptionError* release_ex();
  ::InforGuard_::ExceptionError* mutable_ex();
  void set_allocated_ex(::InforGuard_::ExceptionError* ex);
  private:
  const ::InforGuard_::ExceptionError& _internal_ex() const;
  ::InforGuard_::ExceptionError* _internal_mutable_ex();
  public:
  void unsafe_arena_set_allocated_ex(
      ::InforGuard_::ExceptionError* ex);
  ::InforGuard_::ExceptionError* unsafe_arena_release_ex();

  // int32 fileSize = 2;
  void clear_filesize();
  ::PROTOBUF_NAMESPACE_ID::int32 filesize() const;
  void set_filesize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_filesize() const;
  void _internal_set_filesize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ret = 3;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.isFileExistRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::InforGuard_::ExceptionError* ex_;
  ::PROTOBUF_NAMESPACE_ID::int32 filesize_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileTran_2eproto;
};
// -------------------------------------------------------------------

class setFileTimeReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.setFileTimeReq) */ {
 public:
  inline setFileTimeReq() : setFileTimeReq(nullptr) {};
  virtual ~setFileTimeReq();

  setFileTimeReq(const setFileTimeReq& from);
  setFileTimeReq(setFileTimeReq&& from) noexcept
    : setFileTimeReq() {
    *this = ::std::move(from);
  }

  inline setFileTimeReq& operator=(const setFileTimeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline setFileTimeReq& operator=(setFileTimeReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const setFileTimeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const setFileTimeReq* internal_default_instance() {
    return reinterpret_cast<const setFileTimeReq*>(
               &_setFileTimeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(setFileTimeReq& a, setFileTimeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(setFileTimeReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setFileTimeReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setFileTimeReq* New() const final {
    return CreateMaybeMessage<setFileTimeReq>(nullptr);
  }

  setFileTimeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setFileTimeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const setFileTimeReq& from);
  void MergeFrom(const setFileTimeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setFileTimeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.setFileTimeReq";
  }
  protected:
  explicit setFileTimeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileTran_2eproto);
    return ::descriptor_table_FileTran_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 2,
    kCallFieldNumber = 1,
    kMtimeFieldNumber = 3,
  };
  // bytes filename = 2;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const void* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_filename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_filename(
      std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // .InforGuard_.netCallData call = 1;
  bool has_call() const;
  private:
  bool _internal_has_call() const;
  public:
  void clear_call();
  const ::InforGuard_::netCallData& call() const;
  ::InforGuard_::netCallData* release_call();
  ::InforGuard_::netCallData* mutable_call();
  void set_allocated_call(::InforGuard_::netCallData* call);
  private:
  const ::InforGuard_::netCallData& _internal_call() const;
  ::InforGuard_::netCallData* _internal_mutable_call();
  public:
  void unsafe_arena_set_allocated_call(
      ::InforGuard_::netCallData* call);
  ::InforGuard_::netCallData* unsafe_arena_release_call();

  // int32 mtime = 3;
  void clear_mtime();
  ::PROTOBUF_NAMESPACE_ID::int32 mtime() const;
  void set_mtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mtime() const;
  void _internal_set_mtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.setFileTimeReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::InforGuard_::netCallData* call_;
  ::PROTOBUF_NAMESPACE_ID::int32 mtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileTran_2eproto;
};
// -------------------------------------------------------------------

class setFileTimeRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.setFileTimeRes) */ {
 public:
  inline setFileTimeRes() : setFileTimeRes(nullptr) {};
  virtual ~setFileTimeRes();

  setFileTimeRes(const setFileTimeRes& from);
  setFileTimeRes(setFileTimeRes&& from) noexcept
    : setFileTimeRes() {
    *this = ::std::move(from);
  }

  inline setFileTimeRes& operator=(const setFileTimeRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline setFileTimeRes& operator=(setFileTimeRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const setFileTimeRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const setFileTimeRes* internal_default_instance() {
    return reinterpret_cast<const setFileTimeRes*>(
               &_setFileTimeRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(setFileTimeRes& a, setFileTimeRes& b) {
    a.Swap(&b);
  }
  inline void Swap(setFileTimeRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setFileTimeRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setFileTimeRes* New() const final {
    return CreateMaybeMessage<setFileTimeRes>(nullptr);
  }

  setFileTimeRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setFileTimeRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const setFileTimeRes& from);
  void MergeFrom(const setFileTimeRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setFileTimeRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.setFileTimeRes";
  }
  protected:
  explicit setFileTimeRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileTran_2eproto);
    return ::descriptor_table_FileTran_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallFieldNumber = 1,
    kExFieldNumber = 2,
    kRetFieldNumber = 3,
  };
  // .InforGuard_.netCallData call = 1;
  bool has_call() const;
  private:
  bool _internal_has_call() const;
  public:
  void clear_call();
  const ::InforGuard_::netCallData& call() const;
  ::InforGuard_::netCallData* release_call();
  ::InforGuard_::netCallData* mutable_call();
  void set_allocated_call(::InforGuard_::netCallData* call);
  private:
  const ::InforGuard_::netCallData& _internal_call() const;
  ::InforGuard_::netCallData* _internal_mutable_call();
  public:
  void unsafe_arena_set_allocated_call(
      ::InforGuard_::netCallData* call);
  ::InforGuard_::netCallData* unsafe_arena_release_call();

  // .InforGuard_.ExceptionError ex = 2;
  bool has_ex() const;
  private:
  bool _internal_has_ex() const;
  public:
  void clear_ex();
  const ::InforGuard_::ExceptionError& ex() const;
  ::InforGuard_::ExceptionError* release_ex();
  ::InforGuard_::ExceptionError* mutable_ex();
  void set_allocated_ex(::InforGuard_::ExceptionError* ex);
  private:
  const ::InforGuard_::ExceptionError& _internal_ex() const;
  ::InforGuard_::ExceptionError* _internal_mutable_ex();
  public:
  void unsafe_arena_set_allocated_ex(
      ::InforGuard_::ExceptionError* ex);
  ::InforGuard_::ExceptionError* unsafe_arena_release_ex();

  // int32 ret = 3;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.setFileTimeRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::InforGuard_::netCallData* call_;
  ::InforGuard_::ExceptionError* ex_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileTran_2eproto;
};
// -------------------------------------------------------------------

class getFileTimeReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.getFileTimeReq) */ {
 public:
  inline getFileTimeReq() : getFileTimeReq(nullptr) {};
  virtual ~getFileTimeReq();

  getFileTimeReq(const getFileTimeReq& from);
  getFileTimeReq(getFileTimeReq&& from) noexcept
    : getFileTimeReq() {
    *this = ::std::move(from);
  }

  inline getFileTimeReq& operator=(const getFileTimeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline getFileTimeReq& operator=(getFileTimeReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getFileTimeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const getFileTimeReq* internal_default_instance() {
    return reinterpret_cast<const getFileTimeReq*>(
               &_getFileTimeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(getFileTimeReq& a, getFileTimeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(getFileTimeReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getFileTimeReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getFileTimeReq* New() const final {
    return CreateMaybeMessage<getFileTimeReq>(nullptr);
  }

  getFileTimeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getFileTimeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getFileTimeReq& from);
  void MergeFrom(const getFileTimeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getFileTimeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.getFileTimeReq";
  }
  protected:
  explicit getFileTimeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileTran_2eproto);
    return ::descriptor_table_FileTran_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 2,
    kCallFieldNumber = 1,
  };
  // bytes filename = 2;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const void* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_filename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_filename(
      std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // .InforGuard_.netCallData call = 1;
  bool has_call() const;
  private:
  bool _internal_has_call() const;
  public:
  void clear_call();
  const ::InforGuard_::netCallData& call() const;
  ::InforGuard_::netCallData* release_call();
  ::InforGuard_::netCallData* mutable_call();
  void set_allocated_call(::InforGuard_::netCallData* call);
  private:
  const ::InforGuard_::netCallData& _internal_call() const;
  ::InforGuard_::netCallData* _internal_mutable_call();
  public:
  void unsafe_arena_set_allocated_call(
      ::InforGuard_::netCallData* call);
  ::InforGuard_::netCallData* unsafe_arena_release_call();

  // @@protoc_insertion_point(class_scope:InforGuard_.getFileTimeReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::InforGuard_::netCallData* call_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileTran_2eproto;
};
// -------------------------------------------------------------------

class getFileTimeRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.getFileTimeRes) */ {
 public:
  inline getFileTimeRes() : getFileTimeRes(nullptr) {};
  virtual ~getFileTimeRes();

  getFileTimeRes(const getFileTimeRes& from);
  getFileTimeRes(getFileTimeRes&& from) noexcept
    : getFileTimeRes() {
    *this = ::std::move(from);
  }

  inline getFileTimeRes& operator=(const getFileTimeRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline getFileTimeRes& operator=(getFileTimeRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getFileTimeRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const getFileTimeRes* internal_default_instance() {
    return reinterpret_cast<const getFileTimeRes*>(
               &_getFileTimeRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(getFileTimeRes& a, getFileTimeRes& b) {
    a.Swap(&b);
  }
  inline void Swap(getFileTimeRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getFileTimeRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getFileTimeRes* New() const final {
    return CreateMaybeMessage<getFileTimeRes>(nullptr);
  }

  getFileTimeRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getFileTimeRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getFileTimeRes& from);
  void MergeFrom(const getFileTimeRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getFileTimeRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.getFileTimeRes";
  }
  protected:
  explicit getFileTimeRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileTran_2eproto);
    return ::descriptor_table_FileTran_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallFieldNumber = 1,
    kExFieldNumber = 2,
    kMtimeFieldNumber = 3,
    kRetFieldNumber = 4,
  };
  // .InforGuard_.netCallData call = 1;
  bool has_call() const;
  private:
  bool _internal_has_call() const;
  public:
  void clear_call();
  const ::InforGuard_::netCallData& call() const;
  ::InforGuard_::netCallData* release_call();
  ::InforGuard_::netCallData* mutable_call();
  void set_allocated_call(::InforGuard_::netCallData* call);
  private:
  const ::InforGuard_::netCallData& _internal_call() const;
  ::InforGuard_::netCallData* _internal_mutable_call();
  public:
  void unsafe_arena_set_allocated_call(
      ::InforGuard_::netCallData* call);
  ::InforGuard_::netCallData* unsafe_arena_release_call();

  // .InforGuard_.ExceptionError ex = 2;
  bool has_ex() const;
  private:
  bool _internal_has_ex() const;
  public:
  void clear_ex();
  const ::InforGuard_::ExceptionError& ex() const;
  ::InforGuard_::ExceptionError* release_ex();
  ::InforGuard_::ExceptionError* mutable_ex();
  void set_allocated_ex(::InforGuard_::ExceptionError* ex);
  private:
  const ::InforGuard_::ExceptionError& _internal_ex() const;
  ::InforGuard_::ExceptionError* _internal_mutable_ex();
  public:
  void unsafe_arena_set_allocated_ex(
      ::InforGuard_::ExceptionError* ex);
  ::InforGuard_::ExceptionError* unsafe_arena_release_ex();

  // int32 mtime = 3;
  void clear_mtime();
  ::PROTOBUF_NAMESPACE_ID::int32 mtime() const;
  void set_mtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mtime() const;
  void _internal_set_mtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ret = 4;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.getFileTimeRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::InforGuard_::netCallData* call_;
  ::InforGuard_::ExceptionError* ex_;
  ::PROTOBUF_NAMESPACE_ID::int32 mtime_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileTran_2eproto;
};
// -------------------------------------------------------------------

class sendFileListReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.sendFileListReq) */ {
 public:
  inline sendFileListReq() : sendFileListReq(nullptr) {};
  virtual ~sendFileListReq();

  sendFileListReq(const sendFileListReq& from);
  sendFileListReq(sendFileListReq&& from) noexcept
    : sendFileListReq() {
    *this = ::std::move(from);
  }

  inline sendFileListReq& operator=(const sendFileListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline sendFileListReq& operator=(sendFileListReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const sendFileListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const sendFileListReq* internal_default_instance() {
    return reinterpret_cast<const sendFileListReq*>(
               &_sendFileListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(sendFileListReq& a, sendFileListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(sendFileListReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(sendFileListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline sendFileListReq* New() const final {
    return CreateMaybeMessage<sendFileListReq>(nullptr);
  }

  sendFileListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<sendFileListReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const sendFileListReq& from);
  void MergeFrom(const sendFileListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sendFileListReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.sendFileListReq";
  }
  protected:
  explicit sendFileListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileTran_2eproto);
    return ::descriptor_table_FileTran_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated .InforGuard_.RemoteDirectory list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::InforGuard_::RemoteDirectory* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::RemoteDirectory >*
      mutable_list();
  private:
  const ::InforGuard_::RemoteDirectory& _internal_list(int index) const;
  ::InforGuard_::RemoteDirectory* _internal_add_list();
  public:
  const ::InforGuard_::RemoteDirectory& list(int index) const;
  ::InforGuard_::RemoteDirectory* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::RemoteDirectory >&
      list() const;

  // @@protoc_insertion_point(class_scope:InforGuard_.sendFileListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::RemoteDirectory > list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileTran_2eproto;
};
// -------------------------------------------------------------------

class sendFileListRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.sendFileListRes) */ {
 public:
  inline sendFileListRes() : sendFileListRes(nullptr) {};
  virtual ~sendFileListRes();

  sendFileListRes(const sendFileListRes& from);
  sendFileListRes(sendFileListRes&& from) noexcept
    : sendFileListRes() {
    *this = ::std::move(from);
  }

  inline sendFileListRes& operator=(const sendFileListRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline sendFileListRes& operator=(sendFileListRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const sendFileListRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const sendFileListRes* internal_default_instance() {
    return reinterpret_cast<const sendFileListRes*>(
               &_sendFileListRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(sendFileListRes& a, sendFileListRes& b) {
    a.Swap(&b);
  }
  inline void Swap(sendFileListRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(sendFileListRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline sendFileListRes* New() const final {
    return CreateMaybeMessage<sendFileListRes>(nullptr);
  }

  sendFileListRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<sendFileListRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const sendFileListRes& from);
  void MergeFrom(const sendFileListRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sendFileListRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.sendFileListRes";
  }
  protected:
  explicit sendFileListRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileTran_2eproto);
    return ::descriptor_table_FileTran_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExFieldNumber = 1,
    kRetFieldNumber = 2,
  };
  // .InforGuard_.ExceptionError ex = 1;
  bool has_ex() const;
  private:
  bool _internal_has_ex() const;
  public:
  void clear_ex();
  const ::InforGuard_::ExceptionError& ex() const;
  ::InforGuard_::ExceptionError* release_ex();
  ::InforGuard_::ExceptionError* mutable_ex();
  void set_allocated_ex(::InforGuard_::ExceptionError* ex);
  private:
  const ::InforGuard_::ExceptionError& _internal_ex() const;
  ::InforGuard_::ExceptionError* _internal_mutable_ex();
  public:
  void unsafe_arena_set_allocated_ex(
      ::InforGuard_::ExceptionError* ex);
  ::InforGuard_::ExceptionError* unsafe_arena_release_ex();

  // int32 ret = 2;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.sendFileListRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::InforGuard_::ExceptionError* ex_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileTran_2eproto;
};
// -------------------------------------------------------------------

class sendAccessReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.sendAccessReq) */ {
 public:
  inline sendAccessReq() : sendAccessReq(nullptr) {};
  virtual ~sendAccessReq();

  sendAccessReq(const sendAccessReq& from);
  sendAccessReq(sendAccessReq&& from) noexcept
    : sendAccessReq() {
    *this = ::std::move(from);
  }

  inline sendAccessReq& operator=(const sendAccessReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline sendAccessReq& operator=(sendAccessReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const sendAccessReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const sendAccessReq* internal_default_instance() {
    return reinterpret_cast<const sendAccessReq*>(
               &_sendAccessReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(sendAccessReq& a, sendAccessReq& b) {
    a.Swap(&b);
  }
  inline void Swap(sendAccessReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(sendAccessReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline sendAccessReq* New() const final {
    return CreateMaybeMessage<sendAccessReq>(nullptr);
  }

  sendAccessReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<sendAccessReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const sendAccessReq& from);
  void MergeFrom(const sendAccessReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sendAccessReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.sendAccessReq";
  }
  protected:
  explicit sendAccessReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileTran_2eproto);
    return ::descriptor_table_FileTran_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReqFieldNumber = 1,
  };
  // bool req = 1;
  void clear_req();
  bool req() const;
  void set_req(bool value);
  private:
  bool _internal_req() const;
  void _internal_set_req(bool value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.sendAccessReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool req_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileTran_2eproto;
};
// -------------------------------------------------------------------

class sendAccessRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.sendAccessRes) */ {
 public:
  inline sendAccessRes() : sendAccessRes(nullptr) {};
  virtual ~sendAccessRes();

  sendAccessRes(const sendAccessRes& from);
  sendAccessRes(sendAccessRes&& from) noexcept
    : sendAccessRes() {
    *this = ::std::move(from);
  }

  inline sendAccessRes& operator=(const sendAccessRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline sendAccessRes& operator=(sendAccessRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const sendAccessRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const sendAccessRes* internal_default_instance() {
    return reinterpret_cast<const sendAccessRes*>(
               &_sendAccessRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(sendAccessRes& a, sendAccessRes& b) {
    a.Swap(&b);
  }
  inline void Swap(sendAccessRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(sendAccessRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline sendAccessRes* New() const final {
    return CreateMaybeMessage<sendAccessRes>(nullptr);
  }

  sendAccessRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<sendAccessRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const sendAccessRes& from);
  void MergeFrom(const sendAccessRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sendAccessRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.sendAccessRes";
  }
  protected:
  explicit sendAccessRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileTran_2eproto);
    return ::descriptor_table_FileTran_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExFieldNumber = 1,
    kRetFieldNumber = 2,
  };
  // .InforGuard_.ExceptionError ex = 1;
  bool has_ex() const;
  private:
  bool _internal_has_ex() const;
  public:
  void clear_ex();
  const ::InforGuard_::ExceptionError& ex() const;
  ::InforGuard_::ExceptionError* release_ex();
  ::InforGuard_::ExceptionError* mutable_ex();
  void set_allocated_ex(::InforGuard_::ExceptionError* ex);
  private:
  const ::InforGuard_::ExceptionError& _internal_ex() const;
  ::InforGuard_::ExceptionError* _internal_mutable_ex();
  public:
  void unsafe_arena_set_allocated_ex(
      ::InforGuard_::ExceptionError* ex);
  ::InforGuard_::ExceptionError* unsafe_arena_release_ex();

  // int32 ret = 2;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.sendAccessRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::InforGuard_::ExceptionError* ex_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileTran_2eproto;
};
// -------------------------------------------------------------------

class checkFileListReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.checkFileListReq) */ {
 public:
  inline checkFileListReq() : checkFileListReq(nullptr) {};
  virtual ~checkFileListReq();

  checkFileListReq(const checkFileListReq& from);
  checkFileListReq(checkFileListReq&& from) noexcept
    : checkFileListReq() {
    *this = ::std::move(from);
  }

  inline checkFileListReq& operator=(const checkFileListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline checkFileListReq& operator=(checkFileListReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const checkFileListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const checkFileListReq* internal_default_instance() {
    return reinterpret_cast<const checkFileListReq*>(
               &_checkFileListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(checkFileListReq& a, checkFileListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(checkFileListReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(checkFileListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline checkFileListReq* New() const final {
    return CreateMaybeMessage<checkFileListReq>(nullptr);
  }

  checkFileListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<checkFileListReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const checkFileListReq& from);
  void MergeFrom(const checkFileListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(checkFileListReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.checkFileListReq";
  }
  protected:
  explicit checkFileListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileTran_2eproto);
    return ::descriptor_table_FileTran_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInListFieldNumber = 1,
  };
  // repeated .InforGuard_.NetFileListNode inList = 1;
  int inlist_size() const;
  private:
  int _internal_inlist_size() const;
  public:
  void clear_inlist();
  ::InforGuard_::NetFileListNode* mutable_inlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::NetFileListNode >*
      mutable_inlist();
  private:
  const ::InforGuard_::NetFileListNode& _internal_inlist(int index) const;
  ::InforGuard_::NetFileListNode* _internal_add_inlist();
  public:
  const ::InforGuard_::NetFileListNode& inlist(int index) const;
  ::InforGuard_::NetFileListNode* add_inlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::NetFileListNode >&
      inlist() const;

  // @@protoc_insertion_point(class_scope:InforGuard_.checkFileListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::NetFileListNode > inlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileTran_2eproto;
};
// -------------------------------------------------------------------

class checkFileListRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.checkFileListRes) */ {
 public:
  inline checkFileListRes() : checkFileListRes(nullptr) {};
  virtual ~checkFileListRes();

  checkFileListRes(const checkFileListRes& from);
  checkFileListRes(checkFileListRes&& from) noexcept
    : checkFileListRes() {
    *this = ::std::move(from);
  }

  inline checkFileListRes& operator=(const checkFileListRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline checkFileListRes& operator=(checkFileListRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const checkFileListRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const checkFileListRes* internal_default_instance() {
    return reinterpret_cast<const checkFileListRes*>(
               &_checkFileListRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(checkFileListRes& a, checkFileListRes& b) {
    a.Swap(&b);
  }
  inline void Swap(checkFileListRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(checkFileListRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline checkFileListRes* New() const final {
    return CreateMaybeMessage<checkFileListRes>(nullptr);
  }

  checkFileListRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<checkFileListRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const checkFileListRes& from);
  void MergeFrom(const checkFileListRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(checkFileListRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.checkFileListRes";
  }
  protected:
  explicit checkFileListRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileTran_2eproto);
    return ::descriptor_table_FileTran_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotExistListFieldNumber = 2,
    kDiffListFieldNumber = 3,
    kExFieldNumber = 1,
    kRetFieldNumber = 4,
  };
  // repeated bytes notExistList = 2;
  int notexistlist_size() const;
  private:
  int _internal_notexistlist_size() const;
  public:
  void clear_notexistlist();
  const std::string& notexistlist(int index) const;
  std::string* mutable_notexistlist(int index);
  void set_notexistlist(int index, const std::string& value);
  void set_notexistlist(int index, std::string&& value);
  void set_notexistlist(int index, const char* value);
  void set_notexistlist(int index, const void* value, size_t size);
  std::string* add_notexistlist();
  void add_notexistlist(const std::string& value);
  void add_notexistlist(std::string&& value);
  void add_notexistlist(const char* value);
  void add_notexistlist(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& notexistlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_notexistlist();
  private:
  const std::string& _internal_notexistlist(int index) const;
  std::string* _internal_add_notexistlist();
  public:

  // repeated bytes diffList = 3;
  int difflist_size() const;
  private:
  int _internal_difflist_size() const;
  public:
  void clear_difflist();
  const std::string& difflist(int index) const;
  std::string* mutable_difflist(int index);
  void set_difflist(int index, const std::string& value);
  void set_difflist(int index, std::string&& value);
  void set_difflist(int index, const char* value);
  void set_difflist(int index, const void* value, size_t size);
  std::string* add_difflist();
  void add_difflist(const std::string& value);
  void add_difflist(std::string&& value);
  void add_difflist(const char* value);
  void add_difflist(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& difflist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_difflist();
  private:
  const std::string& _internal_difflist(int index) const;
  std::string* _internal_add_difflist();
  public:

  // .InforGuard_.ExceptionError ex = 1;
  bool has_ex() const;
  private:
  bool _internal_has_ex() const;
  public:
  void clear_ex();
  const ::InforGuard_::ExceptionError& ex() const;
  ::InforGuard_::ExceptionError* release_ex();
  ::InforGuard_::ExceptionError* mutable_ex();
  void set_allocated_ex(::InforGuard_::ExceptionError* ex);
  private:
  const ::InforGuard_::ExceptionError& _internal_ex() const;
  ::InforGuard_::ExceptionError* _internal_mutable_ex();
  public:
  void unsafe_arena_set_allocated_ex(
      ::InforGuard_::ExceptionError* ex);
  ::InforGuard_::ExceptionError* unsafe_arena_release_ex();

  // int32 ret = 4;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.checkFileListRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> notexistlist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> difflist_;
  ::InforGuard_::ExceptionError* ex_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileTran_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetFileBlockReq

// .InforGuard_.netCallData call = 1;
inline bool GetFileBlockReq::_internal_has_call() const {
  return this != internal_default_instance() && call_ != nullptr;
}
inline bool GetFileBlockReq::has_call() const {
  return _internal_has_call();
}
inline const ::InforGuard_::netCallData& GetFileBlockReq::_internal_call() const {
  const ::InforGuard_::netCallData* p = call_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::netCallData*>(
      &::InforGuard_::_netCallData_default_instance_);
}
inline const ::InforGuard_::netCallData& GetFileBlockReq::call() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetFileBlockReq.call)
  return _internal_call();
}
inline void GetFileBlockReq::unsafe_arena_set_allocated_call(
    ::InforGuard_::netCallData* call) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  call_ = call;
  if (call) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.GetFileBlockReq.call)
}
inline ::InforGuard_::netCallData* GetFileBlockReq::release_call() {
  auto temp = unsafe_arena_release_call();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::netCallData* GetFileBlockReq::unsafe_arena_release_call() {
  // @@protoc_insertion_point(field_release:InforGuard_.GetFileBlockReq.call)
  
  ::InforGuard_::netCallData* temp = call_;
  call_ = nullptr;
  return temp;
}
inline ::InforGuard_::netCallData* GetFileBlockReq::_internal_mutable_call() {
  
  if (call_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::netCallData>(GetArena());
    call_ = p;
  }
  return call_;
}
inline ::InforGuard_::netCallData* GetFileBlockReq::mutable_call() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.GetFileBlockReq.call)
  return _internal_mutable_call();
}
inline void GetFileBlockReq::set_allocated_call(::InforGuard_::netCallData* call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  if (call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call)->GetArena();
    if (message_arena != submessage_arena) {
      call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call, submessage_arena);
    }
    
  } else {
    
  }
  call_ = call;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.GetFileBlockReq.call)
}

// bytes filename = 2;
inline void GetFileBlockReq::clear_filename() {
  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetFileBlockReq::filename() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetFileBlockReq.filename)
  return _internal_filename();
}
inline void GetFileBlockReq::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:InforGuard_.GetFileBlockReq.filename)
}
inline std::string* GetFileBlockReq::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.GetFileBlockReq.filename)
  return _internal_mutable_filename();
}
inline const std::string& GetFileBlockReq::_internal_filename() const {
  return filename_.Get();
}
inline void GetFileBlockReq::_internal_set_filename(const std::string& value) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetFileBlockReq::set_filename(std::string&& value) {
  
  filename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.GetFileBlockReq.filename)
}
inline void GetFileBlockReq::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.GetFileBlockReq.filename)
}
inline void GetFileBlockReq::set_filename(const void* value,
    size_t size) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.GetFileBlockReq.filename)
}
inline std::string* GetFileBlockReq::_internal_mutable_filename() {
  
  return filename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetFileBlockReq::release_filename() {
  // @@protoc_insertion_point(field_release:InforGuard_.GetFileBlockReq.filename)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetFileBlockReq::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.GetFileBlockReq.filename)
}
inline std::string* GetFileBlockReq::unsafe_arena_release_filename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.GetFileBlockReq.filename)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return filename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetFileBlockReq::unsafe_arena_set_allocated_filename(
    std::string* filename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      filename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.GetFileBlockReq.filename)
}

// sint64 off = 3;
inline void GetFileBlockReq::clear_off() {
  off_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetFileBlockReq::_internal_off() const {
  return off_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetFileBlockReq::off() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetFileBlockReq.off)
  return _internal_off();
}
inline void GetFileBlockReq::_internal_set_off(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  off_ = value;
}
inline void GetFileBlockReq::set_off(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_off(value);
  // @@protoc_insertion_point(field_set:InforGuard_.GetFileBlockReq.off)
}

// int32 len = 4;
inline void GetFileBlockReq::clear_len() {
  len_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetFileBlockReq::_internal_len() const {
  return len_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetFileBlockReq::len() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetFileBlockReq.len)
  return _internal_len();
}
inline void GetFileBlockReq::_internal_set_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  len_ = value;
}
inline void GetFileBlockReq::set_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:InforGuard_.GetFileBlockReq.len)
}

// -------------------------------------------------------------------

// GetFileBlockRes

// .InforGuard_.netCallData call = 1;
inline bool GetFileBlockRes::_internal_has_call() const {
  return this != internal_default_instance() && call_ != nullptr;
}
inline bool GetFileBlockRes::has_call() const {
  return _internal_has_call();
}
inline const ::InforGuard_::netCallData& GetFileBlockRes::_internal_call() const {
  const ::InforGuard_::netCallData* p = call_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::netCallData*>(
      &::InforGuard_::_netCallData_default_instance_);
}
inline const ::InforGuard_::netCallData& GetFileBlockRes::call() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetFileBlockRes.call)
  return _internal_call();
}
inline void GetFileBlockRes::unsafe_arena_set_allocated_call(
    ::InforGuard_::netCallData* call) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  call_ = call;
  if (call) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.GetFileBlockRes.call)
}
inline ::InforGuard_::netCallData* GetFileBlockRes::release_call() {
  auto temp = unsafe_arena_release_call();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::netCallData* GetFileBlockRes::unsafe_arena_release_call() {
  // @@protoc_insertion_point(field_release:InforGuard_.GetFileBlockRes.call)
  
  ::InforGuard_::netCallData* temp = call_;
  call_ = nullptr;
  return temp;
}
inline ::InforGuard_::netCallData* GetFileBlockRes::_internal_mutable_call() {
  
  if (call_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::netCallData>(GetArena());
    call_ = p;
  }
  return call_;
}
inline ::InforGuard_::netCallData* GetFileBlockRes::mutable_call() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.GetFileBlockRes.call)
  return _internal_mutable_call();
}
inline void GetFileBlockRes::set_allocated_call(::InforGuard_::netCallData* call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  if (call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call)->GetArena();
    if (message_arena != submessage_arena) {
      call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call, submessage_arena);
    }
    
  } else {
    
  }
  call_ = call;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.GetFileBlockRes.call)
}

// .InforGuard_.ExceptionError ex = 2;
inline bool GetFileBlockRes::_internal_has_ex() const {
  return this != internal_default_instance() && ex_ != nullptr;
}
inline bool GetFileBlockRes::has_ex() const {
  return _internal_has_ex();
}
inline const ::InforGuard_::ExceptionError& GetFileBlockRes::_internal_ex() const {
  const ::InforGuard_::ExceptionError* p = ex_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::ExceptionError*>(
      &::InforGuard_::_ExceptionError_default_instance_);
}
inline const ::InforGuard_::ExceptionError& GetFileBlockRes::ex() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetFileBlockRes.ex)
  return _internal_ex();
}
inline void GetFileBlockRes::unsafe_arena_set_allocated_ex(
    ::InforGuard_::ExceptionError* ex) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  ex_ = ex;
  if (ex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.GetFileBlockRes.ex)
}
inline ::InforGuard_::ExceptionError* GetFileBlockRes::release_ex() {
  auto temp = unsafe_arena_release_ex();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::ExceptionError* GetFileBlockRes::unsafe_arena_release_ex() {
  // @@protoc_insertion_point(field_release:InforGuard_.GetFileBlockRes.ex)
  
  ::InforGuard_::ExceptionError* temp = ex_;
  ex_ = nullptr;
  return temp;
}
inline ::InforGuard_::ExceptionError* GetFileBlockRes::_internal_mutable_ex() {
  
  if (ex_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::ExceptionError>(GetArena());
    ex_ = p;
  }
  return ex_;
}
inline ::InforGuard_::ExceptionError* GetFileBlockRes::mutable_ex() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.GetFileBlockRes.ex)
  return _internal_mutable_ex();
}
inline void GetFileBlockRes::set_allocated_ex(::InforGuard_::ExceptionError* ex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  if (ex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex)->GetArena();
    if (message_arena != submessage_arena) {
      ex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ex, submessage_arena);
    }
    
  } else {
    
  }
  ex_ = ex;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.GetFileBlockRes.ex)
}

// bytes buff = 3;
inline void GetFileBlockRes::clear_buff() {
  buff_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetFileBlockRes::buff() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetFileBlockRes.buff)
  return _internal_buff();
}
inline void GetFileBlockRes::set_buff(const std::string& value) {
  _internal_set_buff(value);
  // @@protoc_insertion_point(field_set:InforGuard_.GetFileBlockRes.buff)
}
inline std::string* GetFileBlockRes::mutable_buff() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.GetFileBlockRes.buff)
  return _internal_mutable_buff();
}
inline const std::string& GetFileBlockRes::_internal_buff() const {
  return buff_.Get();
}
inline void GetFileBlockRes::_internal_set_buff(const std::string& value) {
  
  buff_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetFileBlockRes::set_buff(std::string&& value) {
  
  buff_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.GetFileBlockRes.buff)
}
inline void GetFileBlockRes::set_buff(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buff_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.GetFileBlockRes.buff)
}
inline void GetFileBlockRes::set_buff(const void* value,
    size_t size) {
  
  buff_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.GetFileBlockRes.buff)
}
inline std::string* GetFileBlockRes::_internal_mutable_buff() {
  
  return buff_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetFileBlockRes::release_buff() {
  // @@protoc_insertion_point(field_release:InforGuard_.GetFileBlockRes.buff)
  return buff_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetFileBlockRes::set_allocated_buff(std::string* buff) {
  if (buff != nullptr) {
    
  } else {
    
  }
  buff_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buff,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.GetFileBlockRes.buff)
}
inline std::string* GetFileBlockRes::unsafe_arena_release_buff() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.GetFileBlockRes.buff)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return buff_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetFileBlockRes::unsafe_arena_set_allocated_buff(
    std::string* buff) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (buff != nullptr) {
    
  } else {
    
  }
  buff_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      buff, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.GetFileBlockRes.buff)
}

// int32 len = 4;
inline void GetFileBlockRes::clear_len() {
  len_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetFileBlockRes::_internal_len() const {
  return len_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetFileBlockRes::len() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetFileBlockRes.len)
  return _internal_len();
}
inline void GetFileBlockRes::_internal_set_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  len_ = value;
}
inline void GetFileBlockRes::set_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:InforGuard_.GetFileBlockRes.len)
}

// int32 ret = 5;
inline void GetFileBlockRes::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetFileBlockRes::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetFileBlockRes::ret() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetFileBlockRes.ret)
  return _internal_ret();
}
inline void GetFileBlockRes::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void GetFileBlockRes::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:InforGuard_.GetFileBlockRes.ret)
}

// -------------------------------------------------------------------

// PutFileBlockReq

// .InforGuard_.netCallData call = 1;
inline bool PutFileBlockReq::_internal_has_call() const {
  return this != internal_default_instance() && call_ != nullptr;
}
inline bool PutFileBlockReq::has_call() const {
  return _internal_has_call();
}
inline const ::InforGuard_::netCallData& PutFileBlockReq::_internal_call() const {
  const ::InforGuard_::netCallData* p = call_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::netCallData*>(
      &::InforGuard_::_netCallData_default_instance_);
}
inline const ::InforGuard_::netCallData& PutFileBlockReq::call() const {
  // @@protoc_insertion_point(field_get:InforGuard_.PutFileBlockReq.call)
  return _internal_call();
}
inline void PutFileBlockReq::unsafe_arena_set_allocated_call(
    ::InforGuard_::netCallData* call) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  call_ = call;
  if (call) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.PutFileBlockReq.call)
}
inline ::InforGuard_::netCallData* PutFileBlockReq::release_call() {
  auto temp = unsafe_arena_release_call();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::netCallData* PutFileBlockReq::unsafe_arena_release_call() {
  // @@protoc_insertion_point(field_release:InforGuard_.PutFileBlockReq.call)
  
  ::InforGuard_::netCallData* temp = call_;
  call_ = nullptr;
  return temp;
}
inline ::InforGuard_::netCallData* PutFileBlockReq::_internal_mutable_call() {
  
  if (call_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::netCallData>(GetArena());
    call_ = p;
  }
  return call_;
}
inline ::InforGuard_::netCallData* PutFileBlockReq::mutable_call() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.PutFileBlockReq.call)
  return _internal_mutable_call();
}
inline void PutFileBlockReq::set_allocated_call(::InforGuard_::netCallData* call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  if (call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call)->GetArena();
    if (message_arena != submessage_arena) {
      call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call, submessage_arena);
    }
    
  } else {
    
  }
  call_ = call;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.PutFileBlockReq.call)
}

// bytes filename = 2;
inline void PutFileBlockReq::clear_filename() {
  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PutFileBlockReq::filename() const {
  // @@protoc_insertion_point(field_get:InforGuard_.PutFileBlockReq.filename)
  return _internal_filename();
}
inline void PutFileBlockReq::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:InforGuard_.PutFileBlockReq.filename)
}
inline std::string* PutFileBlockReq::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.PutFileBlockReq.filename)
  return _internal_mutable_filename();
}
inline const std::string& PutFileBlockReq::_internal_filename() const {
  return filename_.Get();
}
inline void PutFileBlockReq::_internal_set_filename(const std::string& value) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PutFileBlockReq::set_filename(std::string&& value) {
  
  filename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.PutFileBlockReq.filename)
}
inline void PutFileBlockReq::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.PutFileBlockReq.filename)
}
inline void PutFileBlockReq::set_filename(const void* value,
    size_t size) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.PutFileBlockReq.filename)
}
inline std::string* PutFileBlockReq::_internal_mutable_filename() {
  
  return filename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PutFileBlockReq::release_filename() {
  // @@protoc_insertion_point(field_release:InforGuard_.PutFileBlockReq.filename)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PutFileBlockReq::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.PutFileBlockReq.filename)
}
inline std::string* PutFileBlockReq::unsafe_arena_release_filename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.PutFileBlockReq.filename)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return filename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PutFileBlockReq::unsafe_arena_set_allocated_filename(
    std::string* filename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      filename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.PutFileBlockReq.filename)
}

// sint64 off = 3;
inline void PutFileBlockReq::clear_off() {
  off_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PutFileBlockReq::_internal_off() const {
  return off_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PutFileBlockReq::off() const {
  // @@protoc_insertion_point(field_get:InforGuard_.PutFileBlockReq.off)
  return _internal_off();
}
inline void PutFileBlockReq::_internal_set_off(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  off_ = value;
}
inline void PutFileBlockReq::set_off(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_off(value);
  // @@protoc_insertion_point(field_set:InforGuard_.PutFileBlockReq.off)
}

// bytes buff = 4;
inline void PutFileBlockReq::clear_buff() {
  buff_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PutFileBlockReq::buff() const {
  // @@protoc_insertion_point(field_get:InforGuard_.PutFileBlockReq.buff)
  return _internal_buff();
}
inline void PutFileBlockReq::set_buff(const std::string& value) {
  _internal_set_buff(value);
  // @@protoc_insertion_point(field_set:InforGuard_.PutFileBlockReq.buff)
}
inline std::string* PutFileBlockReq::mutable_buff() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.PutFileBlockReq.buff)
  return _internal_mutable_buff();
}
inline const std::string& PutFileBlockReq::_internal_buff() const {
  return buff_.Get();
}
inline void PutFileBlockReq::_internal_set_buff(const std::string& value) {
  
  buff_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PutFileBlockReq::set_buff(std::string&& value) {
  
  buff_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.PutFileBlockReq.buff)
}
inline void PutFileBlockReq::set_buff(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buff_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.PutFileBlockReq.buff)
}
inline void PutFileBlockReq::set_buff(const void* value,
    size_t size) {
  
  buff_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.PutFileBlockReq.buff)
}
inline std::string* PutFileBlockReq::_internal_mutable_buff() {
  
  return buff_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PutFileBlockReq::release_buff() {
  // @@protoc_insertion_point(field_release:InforGuard_.PutFileBlockReq.buff)
  return buff_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PutFileBlockReq::set_allocated_buff(std::string* buff) {
  if (buff != nullptr) {
    
  } else {
    
  }
  buff_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buff,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.PutFileBlockReq.buff)
}
inline std::string* PutFileBlockReq::unsafe_arena_release_buff() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.PutFileBlockReq.buff)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return buff_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PutFileBlockReq::unsafe_arena_set_allocated_buff(
    std::string* buff) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (buff != nullptr) {
    
  } else {
    
  }
  buff_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      buff, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.PutFileBlockReq.buff)
}

// int32 len = 5;
inline void PutFileBlockReq::clear_len() {
  len_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PutFileBlockReq::_internal_len() const {
  return len_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PutFileBlockReq::len() const {
  // @@protoc_insertion_point(field_get:InforGuard_.PutFileBlockReq.len)
  return _internal_len();
}
inline void PutFileBlockReq::_internal_set_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  len_ = value;
}
inline void PutFileBlockReq::set_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:InforGuard_.PutFileBlockReq.len)
}

// -------------------------------------------------------------------

// PutFileBlockRes

// .InforGuard_.netCallData call = 1;
inline bool PutFileBlockRes::_internal_has_call() const {
  return this != internal_default_instance() && call_ != nullptr;
}
inline bool PutFileBlockRes::has_call() const {
  return _internal_has_call();
}
inline const ::InforGuard_::netCallData& PutFileBlockRes::_internal_call() const {
  const ::InforGuard_::netCallData* p = call_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::netCallData*>(
      &::InforGuard_::_netCallData_default_instance_);
}
inline const ::InforGuard_::netCallData& PutFileBlockRes::call() const {
  // @@protoc_insertion_point(field_get:InforGuard_.PutFileBlockRes.call)
  return _internal_call();
}
inline void PutFileBlockRes::unsafe_arena_set_allocated_call(
    ::InforGuard_::netCallData* call) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  call_ = call;
  if (call) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.PutFileBlockRes.call)
}
inline ::InforGuard_::netCallData* PutFileBlockRes::release_call() {
  auto temp = unsafe_arena_release_call();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::netCallData* PutFileBlockRes::unsafe_arena_release_call() {
  // @@protoc_insertion_point(field_release:InforGuard_.PutFileBlockRes.call)
  
  ::InforGuard_::netCallData* temp = call_;
  call_ = nullptr;
  return temp;
}
inline ::InforGuard_::netCallData* PutFileBlockRes::_internal_mutable_call() {
  
  if (call_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::netCallData>(GetArena());
    call_ = p;
  }
  return call_;
}
inline ::InforGuard_::netCallData* PutFileBlockRes::mutable_call() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.PutFileBlockRes.call)
  return _internal_mutable_call();
}
inline void PutFileBlockRes::set_allocated_call(::InforGuard_::netCallData* call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  if (call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call)->GetArena();
    if (message_arena != submessage_arena) {
      call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call, submessage_arena);
    }
    
  } else {
    
  }
  call_ = call;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.PutFileBlockRes.call)
}

// .InforGuard_.ExceptionError ex = 2;
inline bool PutFileBlockRes::_internal_has_ex() const {
  return this != internal_default_instance() && ex_ != nullptr;
}
inline bool PutFileBlockRes::has_ex() const {
  return _internal_has_ex();
}
inline const ::InforGuard_::ExceptionError& PutFileBlockRes::_internal_ex() const {
  const ::InforGuard_::ExceptionError* p = ex_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::ExceptionError*>(
      &::InforGuard_::_ExceptionError_default_instance_);
}
inline const ::InforGuard_::ExceptionError& PutFileBlockRes::ex() const {
  // @@protoc_insertion_point(field_get:InforGuard_.PutFileBlockRes.ex)
  return _internal_ex();
}
inline void PutFileBlockRes::unsafe_arena_set_allocated_ex(
    ::InforGuard_::ExceptionError* ex) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  ex_ = ex;
  if (ex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.PutFileBlockRes.ex)
}
inline ::InforGuard_::ExceptionError* PutFileBlockRes::release_ex() {
  auto temp = unsafe_arena_release_ex();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::ExceptionError* PutFileBlockRes::unsafe_arena_release_ex() {
  // @@protoc_insertion_point(field_release:InforGuard_.PutFileBlockRes.ex)
  
  ::InforGuard_::ExceptionError* temp = ex_;
  ex_ = nullptr;
  return temp;
}
inline ::InforGuard_::ExceptionError* PutFileBlockRes::_internal_mutable_ex() {
  
  if (ex_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::ExceptionError>(GetArena());
    ex_ = p;
  }
  return ex_;
}
inline ::InforGuard_::ExceptionError* PutFileBlockRes::mutable_ex() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.PutFileBlockRes.ex)
  return _internal_mutable_ex();
}
inline void PutFileBlockRes::set_allocated_ex(::InforGuard_::ExceptionError* ex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  if (ex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex)->GetArena();
    if (message_arena != submessage_arena) {
      ex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ex, submessage_arena);
    }
    
  } else {
    
  }
  ex_ = ex;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.PutFileBlockRes.ex)
}

// int32 len = 3;
inline void PutFileBlockRes::clear_len() {
  len_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PutFileBlockRes::_internal_len() const {
  return len_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PutFileBlockRes::len() const {
  // @@protoc_insertion_point(field_get:InforGuard_.PutFileBlockRes.len)
  return _internal_len();
}
inline void PutFileBlockRes::_internal_set_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  len_ = value;
}
inline void PutFileBlockRes::set_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:InforGuard_.PutFileBlockRes.len)
}

// int32 ret = 4;
inline void PutFileBlockRes::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PutFileBlockRes::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PutFileBlockRes::ret() const {
  // @@protoc_insertion_point(field_get:InforGuard_.PutFileBlockRes.ret)
  return _internal_ret();
}
inline void PutFileBlockRes::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void PutFileBlockRes::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:InforGuard_.PutFileBlockRes.ret)
}

// -------------------------------------------------------------------

// MakeDirectoryReq

// .InforGuard_.netCallData call = 1;
inline bool MakeDirectoryReq::_internal_has_call() const {
  return this != internal_default_instance() && call_ != nullptr;
}
inline bool MakeDirectoryReq::has_call() const {
  return _internal_has_call();
}
inline const ::InforGuard_::netCallData& MakeDirectoryReq::_internal_call() const {
  const ::InforGuard_::netCallData* p = call_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::netCallData*>(
      &::InforGuard_::_netCallData_default_instance_);
}
inline const ::InforGuard_::netCallData& MakeDirectoryReq::call() const {
  // @@protoc_insertion_point(field_get:InforGuard_.MakeDirectoryReq.call)
  return _internal_call();
}
inline void MakeDirectoryReq::unsafe_arena_set_allocated_call(
    ::InforGuard_::netCallData* call) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  call_ = call;
  if (call) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.MakeDirectoryReq.call)
}
inline ::InforGuard_::netCallData* MakeDirectoryReq::release_call() {
  auto temp = unsafe_arena_release_call();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::netCallData* MakeDirectoryReq::unsafe_arena_release_call() {
  // @@protoc_insertion_point(field_release:InforGuard_.MakeDirectoryReq.call)
  
  ::InforGuard_::netCallData* temp = call_;
  call_ = nullptr;
  return temp;
}
inline ::InforGuard_::netCallData* MakeDirectoryReq::_internal_mutable_call() {
  
  if (call_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::netCallData>(GetArena());
    call_ = p;
  }
  return call_;
}
inline ::InforGuard_::netCallData* MakeDirectoryReq::mutable_call() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.MakeDirectoryReq.call)
  return _internal_mutable_call();
}
inline void MakeDirectoryReq::set_allocated_call(::InforGuard_::netCallData* call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  if (call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call)->GetArena();
    if (message_arena != submessage_arena) {
      call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call, submessage_arena);
    }
    
  } else {
    
  }
  call_ = call;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.MakeDirectoryReq.call)
}

// bytes filename = 2;
inline void MakeDirectoryReq::clear_filename() {
  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MakeDirectoryReq::filename() const {
  // @@protoc_insertion_point(field_get:InforGuard_.MakeDirectoryReq.filename)
  return _internal_filename();
}
inline void MakeDirectoryReq::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:InforGuard_.MakeDirectoryReq.filename)
}
inline std::string* MakeDirectoryReq::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.MakeDirectoryReq.filename)
  return _internal_mutable_filename();
}
inline const std::string& MakeDirectoryReq::_internal_filename() const {
  return filename_.Get();
}
inline void MakeDirectoryReq::_internal_set_filename(const std::string& value) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MakeDirectoryReq::set_filename(std::string&& value) {
  
  filename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.MakeDirectoryReq.filename)
}
inline void MakeDirectoryReq::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.MakeDirectoryReq.filename)
}
inline void MakeDirectoryReq::set_filename(const void* value,
    size_t size) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.MakeDirectoryReq.filename)
}
inline std::string* MakeDirectoryReq::_internal_mutable_filename() {
  
  return filename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MakeDirectoryReq::release_filename() {
  // @@protoc_insertion_point(field_release:InforGuard_.MakeDirectoryReq.filename)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MakeDirectoryReq::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.MakeDirectoryReq.filename)
}
inline std::string* MakeDirectoryReq::unsafe_arena_release_filename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.MakeDirectoryReq.filename)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return filename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MakeDirectoryReq::unsafe_arena_set_allocated_filename(
    std::string* filename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      filename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.MakeDirectoryReq.filename)
}

// bool temp = 3;
inline void MakeDirectoryReq::clear_temp() {
  temp_ = false;
}
inline bool MakeDirectoryReq::_internal_temp() const {
  return temp_;
}
inline bool MakeDirectoryReq::temp() const {
  // @@protoc_insertion_point(field_get:InforGuard_.MakeDirectoryReq.temp)
  return _internal_temp();
}
inline void MakeDirectoryReq::_internal_set_temp(bool value) {
  
  temp_ = value;
}
inline void MakeDirectoryReq::set_temp(bool value) {
  _internal_set_temp(value);
  // @@protoc_insertion_point(field_set:InforGuard_.MakeDirectoryReq.temp)
}

// -------------------------------------------------------------------

// MakeDirectoryRes

// .InforGuard_.netCallData call = 1;
inline bool MakeDirectoryRes::_internal_has_call() const {
  return this != internal_default_instance() && call_ != nullptr;
}
inline bool MakeDirectoryRes::has_call() const {
  return _internal_has_call();
}
inline const ::InforGuard_::netCallData& MakeDirectoryRes::_internal_call() const {
  const ::InforGuard_::netCallData* p = call_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::netCallData*>(
      &::InforGuard_::_netCallData_default_instance_);
}
inline const ::InforGuard_::netCallData& MakeDirectoryRes::call() const {
  // @@protoc_insertion_point(field_get:InforGuard_.MakeDirectoryRes.call)
  return _internal_call();
}
inline void MakeDirectoryRes::unsafe_arena_set_allocated_call(
    ::InforGuard_::netCallData* call) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  call_ = call;
  if (call) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.MakeDirectoryRes.call)
}
inline ::InforGuard_::netCallData* MakeDirectoryRes::release_call() {
  auto temp = unsafe_arena_release_call();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::netCallData* MakeDirectoryRes::unsafe_arena_release_call() {
  // @@protoc_insertion_point(field_release:InforGuard_.MakeDirectoryRes.call)
  
  ::InforGuard_::netCallData* temp = call_;
  call_ = nullptr;
  return temp;
}
inline ::InforGuard_::netCallData* MakeDirectoryRes::_internal_mutable_call() {
  
  if (call_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::netCallData>(GetArena());
    call_ = p;
  }
  return call_;
}
inline ::InforGuard_::netCallData* MakeDirectoryRes::mutable_call() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.MakeDirectoryRes.call)
  return _internal_mutable_call();
}
inline void MakeDirectoryRes::set_allocated_call(::InforGuard_::netCallData* call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  if (call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call)->GetArena();
    if (message_arena != submessage_arena) {
      call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call, submessage_arena);
    }
    
  } else {
    
  }
  call_ = call;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.MakeDirectoryRes.call)
}

// .InforGuard_.ExceptionError ex = 2;
inline bool MakeDirectoryRes::_internal_has_ex() const {
  return this != internal_default_instance() && ex_ != nullptr;
}
inline bool MakeDirectoryRes::has_ex() const {
  return _internal_has_ex();
}
inline const ::InforGuard_::ExceptionError& MakeDirectoryRes::_internal_ex() const {
  const ::InforGuard_::ExceptionError* p = ex_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::ExceptionError*>(
      &::InforGuard_::_ExceptionError_default_instance_);
}
inline const ::InforGuard_::ExceptionError& MakeDirectoryRes::ex() const {
  // @@protoc_insertion_point(field_get:InforGuard_.MakeDirectoryRes.ex)
  return _internal_ex();
}
inline void MakeDirectoryRes::unsafe_arena_set_allocated_ex(
    ::InforGuard_::ExceptionError* ex) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  ex_ = ex;
  if (ex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.MakeDirectoryRes.ex)
}
inline ::InforGuard_::ExceptionError* MakeDirectoryRes::release_ex() {
  auto temp = unsafe_arena_release_ex();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::ExceptionError* MakeDirectoryRes::unsafe_arena_release_ex() {
  // @@protoc_insertion_point(field_release:InforGuard_.MakeDirectoryRes.ex)
  
  ::InforGuard_::ExceptionError* temp = ex_;
  ex_ = nullptr;
  return temp;
}
inline ::InforGuard_::ExceptionError* MakeDirectoryRes::_internal_mutable_ex() {
  
  if (ex_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::ExceptionError>(GetArena());
    ex_ = p;
  }
  return ex_;
}
inline ::InforGuard_::ExceptionError* MakeDirectoryRes::mutable_ex() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.MakeDirectoryRes.ex)
  return _internal_mutable_ex();
}
inline void MakeDirectoryRes::set_allocated_ex(::InforGuard_::ExceptionError* ex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  if (ex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex)->GetArena();
    if (message_arena != submessage_arena) {
      ex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ex, submessage_arena);
    }
    
  } else {
    
  }
  ex_ = ex;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.MakeDirectoryRes.ex)
}

// int32 ret = 3;
inline void MakeDirectoryRes::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MakeDirectoryRes::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MakeDirectoryRes::ret() const {
  // @@protoc_insertion_point(field_get:InforGuard_.MakeDirectoryRes.ret)
  return _internal_ret();
}
inline void MakeDirectoryRes::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void MakeDirectoryRes::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:InforGuard_.MakeDirectoryRes.ret)
}

// -------------------------------------------------------------------

// MoveFileInReq

// .InforGuard_.netCallData call = 1;
inline bool MoveFileInReq::_internal_has_call() const {
  return this != internal_default_instance() && call_ != nullptr;
}
inline bool MoveFileInReq::has_call() const {
  return _internal_has_call();
}
inline const ::InforGuard_::netCallData& MoveFileInReq::_internal_call() const {
  const ::InforGuard_::netCallData* p = call_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::netCallData*>(
      &::InforGuard_::_netCallData_default_instance_);
}
inline const ::InforGuard_::netCallData& MoveFileInReq::call() const {
  // @@protoc_insertion_point(field_get:InforGuard_.MoveFileInReq.call)
  return _internal_call();
}
inline void MoveFileInReq::unsafe_arena_set_allocated_call(
    ::InforGuard_::netCallData* call) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  call_ = call;
  if (call) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.MoveFileInReq.call)
}
inline ::InforGuard_::netCallData* MoveFileInReq::release_call() {
  auto temp = unsafe_arena_release_call();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::netCallData* MoveFileInReq::unsafe_arena_release_call() {
  // @@protoc_insertion_point(field_release:InforGuard_.MoveFileInReq.call)
  
  ::InforGuard_::netCallData* temp = call_;
  call_ = nullptr;
  return temp;
}
inline ::InforGuard_::netCallData* MoveFileInReq::_internal_mutable_call() {
  
  if (call_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::netCallData>(GetArena());
    call_ = p;
  }
  return call_;
}
inline ::InforGuard_::netCallData* MoveFileInReq::mutable_call() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.MoveFileInReq.call)
  return _internal_mutable_call();
}
inline void MoveFileInReq::set_allocated_call(::InforGuard_::netCallData* call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  if (call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call)->GetArena();
    if (message_arena != submessage_arena) {
      call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call, submessage_arena);
    }
    
  } else {
    
  }
  call_ = call;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.MoveFileInReq.call)
}

// bytes srcfile = 2;
inline void MoveFileInReq::clear_srcfile() {
  srcfile_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MoveFileInReq::srcfile() const {
  // @@protoc_insertion_point(field_get:InforGuard_.MoveFileInReq.srcfile)
  return _internal_srcfile();
}
inline void MoveFileInReq::set_srcfile(const std::string& value) {
  _internal_set_srcfile(value);
  // @@protoc_insertion_point(field_set:InforGuard_.MoveFileInReq.srcfile)
}
inline std::string* MoveFileInReq::mutable_srcfile() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.MoveFileInReq.srcfile)
  return _internal_mutable_srcfile();
}
inline const std::string& MoveFileInReq::_internal_srcfile() const {
  return srcfile_.Get();
}
inline void MoveFileInReq::_internal_set_srcfile(const std::string& value) {
  
  srcfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MoveFileInReq::set_srcfile(std::string&& value) {
  
  srcfile_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.MoveFileInReq.srcfile)
}
inline void MoveFileInReq::set_srcfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  srcfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.MoveFileInReq.srcfile)
}
inline void MoveFileInReq::set_srcfile(const void* value,
    size_t size) {
  
  srcfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.MoveFileInReq.srcfile)
}
inline std::string* MoveFileInReq::_internal_mutable_srcfile() {
  
  return srcfile_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MoveFileInReq::release_srcfile() {
  // @@protoc_insertion_point(field_release:InforGuard_.MoveFileInReq.srcfile)
  return srcfile_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MoveFileInReq::set_allocated_srcfile(std::string* srcfile) {
  if (srcfile != nullptr) {
    
  } else {
    
  }
  srcfile_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), srcfile,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.MoveFileInReq.srcfile)
}
inline std::string* MoveFileInReq::unsafe_arena_release_srcfile() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.MoveFileInReq.srcfile)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return srcfile_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MoveFileInReq::unsafe_arena_set_allocated_srcfile(
    std::string* srcfile) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (srcfile != nullptr) {
    
  } else {
    
  }
  srcfile_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      srcfile, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.MoveFileInReq.srcfile)
}

// bytes dstfile = 3;
inline void MoveFileInReq::clear_dstfile() {
  dstfile_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MoveFileInReq::dstfile() const {
  // @@protoc_insertion_point(field_get:InforGuard_.MoveFileInReq.dstfile)
  return _internal_dstfile();
}
inline void MoveFileInReq::set_dstfile(const std::string& value) {
  _internal_set_dstfile(value);
  // @@protoc_insertion_point(field_set:InforGuard_.MoveFileInReq.dstfile)
}
inline std::string* MoveFileInReq::mutable_dstfile() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.MoveFileInReq.dstfile)
  return _internal_mutable_dstfile();
}
inline const std::string& MoveFileInReq::_internal_dstfile() const {
  return dstfile_.Get();
}
inline void MoveFileInReq::_internal_set_dstfile(const std::string& value) {
  
  dstfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MoveFileInReq::set_dstfile(std::string&& value) {
  
  dstfile_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.MoveFileInReq.dstfile)
}
inline void MoveFileInReq::set_dstfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dstfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.MoveFileInReq.dstfile)
}
inline void MoveFileInReq::set_dstfile(const void* value,
    size_t size) {
  
  dstfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.MoveFileInReq.dstfile)
}
inline std::string* MoveFileInReq::_internal_mutable_dstfile() {
  
  return dstfile_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MoveFileInReq::release_dstfile() {
  // @@protoc_insertion_point(field_release:InforGuard_.MoveFileInReq.dstfile)
  return dstfile_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MoveFileInReq::set_allocated_dstfile(std::string* dstfile) {
  if (dstfile != nullptr) {
    
  } else {
    
  }
  dstfile_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dstfile,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.MoveFileInReq.dstfile)
}
inline std::string* MoveFileInReq::unsafe_arena_release_dstfile() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.MoveFileInReq.dstfile)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dstfile_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MoveFileInReq::unsafe_arena_set_allocated_dstfile(
    std::string* dstfile) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dstfile != nullptr) {
    
  } else {
    
  }
  dstfile_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dstfile, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.MoveFileInReq.dstfile)
}

// bytes delfile = 4;
inline void MoveFileInReq::clear_delfile() {
  delfile_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MoveFileInReq::delfile() const {
  // @@protoc_insertion_point(field_get:InforGuard_.MoveFileInReq.delfile)
  return _internal_delfile();
}
inline void MoveFileInReq::set_delfile(const std::string& value) {
  _internal_set_delfile(value);
  // @@protoc_insertion_point(field_set:InforGuard_.MoveFileInReq.delfile)
}
inline std::string* MoveFileInReq::mutable_delfile() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.MoveFileInReq.delfile)
  return _internal_mutable_delfile();
}
inline const std::string& MoveFileInReq::_internal_delfile() const {
  return delfile_.Get();
}
inline void MoveFileInReq::_internal_set_delfile(const std::string& value) {
  
  delfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MoveFileInReq::set_delfile(std::string&& value) {
  
  delfile_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.MoveFileInReq.delfile)
}
inline void MoveFileInReq::set_delfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  delfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.MoveFileInReq.delfile)
}
inline void MoveFileInReq::set_delfile(const void* value,
    size_t size) {
  
  delfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.MoveFileInReq.delfile)
}
inline std::string* MoveFileInReq::_internal_mutable_delfile() {
  
  return delfile_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MoveFileInReq::release_delfile() {
  // @@protoc_insertion_point(field_release:InforGuard_.MoveFileInReq.delfile)
  return delfile_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MoveFileInReq::set_allocated_delfile(std::string* delfile) {
  if (delfile != nullptr) {
    
  } else {
    
  }
  delfile_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delfile,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.MoveFileInReq.delfile)
}
inline std::string* MoveFileInReq::unsafe_arena_release_delfile() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.MoveFileInReq.delfile)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return delfile_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MoveFileInReq::unsafe_arena_set_allocated_delfile(
    std::string* delfile) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (delfile != nullptr) {
    
  } else {
    
  }
  delfile_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      delfile, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.MoveFileInReq.delfile)
}

// bool bTopPath = 5;
inline void MoveFileInReq::clear_btoppath() {
  btoppath_ = false;
}
inline bool MoveFileInReq::_internal_btoppath() const {
  return btoppath_;
}
inline bool MoveFileInReq::btoppath() const {
  // @@protoc_insertion_point(field_get:InforGuard_.MoveFileInReq.bTopPath)
  return _internal_btoppath();
}
inline void MoveFileInReq::_internal_set_btoppath(bool value) {
  
  btoppath_ = value;
}
inline void MoveFileInReq::set_btoppath(bool value) {
  _internal_set_btoppath(value);
  // @@protoc_insertion_point(field_set:InforGuard_.MoveFileInReq.bTopPath)
}

// -------------------------------------------------------------------

// MoveFileInRes

// .InforGuard_.netCallData call = 1;
inline bool MoveFileInRes::_internal_has_call() const {
  return this != internal_default_instance() && call_ != nullptr;
}
inline bool MoveFileInRes::has_call() const {
  return _internal_has_call();
}
inline const ::InforGuard_::netCallData& MoveFileInRes::_internal_call() const {
  const ::InforGuard_::netCallData* p = call_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::netCallData*>(
      &::InforGuard_::_netCallData_default_instance_);
}
inline const ::InforGuard_::netCallData& MoveFileInRes::call() const {
  // @@protoc_insertion_point(field_get:InforGuard_.MoveFileInRes.call)
  return _internal_call();
}
inline void MoveFileInRes::unsafe_arena_set_allocated_call(
    ::InforGuard_::netCallData* call) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  call_ = call;
  if (call) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.MoveFileInRes.call)
}
inline ::InforGuard_::netCallData* MoveFileInRes::release_call() {
  auto temp = unsafe_arena_release_call();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::netCallData* MoveFileInRes::unsafe_arena_release_call() {
  // @@protoc_insertion_point(field_release:InforGuard_.MoveFileInRes.call)
  
  ::InforGuard_::netCallData* temp = call_;
  call_ = nullptr;
  return temp;
}
inline ::InforGuard_::netCallData* MoveFileInRes::_internal_mutable_call() {
  
  if (call_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::netCallData>(GetArena());
    call_ = p;
  }
  return call_;
}
inline ::InforGuard_::netCallData* MoveFileInRes::mutable_call() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.MoveFileInRes.call)
  return _internal_mutable_call();
}
inline void MoveFileInRes::set_allocated_call(::InforGuard_::netCallData* call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  if (call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call)->GetArena();
    if (message_arena != submessage_arena) {
      call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call, submessage_arena);
    }
    
  } else {
    
  }
  call_ = call;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.MoveFileInRes.call)
}

// .InforGuard_.ExceptionError ex = 2;
inline bool MoveFileInRes::_internal_has_ex() const {
  return this != internal_default_instance() && ex_ != nullptr;
}
inline bool MoveFileInRes::has_ex() const {
  return _internal_has_ex();
}
inline const ::InforGuard_::ExceptionError& MoveFileInRes::_internal_ex() const {
  const ::InforGuard_::ExceptionError* p = ex_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::ExceptionError*>(
      &::InforGuard_::_ExceptionError_default_instance_);
}
inline const ::InforGuard_::ExceptionError& MoveFileInRes::ex() const {
  // @@protoc_insertion_point(field_get:InforGuard_.MoveFileInRes.ex)
  return _internal_ex();
}
inline void MoveFileInRes::unsafe_arena_set_allocated_ex(
    ::InforGuard_::ExceptionError* ex) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  ex_ = ex;
  if (ex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.MoveFileInRes.ex)
}
inline ::InforGuard_::ExceptionError* MoveFileInRes::release_ex() {
  auto temp = unsafe_arena_release_ex();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::ExceptionError* MoveFileInRes::unsafe_arena_release_ex() {
  // @@protoc_insertion_point(field_release:InforGuard_.MoveFileInRes.ex)
  
  ::InforGuard_::ExceptionError* temp = ex_;
  ex_ = nullptr;
  return temp;
}
inline ::InforGuard_::ExceptionError* MoveFileInRes::_internal_mutable_ex() {
  
  if (ex_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::ExceptionError>(GetArena());
    ex_ = p;
  }
  return ex_;
}
inline ::InforGuard_::ExceptionError* MoveFileInRes::mutable_ex() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.MoveFileInRes.ex)
  return _internal_mutable_ex();
}
inline void MoveFileInRes::set_allocated_ex(::InforGuard_::ExceptionError* ex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  if (ex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex)->GetArena();
    if (message_arena != submessage_arena) {
      ex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ex, submessage_arena);
    }
    
  } else {
    
  }
  ex_ = ex;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.MoveFileInRes.ex)
}

// int32 ret = 3;
inline void MoveFileInRes::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MoveFileInRes::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MoveFileInRes::ret() const {
  // @@protoc_insertion_point(field_get:InforGuard_.MoveFileInRes.ret)
  return _internal_ret();
}
inline void MoveFileInRes::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void MoveFileInRes::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:InforGuard_.MoveFileInRes.ret)
}

// -------------------------------------------------------------------

// MoveFileOutReq

// .InforGuard_.netCallData call = 1;
inline bool MoveFileOutReq::_internal_has_call() const {
  return this != internal_default_instance() && call_ != nullptr;
}
inline bool MoveFileOutReq::has_call() const {
  return _internal_has_call();
}
inline const ::InforGuard_::netCallData& MoveFileOutReq::_internal_call() const {
  const ::InforGuard_::netCallData* p = call_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::netCallData*>(
      &::InforGuard_::_netCallData_default_instance_);
}
inline const ::InforGuard_::netCallData& MoveFileOutReq::call() const {
  // @@protoc_insertion_point(field_get:InforGuard_.MoveFileOutReq.call)
  return _internal_call();
}
inline void MoveFileOutReq::unsafe_arena_set_allocated_call(
    ::InforGuard_::netCallData* call) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  call_ = call;
  if (call) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.MoveFileOutReq.call)
}
inline ::InforGuard_::netCallData* MoveFileOutReq::release_call() {
  auto temp = unsafe_arena_release_call();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::netCallData* MoveFileOutReq::unsafe_arena_release_call() {
  // @@protoc_insertion_point(field_release:InforGuard_.MoveFileOutReq.call)
  
  ::InforGuard_::netCallData* temp = call_;
  call_ = nullptr;
  return temp;
}
inline ::InforGuard_::netCallData* MoveFileOutReq::_internal_mutable_call() {
  
  if (call_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::netCallData>(GetArena());
    call_ = p;
  }
  return call_;
}
inline ::InforGuard_::netCallData* MoveFileOutReq::mutable_call() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.MoveFileOutReq.call)
  return _internal_mutable_call();
}
inline void MoveFileOutReq::set_allocated_call(::InforGuard_::netCallData* call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  if (call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call)->GetArena();
    if (message_arena != submessage_arena) {
      call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call, submessage_arena);
    }
    
  } else {
    
  }
  call_ = call;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.MoveFileOutReq.call)
}

// bytes srcfile = 2;
inline void MoveFileOutReq::clear_srcfile() {
  srcfile_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MoveFileOutReq::srcfile() const {
  // @@protoc_insertion_point(field_get:InforGuard_.MoveFileOutReq.srcfile)
  return _internal_srcfile();
}
inline void MoveFileOutReq::set_srcfile(const std::string& value) {
  _internal_set_srcfile(value);
  // @@protoc_insertion_point(field_set:InforGuard_.MoveFileOutReq.srcfile)
}
inline std::string* MoveFileOutReq::mutable_srcfile() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.MoveFileOutReq.srcfile)
  return _internal_mutable_srcfile();
}
inline const std::string& MoveFileOutReq::_internal_srcfile() const {
  return srcfile_.Get();
}
inline void MoveFileOutReq::_internal_set_srcfile(const std::string& value) {
  
  srcfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MoveFileOutReq::set_srcfile(std::string&& value) {
  
  srcfile_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.MoveFileOutReq.srcfile)
}
inline void MoveFileOutReq::set_srcfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  srcfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.MoveFileOutReq.srcfile)
}
inline void MoveFileOutReq::set_srcfile(const void* value,
    size_t size) {
  
  srcfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.MoveFileOutReq.srcfile)
}
inline std::string* MoveFileOutReq::_internal_mutable_srcfile() {
  
  return srcfile_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MoveFileOutReq::release_srcfile() {
  // @@protoc_insertion_point(field_release:InforGuard_.MoveFileOutReq.srcfile)
  return srcfile_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MoveFileOutReq::set_allocated_srcfile(std::string* srcfile) {
  if (srcfile != nullptr) {
    
  } else {
    
  }
  srcfile_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), srcfile,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.MoveFileOutReq.srcfile)
}
inline std::string* MoveFileOutReq::unsafe_arena_release_srcfile() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.MoveFileOutReq.srcfile)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return srcfile_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MoveFileOutReq::unsafe_arena_set_allocated_srcfile(
    std::string* srcfile) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (srcfile != nullptr) {
    
  } else {
    
  }
  srcfile_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      srcfile, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.MoveFileOutReq.srcfile)
}

// bytes dstfile = 3;
inline void MoveFileOutReq::clear_dstfile() {
  dstfile_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MoveFileOutReq::dstfile() const {
  // @@protoc_insertion_point(field_get:InforGuard_.MoveFileOutReq.dstfile)
  return _internal_dstfile();
}
inline void MoveFileOutReq::set_dstfile(const std::string& value) {
  _internal_set_dstfile(value);
  // @@protoc_insertion_point(field_set:InforGuard_.MoveFileOutReq.dstfile)
}
inline std::string* MoveFileOutReq::mutable_dstfile() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.MoveFileOutReq.dstfile)
  return _internal_mutable_dstfile();
}
inline const std::string& MoveFileOutReq::_internal_dstfile() const {
  return dstfile_.Get();
}
inline void MoveFileOutReq::_internal_set_dstfile(const std::string& value) {
  
  dstfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MoveFileOutReq::set_dstfile(std::string&& value) {
  
  dstfile_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.MoveFileOutReq.dstfile)
}
inline void MoveFileOutReq::set_dstfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dstfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.MoveFileOutReq.dstfile)
}
inline void MoveFileOutReq::set_dstfile(const void* value,
    size_t size) {
  
  dstfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.MoveFileOutReq.dstfile)
}
inline std::string* MoveFileOutReq::_internal_mutable_dstfile() {
  
  return dstfile_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MoveFileOutReq::release_dstfile() {
  // @@protoc_insertion_point(field_release:InforGuard_.MoveFileOutReq.dstfile)
  return dstfile_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MoveFileOutReq::set_allocated_dstfile(std::string* dstfile) {
  if (dstfile != nullptr) {
    
  } else {
    
  }
  dstfile_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dstfile,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.MoveFileOutReq.dstfile)
}
inline std::string* MoveFileOutReq::unsafe_arena_release_dstfile() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.MoveFileOutReq.dstfile)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dstfile_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MoveFileOutReq::unsafe_arena_set_allocated_dstfile(
    std::string* dstfile) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dstfile != nullptr) {
    
  } else {
    
  }
  dstfile_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dstfile, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.MoveFileOutReq.dstfile)
}

// -------------------------------------------------------------------

// MoveFileOutRes

// .InforGuard_.netCallData call = 1;
inline bool MoveFileOutRes::_internal_has_call() const {
  return this != internal_default_instance() && call_ != nullptr;
}
inline bool MoveFileOutRes::has_call() const {
  return _internal_has_call();
}
inline const ::InforGuard_::netCallData& MoveFileOutRes::_internal_call() const {
  const ::InforGuard_::netCallData* p = call_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::netCallData*>(
      &::InforGuard_::_netCallData_default_instance_);
}
inline const ::InforGuard_::netCallData& MoveFileOutRes::call() const {
  // @@protoc_insertion_point(field_get:InforGuard_.MoveFileOutRes.call)
  return _internal_call();
}
inline void MoveFileOutRes::unsafe_arena_set_allocated_call(
    ::InforGuard_::netCallData* call) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  call_ = call;
  if (call) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.MoveFileOutRes.call)
}
inline ::InforGuard_::netCallData* MoveFileOutRes::release_call() {
  auto temp = unsafe_arena_release_call();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::netCallData* MoveFileOutRes::unsafe_arena_release_call() {
  // @@protoc_insertion_point(field_release:InforGuard_.MoveFileOutRes.call)
  
  ::InforGuard_::netCallData* temp = call_;
  call_ = nullptr;
  return temp;
}
inline ::InforGuard_::netCallData* MoveFileOutRes::_internal_mutable_call() {
  
  if (call_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::netCallData>(GetArena());
    call_ = p;
  }
  return call_;
}
inline ::InforGuard_::netCallData* MoveFileOutRes::mutable_call() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.MoveFileOutRes.call)
  return _internal_mutable_call();
}
inline void MoveFileOutRes::set_allocated_call(::InforGuard_::netCallData* call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  if (call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call)->GetArena();
    if (message_arena != submessage_arena) {
      call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call, submessage_arena);
    }
    
  } else {
    
  }
  call_ = call;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.MoveFileOutRes.call)
}

// .InforGuard_.ExceptionError ex = 2;
inline bool MoveFileOutRes::_internal_has_ex() const {
  return this != internal_default_instance() && ex_ != nullptr;
}
inline bool MoveFileOutRes::has_ex() const {
  return _internal_has_ex();
}
inline const ::InforGuard_::ExceptionError& MoveFileOutRes::_internal_ex() const {
  const ::InforGuard_::ExceptionError* p = ex_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::ExceptionError*>(
      &::InforGuard_::_ExceptionError_default_instance_);
}
inline const ::InforGuard_::ExceptionError& MoveFileOutRes::ex() const {
  // @@protoc_insertion_point(field_get:InforGuard_.MoveFileOutRes.ex)
  return _internal_ex();
}
inline void MoveFileOutRes::unsafe_arena_set_allocated_ex(
    ::InforGuard_::ExceptionError* ex) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  ex_ = ex;
  if (ex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.MoveFileOutRes.ex)
}
inline ::InforGuard_::ExceptionError* MoveFileOutRes::release_ex() {
  auto temp = unsafe_arena_release_ex();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::ExceptionError* MoveFileOutRes::unsafe_arena_release_ex() {
  // @@protoc_insertion_point(field_release:InforGuard_.MoveFileOutRes.ex)
  
  ::InforGuard_::ExceptionError* temp = ex_;
  ex_ = nullptr;
  return temp;
}
inline ::InforGuard_::ExceptionError* MoveFileOutRes::_internal_mutable_ex() {
  
  if (ex_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::ExceptionError>(GetArena());
    ex_ = p;
  }
  return ex_;
}
inline ::InforGuard_::ExceptionError* MoveFileOutRes::mutable_ex() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.MoveFileOutRes.ex)
  return _internal_mutable_ex();
}
inline void MoveFileOutRes::set_allocated_ex(::InforGuard_::ExceptionError* ex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  if (ex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex)->GetArena();
    if (message_arena != submessage_arena) {
      ex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ex, submessage_arena);
    }
    
  } else {
    
  }
  ex_ = ex;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.MoveFileOutRes.ex)
}

// int32 ret = 3;
inline void MoveFileOutRes::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MoveFileOutRes::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MoveFileOutRes::ret() const {
  // @@protoc_insertion_point(field_get:InforGuard_.MoveFileOutRes.ret)
  return _internal_ret();
}
inline void MoveFileOutRes::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void MoveFileOutRes::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:InforGuard_.MoveFileOutRes.ret)
}

// -------------------------------------------------------------------

// RenameFileReq

// .InforGuard_.netCallData call = 1;
inline bool RenameFileReq::_internal_has_call() const {
  return this != internal_default_instance() && call_ != nullptr;
}
inline bool RenameFileReq::has_call() const {
  return _internal_has_call();
}
inline const ::InforGuard_::netCallData& RenameFileReq::_internal_call() const {
  const ::InforGuard_::netCallData* p = call_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::netCallData*>(
      &::InforGuard_::_netCallData_default_instance_);
}
inline const ::InforGuard_::netCallData& RenameFileReq::call() const {
  // @@protoc_insertion_point(field_get:InforGuard_.RenameFileReq.call)
  return _internal_call();
}
inline void RenameFileReq::unsafe_arena_set_allocated_call(
    ::InforGuard_::netCallData* call) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  call_ = call;
  if (call) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.RenameFileReq.call)
}
inline ::InforGuard_::netCallData* RenameFileReq::release_call() {
  auto temp = unsafe_arena_release_call();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::netCallData* RenameFileReq::unsafe_arena_release_call() {
  // @@protoc_insertion_point(field_release:InforGuard_.RenameFileReq.call)
  
  ::InforGuard_::netCallData* temp = call_;
  call_ = nullptr;
  return temp;
}
inline ::InforGuard_::netCallData* RenameFileReq::_internal_mutable_call() {
  
  if (call_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::netCallData>(GetArena());
    call_ = p;
  }
  return call_;
}
inline ::InforGuard_::netCallData* RenameFileReq::mutable_call() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.RenameFileReq.call)
  return _internal_mutable_call();
}
inline void RenameFileReq::set_allocated_call(::InforGuard_::netCallData* call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  if (call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call)->GetArena();
    if (message_arena != submessage_arena) {
      call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call, submessage_arena);
    }
    
  } else {
    
  }
  call_ = call;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.RenameFileReq.call)
}

// bytes oldfile = 2;
inline void RenameFileReq::clear_oldfile() {
  oldfile_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RenameFileReq::oldfile() const {
  // @@protoc_insertion_point(field_get:InforGuard_.RenameFileReq.oldfile)
  return _internal_oldfile();
}
inline void RenameFileReq::set_oldfile(const std::string& value) {
  _internal_set_oldfile(value);
  // @@protoc_insertion_point(field_set:InforGuard_.RenameFileReq.oldfile)
}
inline std::string* RenameFileReq::mutable_oldfile() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.RenameFileReq.oldfile)
  return _internal_mutable_oldfile();
}
inline const std::string& RenameFileReq::_internal_oldfile() const {
  return oldfile_.Get();
}
inline void RenameFileReq::_internal_set_oldfile(const std::string& value) {
  
  oldfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RenameFileReq::set_oldfile(std::string&& value) {
  
  oldfile_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.RenameFileReq.oldfile)
}
inline void RenameFileReq::set_oldfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  oldfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.RenameFileReq.oldfile)
}
inline void RenameFileReq::set_oldfile(const void* value,
    size_t size) {
  
  oldfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.RenameFileReq.oldfile)
}
inline std::string* RenameFileReq::_internal_mutable_oldfile() {
  
  return oldfile_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RenameFileReq::release_oldfile() {
  // @@protoc_insertion_point(field_release:InforGuard_.RenameFileReq.oldfile)
  return oldfile_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RenameFileReq::set_allocated_oldfile(std::string* oldfile) {
  if (oldfile != nullptr) {
    
  } else {
    
  }
  oldfile_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oldfile,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.RenameFileReq.oldfile)
}
inline std::string* RenameFileReq::unsafe_arena_release_oldfile() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.RenameFileReq.oldfile)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return oldfile_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RenameFileReq::unsafe_arena_set_allocated_oldfile(
    std::string* oldfile) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (oldfile != nullptr) {
    
  } else {
    
  }
  oldfile_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      oldfile, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.RenameFileReq.oldfile)
}

// bytes newfile = 3;
inline void RenameFileReq::clear_newfile() {
  newfile_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RenameFileReq::newfile() const {
  // @@protoc_insertion_point(field_get:InforGuard_.RenameFileReq.newfile)
  return _internal_newfile();
}
inline void RenameFileReq::set_newfile(const std::string& value) {
  _internal_set_newfile(value);
  // @@protoc_insertion_point(field_set:InforGuard_.RenameFileReq.newfile)
}
inline std::string* RenameFileReq::mutable_newfile() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.RenameFileReq.newfile)
  return _internal_mutable_newfile();
}
inline const std::string& RenameFileReq::_internal_newfile() const {
  return newfile_.Get();
}
inline void RenameFileReq::_internal_set_newfile(const std::string& value) {
  
  newfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RenameFileReq::set_newfile(std::string&& value) {
  
  newfile_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.RenameFileReq.newfile)
}
inline void RenameFileReq::set_newfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  newfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.RenameFileReq.newfile)
}
inline void RenameFileReq::set_newfile(const void* value,
    size_t size) {
  
  newfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.RenameFileReq.newfile)
}
inline std::string* RenameFileReq::_internal_mutable_newfile() {
  
  return newfile_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RenameFileReq::release_newfile() {
  // @@protoc_insertion_point(field_release:InforGuard_.RenameFileReq.newfile)
  return newfile_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RenameFileReq::set_allocated_newfile(std::string* newfile) {
  if (newfile != nullptr) {
    
  } else {
    
  }
  newfile_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), newfile,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.RenameFileReq.newfile)
}
inline std::string* RenameFileReq::unsafe_arena_release_newfile() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.RenameFileReq.newfile)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return newfile_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RenameFileReq::unsafe_arena_set_allocated_newfile(
    std::string* newfile) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (newfile != nullptr) {
    
  } else {
    
  }
  newfile_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      newfile, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.RenameFileReq.newfile)
}

// int32 attr = 4;
inline void RenameFileReq::clear_attr() {
  attr_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RenameFileReq::_internal_attr() const {
  return attr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RenameFileReq::attr() const {
  // @@protoc_insertion_point(field_get:InforGuard_.RenameFileReq.attr)
  return _internal_attr();
}
inline void RenameFileReq::_internal_set_attr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  attr_ = value;
}
inline void RenameFileReq::set_attr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_attr(value);
  // @@protoc_insertion_point(field_set:InforGuard_.RenameFileReq.attr)
}

// -------------------------------------------------------------------

// RenameFileRes

// .InforGuard_.netCallData call = 1;
inline bool RenameFileRes::_internal_has_call() const {
  return this != internal_default_instance() && call_ != nullptr;
}
inline bool RenameFileRes::has_call() const {
  return _internal_has_call();
}
inline const ::InforGuard_::netCallData& RenameFileRes::_internal_call() const {
  const ::InforGuard_::netCallData* p = call_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::netCallData*>(
      &::InforGuard_::_netCallData_default_instance_);
}
inline const ::InforGuard_::netCallData& RenameFileRes::call() const {
  // @@protoc_insertion_point(field_get:InforGuard_.RenameFileRes.call)
  return _internal_call();
}
inline void RenameFileRes::unsafe_arena_set_allocated_call(
    ::InforGuard_::netCallData* call) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  call_ = call;
  if (call) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.RenameFileRes.call)
}
inline ::InforGuard_::netCallData* RenameFileRes::release_call() {
  auto temp = unsafe_arena_release_call();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::netCallData* RenameFileRes::unsafe_arena_release_call() {
  // @@protoc_insertion_point(field_release:InforGuard_.RenameFileRes.call)
  
  ::InforGuard_::netCallData* temp = call_;
  call_ = nullptr;
  return temp;
}
inline ::InforGuard_::netCallData* RenameFileRes::_internal_mutable_call() {
  
  if (call_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::netCallData>(GetArena());
    call_ = p;
  }
  return call_;
}
inline ::InforGuard_::netCallData* RenameFileRes::mutable_call() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.RenameFileRes.call)
  return _internal_mutable_call();
}
inline void RenameFileRes::set_allocated_call(::InforGuard_::netCallData* call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  if (call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call)->GetArena();
    if (message_arena != submessage_arena) {
      call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call, submessage_arena);
    }
    
  } else {
    
  }
  call_ = call;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.RenameFileRes.call)
}

// .InforGuard_.ExceptionError ex = 2;
inline bool RenameFileRes::_internal_has_ex() const {
  return this != internal_default_instance() && ex_ != nullptr;
}
inline bool RenameFileRes::has_ex() const {
  return _internal_has_ex();
}
inline const ::InforGuard_::ExceptionError& RenameFileRes::_internal_ex() const {
  const ::InforGuard_::ExceptionError* p = ex_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::ExceptionError*>(
      &::InforGuard_::_ExceptionError_default_instance_);
}
inline const ::InforGuard_::ExceptionError& RenameFileRes::ex() const {
  // @@protoc_insertion_point(field_get:InforGuard_.RenameFileRes.ex)
  return _internal_ex();
}
inline void RenameFileRes::unsafe_arena_set_allocated_ex(
    ::InforGuard_::ExceptionError* ex) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  ex_ = ex;
  if (ex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.RenameFileRes.ex)
}
inline ::InforGuard_::ExceptionError* RenameFileRes::release_ex() {
  auto temp = unsafe_arena_release_ex();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::ExceptionError* RenameFileRes::unsafe_arena_release_ex() {
  // @@protoc_insertion_point(field_release:InforGuard_.RenameFileRes.ex)
  
  ::InforGuard_::ExceptionError* temp = ex_;
  ex_ = nullptr;
  return temp;
}
inline ::InforGuard_::ExceptionError* RenameFileRes::_internal_mutable_ex() {
  
  if (ex_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::ExceptionError>(GetArena());
    ex_ = p;
  }
  return ex_;
}
inline ::InforGuard_::ExceptionError* RenameFileRes::mutable_ex() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.RenameFileRes.ex)
  return _internal_mutable_ex();
}
inline void RenameFileRes::set_allocated_ex(::InforGuard_::ExceptionError* ex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  if (ex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex)->GetArena();
    if (message_arena != submessage_arena) {
      ex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ex, submessage_arena);
    }
    
  } else {
    
  }
  ex_ = ex;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.RenameFileRes.ex)
}

// int32 ret = 3;
inline void RenameFileRes::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RenameFileRes::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RenameFileRes::ret() const {
  // @@protoc_insertion_point(field_get:InforGuard_.RenameFileRes.ret)
  return _internal_ret();
}
inline void RenameFileRes::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void RenameFileRes::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:InforGuard_.RenameFileRes.ret)
}

// -------------------------------------------------------------------

// QueryBasePathReq

// bool req = 1;
inline void QueryBasePathReq::clear_req() {
  req_ = false;
}
inline bool QueryBasePathReq::_internal_req() const {
  return req_;
}
inline bool QueryBasePathReq::req() const {
  // @@protoc_insertion_point(field_get:InforGuard_.QueryBasePathReq.req)
  return _internal_req();
}
inline void QueryBasePathReq::_internal_set_req(bool value) {
  
  req_ = value;
}
inline void QueryBasePathReq::set_req(bool value) {
  _internal_set_req(value);
  // @@protoc_insertion_point(field_set:InforGuard_.QueryBasePathReq.req)
}

// -------------------------------------------------------------------

// QueryBasePathRes

// .InforGuard_.ExceptionError ex = 1;
inline bool QueryBasePathRes::_internal_has_ex() const {
  return this != internal_default_instance() && ex_ != nullptr;
}
inline bool QueryBasePathRes::has_ex() const {
  return _internal_has_ex();
}
inline const ::InforGuard_::ExceptionError& QueryBasePathRes::_internal_ex() const {
  const ::InforGuard_::ExceptionError* p = ex_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::ExceptionError*>(
      &::InforGuard_::_ExceptionError_default_instance_);
}
inline const ::InforGuard_::ExceptionError& QueryBasePathRes::ex() const {
  // @@protoc_insertion_point(field_get:InforGuard_.QueryBasePathRes.ex)
  return _internal_ex();
}
inline void QueryBasePathRes::unsafe_arena_set_allocated_ex(
    ::InforGuard_::ExceptionError* ex) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  ex_ = ex;
  if (ex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.QueryBasePathRes.ex)
}
inline ::InforGuard_::ExceptionError* QueryBasePathRes::release_ex() {
  auto temp = unsafe_arena_release_ex();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::ExceptionError* QueryBasePathRes::unsafe_arena_release_ex() {
  // @@protoc_insertion_point(field_release:InforGuard_.QueryBasePathRes.ex)
  
  ::InforGuard_::ExceptionError* temp = ex_;
  ex_ = nullptr;
  return temp;
}
inline ::InforGuard_::ExceptionError* QueryBasePathRes::_internal_mutable_ex() {
  
  if (ex_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::ExceptionError>(GetArena());
    ex_ = p;
  }
  return ex_;
}
inline ::InforGuard_::ExceptionError* QueryBasePathRes::mutable_ex() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.QueryBasePathRes.ex)
  return _internal_mutable_ex();
}
inline void QueryBasePathRes::set_allocated_ex(::InforGuard_::ExceptionError* ex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  if (ex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex)->GetArena();
    if (message_arena != submessage_arena) {
      ex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ex, submessage_arena);
    }
    
  } else {
    
  }
  ex_ = ex;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.QueryBasePathRes.ex)
}

// bytes basepath = 2;
inline void QueryBasePathRes::clear_basepath() {
  basepath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QueryBasePathRes::basepath() const {
  // @@protoc_insertion_point(field_get:InforGuard_.QueryBasePathRes.basepath)
  return _internal_basepath();
}
inline void QueryBasePathRes::set_basepath(const std::string& value) {
  _internal_set_basepath(value);
  // @@protoc_insertion_point(field_set:InforGuard_.QueryBasePathRes.basepath)
}
inline std::string* QueryBasePathRes::mutable_basepath() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.QueryBasePathRes.basepath)
  return _internal_mutable_basepath();
}
inline const std::string& QueryBasePathRes::_internal_basepath() const {
  return basepath_.Get();
}
inline void QueryBasePathRes::_internal_set_basepath(const std::string& value) {
  
  basepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QueryBasePathRes::set_basepath(std::string&& value) {
  
  basepath_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.QueryBasePathRes.basepath)
}
inline void QueryBasePathRes::set_basepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  basepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.QueryBasePathRes.basepath)
}
inline void QueryBasePathRes::set_basepath(const void* value,
    size_t size) {
  
  basepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.QueryBasePathRes.basepath)
}
inline std::string* QueryBasePathRes::_internal_mutable_basepath() {
  
  return basepath_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QueryBasePathRes::release_basepath() {
  // @@protoc_insertion_point(field_release:InforGuard_.QueryBasePathRes.basepath)
  return basepath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueryBasePathRes::set_allocated_basepath(std::string* basepath) {
  if (basepath != nullptr) {
    
  } else {
    
  }
  basepath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), basepath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.QueryBasePathRes.basepath)
}
inline std::string* QueryBasePathRes::unsafe_arena_release_basepath() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.QueryBasePathRes.basepath)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return basepath_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QueryBasePathRes::unsafe_arena_set_allocated_basepath(
    std::string* basepath) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (basepath != nullptr) {
    
  } else {
    
  }
  basepath_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      basepath, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.QueryBasePathRes.basepath)
}

// int32 ret = 3;
inline void QueryBasePathRes::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryBasePathRes::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryBasePathRes::ret() const {
  // @@protoc_insertion_point(field_get:InforGuard_.QueryBasePathRes.ret)
  return _internal_ret();
}
inline void QueryBasePathRes::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void QueryBasePathRes::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:InforGuard_.QueryBasePathRes.ret)
}

// -------------------------------------------------------------------

// isFileExistReq

// bytes filePath = 1;
inline void isFileExistReq::clear_filepath() {
  filepath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& isFileExistReq::filepath() const {
  // @@protoc_insertion_point(field_get:InforGuard_.isFileExistReq.filePath)
  return _internal_filepath();
}
inline void isFileExistReq::set_filepath(const std::string& value) {
  _internal_set_filepath(value);
  // @@protoc_insertion_point(field_set:InforGuard_.isFileExistReq.filePath)
}
inline std::string* isFileExistReq::mutable_filepath() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.isFileExistReq.filePath)
  return _internal_mutable_filepath();
}
inline const std::string& isFileExistReq::_internal_filepath() const {
  return filepath_.Get();
}
inline void isFileExistReq::_internal_set_filepath(const std::string& value) {
  
  filepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void isFileExistReq::set_filepath(std::string&& value) {
  
  filepath_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.isFileExistReq.filePath)
}
inline void isFileExistReq::set_filepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.isFileExistReq.filePath)
}
inline void isFileExistReq::set_filepath(const void* value,
    size_t size) {
  
  filepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.isFileExistReq.filePath)
}
inline std::string* isFileExistReq::_internal_mutable_filepath() {
  
  return filepath_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* isFileExistReq::release_filepath() {
  // @@protoc_insertion_point(field_release:InforGuard_.isFileExistReq.filePath)
  return filepath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void isFileExistReq::set_allocated_filepath(std::string* filepath) {
  if (filepath != nullptr) {
    
  } else {
    
  }
  filepath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filepath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.isFileExistReq.filePath)
}
inline std::string* isFileExistReq::unsafe_arena_release_filepath() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.isFileExistReq.filePath)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return filepath_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void isFileExistReq::unsafe_arena_set_allocated_filepath(
    std::string* filepath) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (filepath != nullptr) {
    
  } else {
    
  }
  filepath_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      filepath, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.isFileExistReq.filePath)
}

// -------------------------------------------------------------------

// isFileExistRes

// .InforGuard_.ExceptionError ex = 1;
inline bool isFileExistRes::_internal_has_ex() const {
  return this != internal_default_instance() && ex_ != nullptr;
}
inline bool isFileExistRes::has_ex() const {
  return _internal_has_ex();
}
inline const ::InforGuard_::ExceptionError& isFileExistRes::_internal_ex() const {
  const ::InforGuard_::ExceptionError* p = ex_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::ExceptionError*>(
      &::InforGuard_::_ExceptionError_default_instance_);
}
inline const ::InforGuard_::ExceptionError& isFileExistRes::ex() const {
  // @@protoc_insertion_point(field_get:InforGuard_.isFileExistRes.ex)
  return _internal_ex();
}
inline void isFileExistRes::unsafe_arena_set_allocated_ex(
    ::InforGuard_::ExceptionError* ex) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  ex_ = ex;
  if (ex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.isFileExistRes.ex)
}
inline ::InforGuard_::ExceptionError* isFileExistRes::release_ex() {
  auto temp = unsafe_arena_release_ex();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::ExceptionError* isFileExistRes::unsafe_arena_release_ex() {
  // @@protoc_insertion_point(field_release:InforGuard_.isFileExistRes.ex)
  
  ::InforGuard_::ExceptionError* temp = ex_;
  ex_ = nullptr;
  return temp;
}
inline ::InforGuard_::ExceptionError* isFileExistRes::_internal_mutable_ex() {
  
  if (ex_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::ExceptionError>(GetArena());
    ex_ = p;
  }
  return ex_;
}
inline ::InforGuard_::ExceptionError* isFileExistRes::mutable_ex() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.isFileExistRes.ex)
  return _internal_mutable_ex();
}
inline void isFileExistRes::set_allocated_ex(::InforGuard_::ExceptionError* ex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  if (ex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex)->GetArena();
    if (message_arena != submessage_arena) {
      ex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ex, submessage_arena);
    }
    
  } else {
    
  }
  ex_ = ex;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.isFileExistRes.ex)
}

// int32 fileSize = 2;
inline void isFileExistRes::clear_filesize() {
  filesize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 isFileExistRes::_internal_filesize() const {
  return filesize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 isFileExistRes::filesize() const {
  // @@protoc_insertion_point(field_get:InforGuard_.isFileExistRes.fileSize)
  return _internal_filesize();
}
inline void isFileExistRes::_internal_set_filesize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  filesize_ = value;
}
inline void isFileExistRes::set_filesize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_filesize(value);
  // @@protoc_insertion_point(field_set:InforGuard_.isFileExistRes.fileSize)
}

// int32 ret = 3;
inline void isFileExistRes::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 isFileExistRes::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 isFileExistRes::ret() const {
  // @@protoc_insertion_point(field_get:InforGuard_.isFileExistRes.ret)
  return _internal_ret();
}
inline void isFileExistRes::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void isFileExistRes::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:InforGuard_.isFileExistRes.ret)
}

// -------------------------------------------------------------------

// setFileTimeReq

// .InforGuard_.netCallData call = 1;
inline bool setFileTimeReq::_internal_has_call() const {
  return this != internal_default_instance() && call_ != nullptr;
}
inline bool setFileTimeReq::has_call() const {
  return _internal_has_call();
}
inline const ::InforGuard_::netCallData& setFileTimeReq::_internal_call() const {
  const ::InforGuard_::netCallData* p = call_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::netCallData*>(
      &::InforGuard_::_netCallData_default_instance_);
}
inline const ::InforGuard_::netCallData& setFileTimeReq::call() const {
  // @@protoc_insertion_point(field_get:InforGuard_.setFileTimeReq.call)
  return _internal_call();
}
inline void setFileTimeReq::unsafe_arena_set_allocated_call(
    ::InforGuard_::netCallData* call) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  call_ = call;
  if (call) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.setFileTimeReq.call)
}
inline ::InforGuard_::netCallData* setFileTimeReq::release_call() {
  auto temp = unsafe_arena_release_call();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::netCallData* setFileTimeReq::unsafe_arena_release_call() {
  // @@protoc_insertion_point(field_release:InforGuard_.setFileTimeReq.call)
  
  ::InforGuard_::netCallData* temp = call_;
  call_ = nullptr;
  return temp;
}
inline ::InforGuard_::netCallData* setFileTimeReq::_internal_mutable_call() {
  
  if (call_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::netCallData>(GetArena());
    call_ = p;
  }
  return call_;
}
inline ::InforGuard_::netCallData* setFileTimeReq::mutable_call() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.setFileTimeReq.call)
  return _internal_mutable_call();
}
inline void setFileTimeReq::set_allocated_call(::InforGuard_::netCallData* call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  if (call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call)->GetArena();
    if (message_arena != submessage_arena) {
      call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call, submessage_arena);
    }
    
  } else {
    
  }
  call_ = call;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.setFileTimeReq.call)
}

// bytes filename = 2;
inline void setFileTimeReq::clear_filename() {
  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& setFileTimeReq::filename() const {
  // @@protoc_insertion_point(field_get:InforGuard_.setFileTimeReq.filename)
  return _internal_filename();
}
inline void setFileTimeReq::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:InforGuard_.setFileTimeReq.filename)
}
inline std::string* setFileTimeReq::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.setFileTimeReq.filename)
  return _internal_mutable_filename();
}
inline const std::string& setFileTimeReq::_internal_filename() const {
  return filename_.Get();
}
inline void setFileTimeReq::_internal_set_filename(const std::string& value) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void setFileTimeReq::set_filename(std::string&& value) {
  
  filename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.setFileTimeReq.filename)
}
inline void setFileTimeReq::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.setFileTimeReq.filename)
}
inline void setFileTimeReq::set_filename(const void* value,
    size_t size) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.setFileTimeReq.filename)
}
inline std::string* setFileTimeReq::_internal_mutable_filename() {
  
  return filename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* setFileTimeReq::release_filename() {
  // @@protoc_insertion_point(field_release:InforGuard_.setFileTimeReq.filename)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void setFileTimeReq::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.setFileTimeReq.filename)
}
inline std::string* setFileTimeReq::unsafe_arena_release_filename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.setFileTimeReq.filename)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return filename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void setFileTimeReq::unsafe_arena_set_allocated_filename(
    std::string* filename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      filename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.setFileTimeReq.filename)
}

// int32 mtime = 3;
inline void setFileTimeReq::clear_mtime() {
  mtime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setFileTimeReq::_internal_mtime() const {
  return mtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setFileTimeReq::mtime() const {
  // @@protoc_insertion_point(field_get:InforGuard_.setFileTimeReq.mtime)
  return _internal_mtime();
}
inline void setFileTimeReq::_internal_set_mtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mtime_ = value;
}
inline void setFileTimeReq::set_mtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mtime(value);
  // @@protoc_insertion_point(field_set:InforGuard_.setFileTimeReq.mtime)
}

// -------------------------------------------------------------------

// setFileTimeRes

// .InforGuard_.netCallData call = 1;
inline bool setFileTimeRes::_internal_has_call() const {
  return this != internal_default_instance() && call_ != nullptr;
}
inline bool setFileTimeRes::has_call() const {
  return _internal_has_call();
}
inline const ::InforGuard_::netCallData& setFileTimeRes::_internal_call() const {
  const ::InforGuard_::netCallData* p = call_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::netCallData*>(
      &::InforGuard_::_netCallData_default_instance_);
}
inline const ::InforGuard_::netCallData& setFileTimeRes::call() const {
  // @@protoc_insertion_point(field_get:InforGuard_.setFileTimeRes.call)
  return _internal_call();
}
inline void setFileTimeRes::unsafe_arena_set_allocated_call(
    ::InforGuard_::netCallData* call) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  call_ = call;
  if (call) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.setFileTimeRes.call)
}
inline ::InforGuard_::netCallData* setFileTimeRes::release_call() {
  auto temp = unsafe_arena_release_call();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::netCallData* setFileTimeRes::unsafe_arena_release_call() {
  // @@protoc_insertion_point(field_release:InforGuard_.setFileTimeRes.call)
  
  ::InforGuard_::netCallData* temp = call_;
  call_ = nullptr;
  return temp;
}
inline ::InforGuard_::netCallData* setFileTimeRes::_internal_mutable_call() {
  
  if (call_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::netCallData>(GetArena());
    call_ = p;
  }
  return call_;
}
inline ::InforGuard_::netCallData* setFileTimeRes::mutable_call() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.setFileTimeRes.call)
  return _internal_mutable_call();
}
inline void setFileTimeRes::set_allocated_call(::InforGuard_::netCallData* call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  if (call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call)->GetArena();
    if (message_arena != submessage_arena) {
      call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call, submessage_arena);
    }
    
  } else {
    
  }
  call_ = call;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.setFileTimeRes.call)
}

// .InforGuard_.ExceptionError ex = 2;
inline bool setFileTimeRes::_internal_has_ex() const {
  return this != internal_default_instance() && ex_ != nullptr;
}
inline bool setFileTimeRes::has_ex() const {
  return _internal_has_ex();
}
inline const ::InforGuard_::ExceptionError& setFileTimeRes::_internal_ex() const {
  const ::InforGuard_::ExceptionError* p = ex_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::ExceptionError*>(
      &::InforGuard_::_ExceptionError_default_instance_);
}
inline const ::InforGuard_::ExceptionError& setFileTimeRes::ex() const {
  // @@protoc_insertion_point(field_get:InforGuard_.setFileTimeRes.ex)
  return _internal_ex();
}
inline void setFileTimeRes::unsafe_arena_set_allocated_ex(
    ::InforGuard_::ExceptionError* ex) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  ex_ = ex;
  if (ex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.setFileTimeRes.ex)
}
inline ::InforGuard_::ExceptionError* setFileTimeRes::release_ex() {
  auto temp = unsafe_arena_release_ex();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::ExceptionError* setFileTimeRes::unsafe_arena_release_ex() {
  // @@protoc_insertion_point(field_release:InforGuard_.setFileTimeRes.ex)
  
  ::InforGuard_::ExceptionError* temp = ex_;
  ex_ = nullptr;
  return temp;
}
inline ::InforGuard_::ExceptionError* setFileTimeRes::_internal_mutable_ex() {
  
  if (ex_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::ExceptionError>(GetArena());
    ex_ = p;
  }
  return ex_;
}
inline ::InforGuard_::ExceptionError* setFileTimeRes::mutable_ex() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.setFileTimeRes.ex)
  return _internal_mutable_ex();
}
inline void setFileTimeRes::set_allocated_ex(::InforGuard_::ExceptionError* ex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  if (ex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex)->GetArena();
    if (message_arena != submessage_arena) {
      ex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ex, submessage_arena);
    }
    
  } else {
    
  }
  ex_ = ex;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.setFileTimeRes.ex)
}

// int32 ret = 3;
inline void setFileTimeRes::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setFileTimeRes::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setFileTimeRes::ret() const {
  // @@protoc_insertion_point(field_get:InforGuard_.setFileTimeRes.ret)
  return _internal_ret();
}
inline void setFileTimeRes::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void setFileTimeRes::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:InforGuard_.setFileTimeRes.ret)
}

// -------------------------------------------------------------------

// getFileTimeReq

// .InforGuard_.netCallData call = 1;
inline bool getFileTimeReq::_internal_has_call() const {
  return this != internal_default_instance() && call_ != nullptr;
}
inline bool getFileTimeReq::has_call() const {
  return _internal_has_call();
}
inline const ::InforGuard_::netCallData& getFileTimeReq::_internal_call() const {
  const ::InforGuard_::netCallData* p = call_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::netCallData*>(
      &::InforGuard_::_netCallData_default_instance_);
}
inline const ::InforGuard_::netCallData& getFileTimeReq::call() const {
  // @@protoc_insertion_point(field_get:InforGuard_.getFileTimeReq.call)
  return _internal_call();
}
inline void getFileTimeReq::unsafe_arena_set_allocated_call(
    ::InforGuard_::netCallData* call) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  call_ = call;
  if (call) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.getFileTimeReq.call)
}
inline ::InforGuard_::netCallData* getFileTimeReq::release_call() {
  auto temp = unsafe_arena_release_call();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::netCallData* getFileTimeReq::unsafe_arena_release_call() {
  // @@protoc_insertion_point(field_release:InforGuard_.getFileTimeReq.call)
  
  ::InforGuard_::netCallData* temp = call_;
  call_ = nullptr;
  return temp;
}
inline ::InforGuard_::netCallData* getFileTimeReq::_internal_mutable_call() {
  
  if (call_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::netCallData>(GetArena());
    call_ = p;
  }
  return call_;
}
inline ::InforGuard_::netCallData* getFileTimeReq::mutable_call() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.getFileTimeReq.call)
  return _internal_mutable_call();
}
inline void getFileTimeReq::set_allocated_call(::InforGuard_::netCallData* call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  if (call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call)->GetArena();
    if (message_arena != submessage_arena) {
      call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call, submessage_arena);
    }
    
  } else {
    
  }
  call_ = call;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.getFileTimeReq.call)
}

// bytes filename = 2;
inline void getFileTimeReq::clear_filename() {
  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& getFileTimeReq::filename() const {
  // @@protoc_insertion_point(field_get:InforGuard_.getFileTimeReq.filename)
  return _internal_filename();
}
inline void getFileTimeReq::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:InforGuard_.getFileTimeReq.filename)
}
inline std::string* getFileTimeReq::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.getFileTimeReq.filename)
  return _internal_mutable_filename();
}
inline const std::string& getFileTimeReq::_internal_filename() const {
  return filename_.Get();
}
inline void getFileTimeReq::_internal_set_filename(const std::string& value) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void getFileTimeReq::set_filename(std::string&& value) {
  
  filename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.getFileTimeReq.filename)
}
inline void getFileTimeReq::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.getFileTimeReq.filename)
}
inline void getFileTimeReq::set_filename(const void* value,
    size_t size) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.getFileTimeReq.filename)
}
inline std::string* getFileTimeReq::_internal_mutable_filename() {
  
  return filename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* getFileTimeReq::release_filename() {
  // @@protoc_insertion_point(field_release:InforGuard_.getFileTimeReq.filename)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getFileTimeReq::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.getFileTimeReq.filename)
}
inline std::string* getFileTimeReq::unsafe_arena_release_filename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.getFileTimeReq.filename)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return filename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void getFileTimeReq::unsafe_arena_set_allocated_filename(
    std::string* filename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      filename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.getFileTimeReq.filename)
}

// -------------------------------------------------------------------

// getFileTimeRes

// .InforGuard_.netCallData call = 1;
inline bool getFileTimeRes::_internal_has_call() const {
  return this != internal_default_instance() && call_ != nullptr;
}
inline bool getFileTimeRes::has_call() const {
  return _internal_has_call();
}
inline const ::InforGuard_::netCallData& getFileTimeRes::_internal_call() const {
  const ::InforGuard_::netCallData* p = call_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::netCallData*>(
      &::InforGuard_::_netCallData_default_instance_);
}
inline const ::InforGuard_::netCallData& getFileTimeRes::call() const {
  // @@protoc_insertion_point(field_get:InforGuard_.getFileTimeRes.call)
  return _internal_call();
}
inline void getFileTimeRes::unsafe_arena_set_allocated_call(
    ::InforGuard_::netCallData* call) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  call_ = call;
  if (call) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.getFileTimeRes.call)
}
inline ::InforGuard_::netCallData* getFileTimeRes::release_call() {
  auto temp = unsafe_arena_release_call();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::netCallData* getFileTimeRes::unsafe_arena_release_call() {
  // @@protoc_insertion_point(field_release:InforGuard_.getFileTimeRes.call)
  
  ::InforGuard_::netCallData* temp = call_;
  call_ = nullptr;
  return temp;
}
inline ::InforGuard_::netCallData* getFileTimeRes::_internal_mutable_call() {
  
  if (call_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::netCallData>(GetArena());
    call_ = p;
  }
  return call_;
}
inline ::InforGuard_::netCallData* getFileTimeRes::mutable_call() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.getFileTimeRes.call)
  return _internal_mutable_call();
}
inline void getFileTimeRes::set_allocated_call(::InforGuard_::netCallData* call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  if (call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call)->GetArena();
    if (message_arena != submessage_arena) {
      call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call, submessage_arena);
    }
    
  } else {
    
  }
  call_ = call;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.getFileTimeRes.call)
}

// .InforGuard_.ExceptionError ex = 2;
inline bool getFileTimeRes::_internal_has_ex() const {
  return this != internal_default_instance() && ex_ != nullptr;
}
inline bool getFileTimeRes::has_ex() const {
  return _internal_has_ex();
}
inline const ::InforGuard_::ExceptionError& getFileTimeRes::_internal_ex() const {
  const ::InforGuard_::ExceptionError* p = ex_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::ExceptionError*>(
      &::InforGuard_::_ExceptionError_default_instance_);
}
inline const ::InforGuard_::ExceptionError& getFileTimeRes::ex() const {
  // @@protoc_insertion_point(field_get:InforGuard_.getFileTimeRes.ex)
  return _internal_ex();
}
inline void getFileTimeRes::unsafe_arena_set_allocated_ex(
    ::InforGuard_::ExceptionError* ex) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  ex_ = ex;
  if (ex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.getFileTimeRes.ex)
}
inline ::InforGuard_::ExceptionError* getFileTimeRes::release_ex() {
  auto temp = unsafe_arena_release_ex();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::ExceptionError* getFileTimeRes::unsafe_arena_release_ex() {
  // @@protoc_insertion_point(field_release:InforGuard_.getFileTimeRes.ex)
  
  ::InforGuard_::ExceptionError* temp = ex_;
  ex_ = nullptr;
  return temp;
}
inline ::InforGuard_::ExceptionError* getFileTimeRes::_internal_mutable_ex() {
  
  if (ex_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::ExceptionError>(GetArena());
    ex_ = p;
  }
  return ex_;
}
inline ::InforGuard_::ExceptionError* getFileTimeRes::mutable_ex() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.getFileTimeRes.ex)
  return _internal_mutable_ex();
}
inline void getFileTimeRes::set_allocated_ex(::InforGuard_::ExceptionError* ex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  if (ex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex)->GetArena();
    if (message_arena != submessage_arena) {
      ex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ex, submessage_arena);
    }
    
  } else {
    
  }
  ex_ = ex;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.getFileTimeRes.ex)
}

// int32 mtime = 3;
inline void getFileTimeRes::clear_mtime() {
  mtime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getFileTimeRes::_internal_mtime() const {
  return mtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getFileTimeRes::mtime() const {
  // @@protoc_insertion_point(field_get:InforGuard_.getFileTimeRes.mtime)
  return _internal_mtime();
}
inline void getFileTimeRes::_internal_set_mtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mtime_ = value;
}
inline void getFileTimeRes::set_mtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mtime(value);
  // @@protoc_insertion_point(field_set:InforGuard_.getFileTimeRes.mtime)
}

// int32 ret = 4;
inline void getFileTimeRes::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getFileTimeRes::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getFileTimeRes::ret() const {
  // @@protoc_insertion_point(field_get:InforGuard_.getFileTimeRes.ret)
  return _internal_ret();
}
inline void getFileTimeRes::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void getFileTimeRes::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:InforGuard_.getFileTimeRes.ret)
}

// -------------------------------------------------------------------

// sendFileListReq

// repeated .InforGuard_.RemoteDirectory list = 1;
inline int sendFileListReq::_internal_list_size() const {
  return list_.size();
}
inline int sendFileListReq::list_size() const {
  return _internal_list_size();
}
inline ::InforGuard_::RemoteDirectory* sendFileListReq::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:InforGuard_.sendFileListReq.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::RemoteDirectory >*
sendFileListReq::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:InforGuard_.sendFileListReq.list)
  return &list_;
}
inline const ::InforGuard_::RemoteDirectory& sendFileListReq::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::InforGuard_::RemoteDirectory& sendFileListReq::list(int index) const {
  // @@protoc_insertion_point(field_get:InforGuard_.sendFileListReq.list)
  return _internal_list(index);
}
inline ::InforGuard_::RemoteDirectory* sendFileListReq::_internal_add_list() {
  return list_.Add();
}
inline ::InforGuard_::RemoteDirectory* sendFileListReq::add_list() {
  // @@protoc_insertion_point(field_add:InforGuard_.sendFileListReq.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::RemoteDirectory >&
sendFileListReq::list() const {
  // @@protoc_insertion_point(field_list:InforGuard_.sendFileListReq.list)
  return list_;
}

// -------------------------------------------------------------------

// sendFileListRes

// .InforGuard_.ExceptionError ex = 1;
inline bool sendFileListRes::_internal_has_ex() const {
  return this != internal_default_instance() && ex_ != nullptr;
}
inline bool sendFileListRes::has_ex() const {
  return _internal_has_ex();
}
inline const ::InforGuard_::ExceptionError& sendFileListRes::_internal_ex() const {
  const ::InforGuard_::ExceptionError* p = ex_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::ExceptionError*>(
      &::InforGuard_::_ExceptionError_default_instance_);
}
inline const ::InforGuard_::ExceptionError& sendFileListRes::ex() const {
  // @@protoc_insertion_point(field_get:InforGuard_.sendFileListRes.ex)
  return _internal_ex();
}
inline void sendFileListRes::unsafe_arena_set_allocated_ex(
    ::InforGuard_::ExceptionError* ex) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  ex_ = ex;
  if (ex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.sendFileListRes.ex)
}
inline ::InforGuard_::ExceptionError* sendFileListRes::release_ex() {
  auto temp = unsafe_arena_release_ex();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::ExceptionError* sendFileListRes::unsafe_arena_release_ex() {
  // @@protoc_insertion_point(field_release:InforGuard_.sendFileListRes.ex)
  
  ::InforGuard_::ExceptionError* temp = ex_;
  ex_ = nullptr;
  return temp;
}
inline ::InforGuard_::ExceptionError* sendFileListRes::_internal_mutable_ex() {
  
  if (ex_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::ExceptionError>(GetArena());
    ex_ = p;
  }
  return ex_;
}
inline ::InforGuard_::ExceptionError* sendFileListRes::mutable_ex() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.sendFileListRes.ex)
  return _internal_mutable_ex();
}
inline void sendFileListRes::set_allocated_ex(::InforGuard_::ExceptionError* ex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  if (ex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex)->GetArena();
    if (message_arena != submessage_arena) {
      ex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ex, submessage_arena);
    }
    
  } else {
    
  }
  ex_ = ex;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.sendFileListRes.ex)
}

// int32 ret = 2;
inline void sendFileListRes::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 sendFileListRes::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 sendFileListRes::ret() const {
  // @@protoc_insertion_point(field_get:InforGuard_.sendFileListRes.ret)
  return _internal_ret();
}
inline void sendFileListRes::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void sendFileListRes::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:InforGuard_.sendFileListRes.ret)
}

// -------------------------------------------------------------------

// sendAccessReq

// bool req = 1;
inline void sendAccessReq::clear_req() {
  req_ = false;
}
inline bool sendAccessReq::_internal_req() const {
  return req_;
}
inline bool sendAccessReq::req() const {
  // @@protoc_insertion_point(field_get:InforGuard_.sendAccessReq.req)
  return _internal_req();
}
inline void sendAccessReq::_internal_set_req(bool value) {
  
  req_ = value;
}
inline void sendAccessReq::set_req(bool value) {
  _internal_set_req(value);
  // @@protoc_insertion_point(field_set:InforGuard_.sendAccessReq.req)
}

// -------------------------------------------------------------------

// sendAccessRes

// .InforGuard_.ExceptionError ex = 1;
inline bool sendAccessRes::_internal_has_ex() const {
  return this != internal_default_instance() && ex_ != nullptr;
}
inline bool sendAccessRes::has_ex() const {
  return _internal_has_ex();
}
inline const ::InforGuard_::ExceptionError& sendAccessRes::_internal_ex() const {
  const ::InforGuard_::ExceptionError* p = ex_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::ExceptionError*>(
      &::InforGuard_::_ExceptionError_default_instance_);
}
inline const ::InforGuard_::ExceptionError& sendAccessRes::ex() const {
  // @@protoc_insertion_point(field_get:InforGuard_.sendAccessRes.ex)
  return _internal_ex();
}
inline void sendAccessRes::unsafe_arena_set_allocated_ex(
    ::InforGuard_::ExceptionError* ex) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  ex_ = ex;
  if (ex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.sendAccessRes.ex)
}
inline ::InforGuard_::ExceptionError* sendAccessRes::release_ex() {
  auto temp = unsafe_arena_release_ex();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::ExceptionError* sendAccessRes::unsafe_arena_release_ex() {
  // @@protoc_insertion_point(field_release:InforGuard_.sendAccessRes.ex)
  
  ::InforGuard_::ExceptionError* temp = ex_;
  ex_ = nullptr;
  return temp;
}
inline ::InforGuard_::ExceptionError* sendAccessRes::_internal_mutable_ex() {
  
  if (ex_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::ExceptionError>(GetArena());
    ex_ = p;
  }
  return ex_;
}
inline ::InforGuard_::ExceptionError* sendAccessRes::mutable_ex() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.sendAccessRes.ex)
  return _internal_mutable_ex();
}
inline void sendAccessRes::set_allocated_ex(::InforGuard_::ExceptionError* ex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  if (ex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex)->GetArena();
    if (message_arena != submessage_arena) {
      ex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ex, submessage_arena);
    }
    
  } else {
    
  }
  ex_ = ex;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.sendAccessRes.ex)
}

// int32 ret = 2;
inline void sendAccessRes::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 sendAccessRes::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 sendAccessRes::ret() const {
  // @@protoc_insertion_point(field_get:InforGuard_.sendAccessRes.ret)
  return _internal_ret();
}
inline void sendAccessRes::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void sendAccessRes::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:InforGuard_.sendAccessRes.ret)
}

// -------------------------------------------------------------------

// checkFileListReq

// repeated .InforGuard_.NetFileListNode inList = 1;
inline int checkFileListReq::_internal_inlist_size() const {
  return inlist_.size();
}
inline int checkFileListReq::inlist_size() const {
  return _internal_inlist_size();
}
inline ::InforGuard_::NetFileListNode* checkFileListReq::mutable_inlist(int index) {
  // @@protoc_insertion_point(field_mutable:InforGuard_.checkFileListReq.inList)
  return inlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::NetFileListNode >*
checkFileListReq::mutable_inlist() {
  // @@protoc_insertion_point(field_mutable_list:InforGuard_.checkFileListReq.inList)
  return &inlist_;
}
inline const ::InforGuard_::NetFileListNode& checkFileListReq::_internal_inlist(int index) const {
  return inlist_.Get(index);
}
inline const ::InforGuard_::NetFileListNode& checkFileListReq::inlist(int index) const {
  // @@protoc_insertion_point(field_get:InforGuard_.checkFileListReq.inList)
  return _internal_inlist(index);
}
inline ::InforGuard_::NetFileListNode* checkFileListReq::_internal_add_inlist() {
  return inlist_.Add();
}
inline ::InforGuard_::NetFileListNode* checkFileListReq::add_inlist() {
  // @@protoc_insertion_point(field_add:InforGuard_.checkFileListReq.inList)
  return _internal_add_inlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::NetFileListNode >&
checkFileListReq::inlist() const {
  // @@protoc_insertion_point(field_list:InforGuard_.checkFileListReq.inList)
  return inlist_;
}

// -------------------------------------------------------------------

// checkFileListRes

// .InforGuard_.ExceptionError ex = 1;
inline bool checkFileListRes::_internal_has_ex() const {
  return this != internal_default_instance() && ex_ != nullptr;
}
inline bool checkFileListRes::has_ex() const {
  return _internal_has_ex();
}
inline const ::InforGuard_::ExceptionError& checkFileListRes::_internal_ex() const {
  const ::InforGuard_::ExceptionError* p = ex_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::ExceptionError*>(
      &::InforGuard_::_ExceptionError_default_instance_);
}
inline const ::InforGuard_::ExceptionError& checkFileListRes::ex() const {
  // @@protoc_insertion_point(field_get:InforGuard_.checkFileListRes.ex)
  return _internal_ex();
}
inline void checkFileListRes::unsafe_arena_set_allocated_ex(
    ::InforGuard_::ExceptionError* ex) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  ex_ = ex;
  if (ex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.checkFileListRes.ex)
}
inline ::InforGuard_::ExceptionError* checkFileListRes::release_ex() {
  auto temp = unsafe_arena_release_ex();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::ExceptionError* checkFileListRes::unsafe_arena_release_ex() {
  // @@protoc_insertion_point(field_release:InforGuard_.checkFileListRes.ex)
  
  ::InforGuard_::ExceptionError* temp = ex_;
  ex_ = nullptr;
  return temp;
}
inline ::InforGuard_::ExceptionError* checkFileListRes::_internal_mutable_ex() {
  
  if (ex_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::ExceptionError>(GetArena());
    ex_ = p;
  }
  return ex_;
}
inline ::InforGuard_::ExceptionError* checkFileListRes::mutable_ex() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.checkFileListRes.ex)
  return _internal_mutable_ex();
}
inline void checkFileListRes::set_allocated_ex(::InforGuard_::ExceptionError* ex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  if (ex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex)->GetArena();
    if (message_arena != submessage_arena) {
      ex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ex, submessage_arena);
    }
    
  } else {
    
  }
  ex_ = ex;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.checkFileListRes.ex)
}

// repeated bytes notExistList = 2;
inline int checkFileListRes::_internal_notexistlist_size() const {
  return notexistlist_.size();
}
inline int checkFileListRes::notexistlist_size() const {
  return _internal_notexistlist_size();
}
inline void checkFileListRes::clear_notexistlist() {
  notexistlist_.Clear();
}
inline std::string* checkFileListRes::add_notexistlist() {
  // @@protoc_insertion_point(field_add_mutable:InforGuard_.checkFileListRes.notExistList)
  return _internal_add_notexistlist();
}
inline const std::string& checkFileListRes::_internal_notexistlist(int index) const {
  return notexistlist_.Get(index);
}
inline const std::string& checkFileListRes::notexistlist(int index) const {
  // @@protoc_insertion_point(field_get:InforGuard_.checkFileListRes.notExistList)
  return _internal_notexistlist(index);
}
inline std::string* checkFileListRes::mutable_notexistlist(int index) {
  // @@protoc_insertion_point(field_mutable:InforGuard_.checkFileListRes.notExistList)
  return notexistlist_.Mutable(index);
}
inline void checkFileListRes::set_notexistlist(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:InforGuard_.checkFileListRes.notExistList)
  notexistlist_.Mutable(index)->assign(value);
}
inline void checkFileListRes::set_notexistlist(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:InforGuard_.checkFileListRes.notExistList)
  notexistlist_.Mutable(index)->assign(std::move(value));
}
inline void checkFileListRes::set_notexistlist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  notexistlist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:InforGuard_.checkFileListRes.notExistList)
}
inline void checkFileListRes::set_notexistlist(int index, const void* value, size_t size) {
  notexistlist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.checkFileListRes.notExistList)
}
inline std::string* checkFileListRes::_internal_add_notexistlist() {
  return notexistlist_.Add();
}
inline void checkFileListRes::add_notexistlist(const std::string& value) {
  notexistlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:InforGuard_.checkFileListRes.notExistList)
}
inline void checkFileListRes::add_notexistlist(std::string&& value) {
  notexistlist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:InforGuard_.checkFileListRes.notExistList)
}
inline void checkFileListRes::add_notexistlist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  notexistlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:InforGuard_.checkFileListRes.notExistList)
}
inline void checkFileListRes::add_notexistlist(const void* value, size_t size) {
  notexistlist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:InforGuard_.checkFileListRes.notExistList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
checkFileListRes::notexistlist() const {
  // @@protoc_insertion_point(field_list:InforGuard_.checkFileListRes.notExistList)
  return notexistlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
checkFileListRes::mutable_notexistlist() {
  // @@protoc_insertion_point(field_mutable_list:InforGuard_.checkFileListRes.notExistList)
  return &notexistlist_;
}

// repeated bytes diffList = 3;
inline int checkFileListRes::_internal_difflist_size() const {
  return difflist_.size();
}
inline int checkFileListRes::difflist_size() const {
  return _internal_difflist_size();
}
inline void checkFileListRes::clear_difflist() {
  difflist_.Clear();
}
inline std::string* checkFileListRes::add_difflist() {
  // @@protoc_insertion_point(field_add_mutable:InforGuard_.checkFileListRes.diffList)
  return _internal_add_difflist();
}
inline const std::string& checkFileListRes::_internal_difflist(int index) const {
  return difflist_.Get(index);
}
inline const std::string& checkFileListRes::difflist(int index) const {
  // @@protoc_insertion_point(field_get:InforGuard_.checkFileListRes.diffList)
  return _internal_difflist(index);
}
inline std::string* checkFileListRes::mutable_difflist(int index) {
  // @@protoc_insertion_point(field_mutable:InforGuard_.checkFileListRes.diffList)
  return difflist_.Mutable(index);
}
inline void checkFileListRes::set_difflist(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:InforGuard_.checkFileListRes.diffList)
  difflist_.Mutable(index)->assign(value);
}
inline void checkFileListRes::set_difflist(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:InforGuard_.checkFileListRes.diffList)
  difflist_.Mutable(index)->assign(std::move(value));
}
inline void checkFileListRes::set_difflist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  difflist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:InforGuard_.checkFileListRes.diffList)
}
inline void checkFileListRes::set_difflist(int index, const void* value, size_t size) {
  difflist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.checkFileListRes.diffList)
}
inline std::string* checkFileListRes::_internal_add_difflist() {
  return difflist_.Add();
}
inline void checkFileListRes::add_difflist(const std::string& value) {
  difflist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:InforGuard_.checkFileListRes.diffList)
}
inline void checkFileListRes::add_difflist(std::string&& value) {
  difflist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:InforGuard_.checkFileListRes.diffList)
}
inline void checkFileListRes::add_difflist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  difflist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:InforGuard_.checkFileListRes.diffList)
}
inline void checkFileListRes::add_difflist(const void* value, size_t size) {
  difflist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:InforGuard_.checkFileListRes.diffList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
checkFileListRes::difflist() const {
  // @@protoc_insertion_point(field_list:InforGuard_.checkFileListRes.diffList)
  return difflist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
checkFileListRes::mutable_difflist() {
  // @@protoc_insertion_point(field_mutable_list:InforGuard_.checkFileListRes.diffList)
  return &difflist_;
}

// int32 ret = 4;
inline void checkFileListRes::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 checkFileListRes::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 checkFileListRes::ret() const {
  // @@protoc_insertion_point(field_get:InforGuard_.checkFileListRes.ret)
  return _internal_ret();
}
inline void checkFileListRes::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void checkFileListRes::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:InforGuard_.checkFileListRes.ret)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace InforGuard_

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_FileTran_2eproto
