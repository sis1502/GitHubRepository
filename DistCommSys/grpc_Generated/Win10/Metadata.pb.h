// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Metadata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Metadata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Metadata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Metadata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Metadata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Metadata_2eproto;
namespace InforGuard_ {
class CheckReq;
class CheckReqDefaultTypeInternal;
extern CheckReqDefaultTypeInternal _CheckReq_default_instance_;
class CheckRes;
class CheckResDefaultTypeInternal;
extern CheckResDefaultTypeInternal _CheckRes_default_instance_;
class ExceptionError;
class ExceptionErrorDefaultTypeInternal;
extern ExceptionErrorDefaultTypeInternal _ExceptionError_default_instance_;
class MsgBlock;
class MsgBlockDefaultTypeInternal;
extern MsgBlockDefaultTypeInternal _MsgBlock_default_instance_;
class NetFileListNode;
class NetFileListNodeDefaultTypeInternal;
extern NetFileListNodeDefaultTypeInternal _NetFileListNode_default_instance_;
class NetFileTreeNode;
class NetFileTreeNodeDefaultTypeInternal;
extern NetFileTreeNodeDefaultTypeInternal _NetFileTreeNode_default_instance_;
class RemoteDirectory;
class RemoteDirectoryDefaultTypeInternal;
extern RemoteDirectoryDefaultTypeInternal _RemoteDirectory_default_instance_;
class netCallData;
class netCallDataDefaultTypeInternal;
extern netCallDataDefaultTypeInternal _netCallData_default_instance_;
class netIpPort;
class netIpPortDefaultTypeInternal;
extern netIpPortDefaultTypeInternal _netIpPort_default_instance_;
class s_FileNodeInfo;
class s_FileNodeInfoDefaultTypeInternal;
extern s_FileNodeInfoDefaultTypeInternal _s_FileNodeInfo_default_instance_;
}  // namespace InforGuard_
PROTOBUF_NAMESPACE_OPEN
template<> ::InforGuard_::CheckReq* Arena::CreateMaybeMessage<::InforGuard_::CheckReq>(Arena*);
template<> ::InforGuard_::CheckRes* Arena::CreateMaybeMessage<::InforGuard_::CheckRes>(Arena*);
template<> ::InforGuard_::ExceptionError* Arena::CreateMaybeMessage<::InforGuard_::ExceptionError>(Arena*);
template<> ::InforGuard_::MsgBlock* Arena::CreateMaybeMessage<::InforGuard_::MsgBlock>(Arena*);
template<> ::InforGuard_::NetFileListNode* Arena::CreateMaybeMessage<::InforGuard_::NetFileListNode>(Arena*);
template<> ::InforGuard_::NetFileTreeNode* Arena::CreateMaybeMessage<::InforGuard_::NetFileTreeNode>(Arena*);
template<> ::InforGuard_::RemoteDirectory* Arena::CreateMaybeMessage<::InforGuard_::RemoteDirectory>(Arena*);
template<> ::InforGuard_::netCallData* Arena::CreateMaybeMessage<::InforGuard_::netCallData>(Arena*);
template<> ::InforGuard_::netIpPort* Arena::CreateMaybeMessage<::InforGuard_::netIpPort>(Arena*);
template<> ::InforGuard_::s_FileNodeInfo* Arena::CreateMaybeMessage<::InforGuard_::s_FileNodeInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace InforGuard_ {

// ===================================================================

class netCallData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.netCallData) */ {
 public:
  inline netCallData() : netCallData(nullptr) {};
  virtual ~netCallData();

  netCallData(const netCallData& from);
  netCallData(netCallData&& from) noexcept
    : netCallData() {
    *this = ::std::move(from);
  }

  inline netCallData& operator=(const netCallData& from) {
    CopyFrom(from);
    return *this;
  }
  inline netCallData& operator=(netCallData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const netCallData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const netCallData* internal_default_instance() {
    return reinterpret_cast<const netCallData*>(
               &_netCallData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(netCallData& a, netCallData& b) {
    a.Swap(&b);
  }
  inline void Swap(netCallData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(netCallData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline netCallData* New() const final {
    return CreateMaybeMessage<netCallData>(nullptr);
  }

  netCallData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<netCallData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const netCallData& from);
  void MergeFrom(const netCallData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(netCallData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.netCallData";
  }
  protected:
  explicit netCallData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Metadata_2eproto);
    return ::descriptor_table_Metadata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSIpFieldNumber = 2,
    kNThreadIdFieldNumber = 1,
    kSPortFieldNumber = 3,
    kNSerialFieldNumber = 4,
    kNSubSerialFieldNumber = 5,
    kNRecSerialFieldNumber = 6,
    kNIndentFieldNumber = 7,
  };
  // bytes sIp = 2;
  void clear_sip();
  const std::string& sip() const;
  void set_sip(const std::string& value);
  void set_sip(std::string&& value);
  void set_sip(const char* value);
  void set_sip(const void* value, size_t size);
  std::string* mutable_sip();
  std::string* release_sip();
  void set_allocated_sip(std::string* sip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sip(
      std::string* sip);
  private:
  const std::string& _internal_sip() const;
  void _internal_set_sip(const std::string& value);
  std::string* _internal_mutable_sip();
  public:

  // int32 nThreadId = 1;
  void clear_nthreadid();
  ::PROTOBUF_NAMESPACE_ID::int32 nthreadid() const;
  void set_nthreadid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nthreadid() const;
  void _internal_set_nthreadid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sPort = 3;
  void clear_sport();
  ::PROTOBUF_NAMESPACE_ID::int32 sport() const;
  void set_sport(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sport() const;
  void _internal_set_sport(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nSerial = 4;
  void clear_nserial();
  ::PROTOBUF_NAMESPACE_ID::int32 nserial() const;
  void set_nserial(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nserial() const;
  void _internal_set_nserial(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nSubSerial = 5;
  void clear_nsubserial();
  ::PROTOBUF_NAMESPACE_ID::int32 nsubserial() const;
  void set_nsubserial(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nsubserial() const;
  void _internal_set_nsubserial(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nRecSerial = 6;
  void clear_nrecserial();
  ::PROTOBUF_NAMESPACE_ID::int32 nrecserial() const;
  void set_nrecserial(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nrecserial() const;
  void _internal_set_nrecserial(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nIndent = 7;
  void clear_nindent();
  ::PROTOBUF_NAMESPACE_ID::int32 nindent() const;
  void set_nindent(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nindent() const;
  void _internal_set_nindent(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.netCallData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sip_;
  ::PROTOBUF_NAMESPACE_ID::int32 nthreadid_;
  ::PROTOBUF_NAMESPACE_ID::int32 sport_;
  ::PROTOBUF_NAMESPACE_ID::int32 nserial_;
  ::PROTOBUF_NAMESPACE_ID::int32 nsubserial_;
  ::PROTOBUF_NAMESPACE_ID::int32 nrecserial_;
  ::PROTOBUF_NAMESPACE_ID::int32 nindent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Metadata_2eproto;
};
// -------------------------------------------------------------------

class netIpPort PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.netIpPort) */ {
 public:
  inline netIpPort() : netIpPort(nullptr) {};
  virtual ~netIpPort();

  netIpPort(const netIpPort& from);
  netIpPort(netIpPort&& from) noexcept
    : netIpPort() {
    *this = ::std::move(from);
  }

  inline netIpPort& operator=(const netIpPort& from) {
    CopyFrom(from);
    return *this;
  }
  inline netIpPort& operator=(netIpPort&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const netIpPort& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const netIpPort* internal_default_instance() {
    return reinterpret_cast<const netIpPort*>(
               &_netIpPort_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(netIpPort& a, netIpPort& b) {
    a.Swap(&b);
  }
  inline void Swap(netIpPort* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(netIpPort* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline netIpPort* New() const final {
    return CreateMaybeMessage<netIpPort>(nullptr);
  }

  netIpPort* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<netIpPort>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const netIpPort& from);
  void MergeFrom(const netIpPort& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(netIpPort* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.netIpPort";
  }
  protected:
  explicit netIpPort(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Metadata_2eproto);
    return ::descriptor_table_Metadata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSIpFieldNumber = 1,
    kSPortFieldNumber = 2,
  };
  // bytes sIp = 1;
  void clear_sip();
  const std::string& sip() const;
  void set_sip(const std::string& value);
  void set_sip(std::string&& value);
  void set_sip(const char* value);
  void set_sip(const void* value, size_t size);
  std::string* mutable_sip();
  std::string* release_sip();
  void set_allocated_sip(std::string* sip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sip(
      std::string* sip);
  private:
  const std::string& _internal_sip() const;
  void _internal_set_sip(const std::string& value);
  std::string* _internal_mutable_sip();
  public:

  // bytes sPort = 2;
  void clear_sport();
  const std::string& sport() const;
  void set_sport(const std::string& value);
  void set_sport(std::string&& value);
  void set_sport(const char* value);
  void set_sport(const void* value, size_t size);
  std::string* mutable_sport();
  std::string* release_sport();
  void set_allocated_sport(std::string* sport);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sport();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sport(
      std::string* sport);
  private:
  const std::string& _internal_sport() const;
  void _internal_set_sport(const std::string& value);
  std::string* _internal_mutable_sport();
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.netIpPort)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sport_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Metadata_2eproto;
};
// -------------------------------------------------------------------

class ExceptionError PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.ExceptionError) */ {
 public:
  inline ExceptionError() : ExceptionError(nullptr) {};
  virtual ~ExceptionError();

  ExceptionError(const ExceptionError& from);
  ExceptionError(ExceptionError&& from) noexcept
    : ExceptionError() {
    *this = ::std::move(from);
  }

  inline ExceptionError& operator=(const ExceptionError& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExceptionError& operator=(ExceptionError&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExceptionError& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExceptionError* internal_default_instance() {
    return reinterpret_cast<const ExceptionError*>(
               &_ExceptionError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ExceptionError& a, ExceptionError& b) {
    a.Swap(&b);
  }
  inline void Swap(ExceptionError* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExceptionError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExceptionError* New() const final {
    return CreateMaybeMessage<ExceptionError>(nullptr);
  }

  ExceptionError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExceptionError>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExceptionError& from);
  void MergeFrom(const ExceptionError& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExceptionError* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.ExceptionError";
  }
  protected:
  explicit ExceptionError(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Metadata_2eproto);
    return ::descriptor_table_Metadata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVErrTextFieldNumber = 2,
    kNErrCodeFieldNumber = 1,
  };
  // repeated bytes vErrText = 2;
  int verrtext_size() const;
  private:
  int _internal_verrtext_size() const;
  public:
  void clear_verrtext();
  const std::string& verrtext(int index) const;
  std::string* mutable_verrtext(int index);
  void set_verrtext(int index, const std::string& value);
  void set_verrtext(int index, std::string&& value);
  void set_verrtext(int index, const char* value);
  void set_verrtext(int index, const void* value, size_t size);
  std::string* add_verrtext();
  void add_verrtext(const std::string& value);
  void add_verrtext(std::string&& value);
  void add_verrtext(const char* value);
  void add_verrtext(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& verrtext() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_verrtext();
  private:
  const std::string& _internal_verrtext(int index) const;
  std::string* _internal_add_verrtext();
  public:

  // int32 nErrCode = 1;
  void clear_nerrcode();
  ::PROTOBUF_NAMESPACE_ID::int32 nerrcode() const;
  void set_nerrcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nerrcode() const;
  void _internal_set_nerrcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.ExceptionError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> verrtext_;
  ::PROTOBUF_NAMESPACE_ID::int32 nerrcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Metadata_2eproto;
};
// -------------------------------------------------------------------

class NetFileTreeNode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.NetFileTreeNode) */ {
 public:
  inline NetFileTreeNode() : NetFileTreeNode(nullptr) {};
  virtual ~NetFileTreeNode();

  NetFileTreeNode(const NetFileTreeNode& from);
  NetFileTreeNode(NetFileTreeNode&& from) noexcept
    : NetFileTreeNode() {
    *this = ::std::move(from);
  }

  inline NetFileTreeNode& operator=(const NetFileTreeNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetFileTreeNode& operator=(NetFileTreeNode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetFileTreeNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetFileTreeNode* internal_default_instance() {
    return reinterpret_cast<const NetFileTreeNode*>(
               &_NetFileTreeNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NetFileTreeNode& a, NetFileTreeNode& b) {
    a.Swap(&b);
  }
  inline void Swap(NetFileTreeNode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetFileTreeNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetFileTreeNode* New() const final {
    return CreateMaybeMessage<NetFileTreeNode>(nullptr);
  }

  NetFileTreeNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetFileTreeNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetFileTreeNode& from);
  void MergeFrom(const NetFileTreeNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetFileTreeNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.NetFileTreeNode";
  }
  protected:
  explicit NetFileTreeNode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Metadata_2eproto);
    return ::descriptor_table_Metadata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSizeFieldNumber = 2,
    kTimeFieldNumber = 3,
    kIsfolderFieldNumber = 4,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 size = 2;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 time = 3;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isfolder = 4;
  void clear_isfolder();
  bool isfolder() const;
  void set_isfolder(bool value);
  private:
  bool _internal_isfolder() const;
  void _internal_set_isfolder(bool value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.NetFileTreeNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  bool isfolder_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Metadata_2eproto;
};
// -------------------------------------------------------------------

class NetFileListNode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.NetFileListNode) */ {
 public:
  inline NetFileListNode() : NetFileListNode(nullptr) {};
  virtual ~NetFileListNode();

  NetFileListNode(const NetFileListNode& from);
  NetFileListNode(NetFileListNode&& from) noexcept
    : NetFileListNode() {
    *this = ::std::move(from);
  }

  inline NetFileListNode& operator=(const NetFileListNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetFileListNode& operator=(NetFileListNode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetFileListNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetFileListNode* internal_default_instance() {
    return reinterpret_cast<const NetFileListNode*>(
               &_NetFileListNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(NetFileListNode& a, NetFileListNode& b) {
    a.Swap(&b);
  }
  inline void Swap(NetFileListNode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetFileListNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetFileListNode* New() const final {
    return CreateMaybeMessage<NetFileListNode>(nullptr);
  }

  NetFileListNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetFileListNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetFileListNode& from);
  void MergeFrom(const NetFileListNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetFileListNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.NetFileListNode";
  }
  protected:
  explicit NetFileListNode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Metadata_2eproto);
    return ::descriptor_table_Metadata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSizeFieldNumber = 2,
    kTimeFieldNumber = 3,
    kIsfolderFieldNumber = 4,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 size = 2;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 time = 3;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isfolder = 4;
  void clear_isfolder();
  bool isfolder() const;
  void set_isfolder(bool value);
  private:
  bool _internal_isfolder() const;
  void _internal_set_isfolder(bool value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.NetFileListNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  bool isfolder_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Metadata_2eproto;
};
// -------------------------------------------------------------------

class s_FileNodeInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.s_FileNodeInfo) */ {
 public:
  inline s_FileNodeInfo() : s_FileNodeInfo(nullptr) {};
  virtual ~s_FileNodeInfo();

  s_FileNodeInfo(const s_FileNodeInfo& from);
  s_FileNodeInfo(s_FileNodeInfo&& from) noexcept
    : s_FileNodeInfo() {
    *this = ::std::move(from);
  }

  inline s_FileNodeInfo& operator=(const s_FileNodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline s_FileNodeInfo& operator=(s_FileNodeInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const s_FileNodeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const s_FileNodeInfo* internal_default_instance() {
    return reinterpret_cast<const s_FileNodeInfo*>(
               &_s_FileNodeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(s_FileNodeInfo& a, s_FileNodeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(s_FileNodeInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(s_FileNodeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline s_FileNodeInfo* New() const final {
    return CreateMaybeMessage<s_FileNodeInfo>(nullptr);
  }

  s_FileNodeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<s_FileNodeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const s_FileNodeInfo& from);
  void MergeFrom(const s_FileNodeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(s_FileNodeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.s_FileNodeInfo";
  }
  protected:
  explicit s_FileNodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Metadata_2eproto);
    return ::descriptor_table_Metadata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIsfileFieldNumber = 2,
    kMtimeFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool isfile = 2;
  void clear_isfile();
  bool isfile() const;
  void set_isfile(bool value);
  private:
  bool _internal_isfile() const;
  void _internal_set_isfile(bool value);
  public:

  // int32 mtime = 3;
  void clear_mtime();
  ::PROTOBUF_NAMESPACE_ID::int32 mtime() const;
  void set_mtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mtime() const;
  void _internal_set_mtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 4;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.s_FileNodeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool isfile_;
  ::PROTOBUF_NAMESPACE_ID::int32 mtime_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Metadata_2eproto;
};
// -------------------------------------------------------------------

class RemoteDirectory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.RemoteDirectory) */ {
 public:
  inline RemoteDirectory() : RemoteDirectory(nullptr) {};
  virtual ~RemoteDirectory();

  RemoteDirectory(const RemoteDirectory& from);
  RemoteDirectory(RemoteDirectory&& from) noexcept
    : RemoteDirectory() {
    *this = ::std::move(from);
  }

  inline RemoteDirectory& operator=(const RemoteDirectory& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteDirectory& operator=(RemoteDirectory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoteDirectory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoteDirectory* internal_default_instance() {
    return reinterpret_cast<const RemoteDirectory*>(
               &_RemoteDirectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RemoteDirectory& a, RemoteDirectory& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteDirectory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteDirectory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoteDirectory* New() const final {
    return CreateMaybeMessage<RemoteDirectory>(nullptr);
  }

  RemoteDirectory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoteDirectory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoteDirectory& from);
  void MergeFrom(const RemoteDirectory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteDirectory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.RemoteDirectory";
  }
  protected:
  explicit RemoteDirectory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Metadata_2eproto);
    return ::descriptor_table_Metadata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // repeated .InforGuard_.s_FileNodeInfo nodes = 1;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::InforGuard_::s_FileNodeInfo* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::s_FileNodeInfo >*
      mutable_nodes();
  private:
  const ::InforGuard_::s_FileNodeInfo& _internal_nodes(int index) const;
  ::InforGuard_::s_FileNodeInfo* _internal_add_nodes();
  public:
  const ::InforGuard_::s_FileNodeInfo& nodes(int index) const;
  ::InforGuard_::s_FileNodeInfo* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::s_FileNodeInfo >&
      nodes() const;

  // bytes id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.RemoteDirectory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::s_FileNodeInfo > nodes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Metadata_2eproto;
};
// -------------------------------------------------------------------

class MsgBlock PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.MsgBlock) */ {
 public:
  inline MsgBlock() : MsgBlock(nullptr) {};
  virtual ~MsgBlock();

  MsgBlock(const MsgBlock& from);
  MsgBlock(MsgBlock&& from) noexcept
    : MsgBlock() {
    *this = ::std::move(from);
  }

  inline MsgBlock& operator=(const MsgBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgBlock& operator=(MsgBlock&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgBlock* internal_default_instance() {
    return reinterpret_cast<const MsgBlock*>(
               &_MsgBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MsgBlock& a, MsgBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgBlock* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgBlock* New() const final {
    return CreateMaybeMessage<MsgBlock>(nullptr);
  }

  MsgBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgBlock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgBlock& from);
  void MergeFrom(const MsgBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgBlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.MsgBlock";
  }
  protected:
  explicit MsgBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Metadata_2eproto);
    return ::descriptor_table_Metadata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlFieldNumber = 6,
    kSrcFieldNumber = 4,
    kDstFieldNumber = 5,
    kMidFieldNumber = 1,
    kLevelFieldNumber = 2,
    kSerialFieldNumber = 3,
  };
  // repeated bytes pl = 6;
  int pl_size() const;
  private:
  int _internal_pl_size() const;
  public:
  void clear_pl();
  const std::string& pl(int index) const;
  std::string* mutable_pl(int index);
  void set_pl(int index, const std::string& value);
  void set_pl(int index, std::string&& value);
  void set_pl(int index, const char* value);
  void set_pl(int index, const void* value, size_t size);
  std::string* add_pl();
  void add_pl(const std::string& value);
  void add_pl(std::string&& value);
  void add_pl(const char* value);
  void add_pl(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pl() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pl();
  private:
  const std::string& _internal_pl(int index) const;
  std::string* _internal_add_pl();
  public:

  // bytes src = 4;
  void clear_src();
  const std::string& src() const;
  void set_src(const std::string& value);
  void set_src(std::string&& value);
  void set_src(const char* value);
  void set_src(const void* value, size_t size);
  std::string* mutable_src();
  std::string* release_src();
  void set_allocated_src(std::string* src);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_src();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_src(
      std::string* src);
  private:
  const std::string& _internal_src() const;
  void _internal_set_src(const std::string& value);
  std::string* _internal_mutable_src();
  public:

  // bytes dst = 5;
  void clear_dst();
  const std::string& dst() const;
  void set_dst(const std::string& value);
  void set_dst(std::string&& value);
  void set_dst(const char* value);
  void set_dst(const void* value, size_t size);
  std::string* mutable_dst();
  std::string* release_dst();
  void set_allocated_dst(std::string* dst);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dst();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dst(
      std::string* dst);
  private:
  const std::string& _internal_dst() const;
  void _internal_set_dst(const std::string& value);
  std::string* _internal_mutable_dst();
  public:

  // int32 mid = 1;
  void clear_mid();
  ::PROTOBUF_NAMESPACE_ID::int32 mid() const;
  void set_mid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mid() const;
  void _internal_set_mid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level = 2;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 serial = 3;
  void clear_serial();
  ::PROTOBUF_NAMESPACE_ID::int32 serial() const;
  void set_serial(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serial() const;
  void _internal_set_serial(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.MsgBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dst_;
  ::PROTOBUF_NAMESPACE_ID::int32 mid_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 serial_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Metadata_2eproto;
};
// -------------------------------------------------------------------

class CheckReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.CheckReq) */ {
 public:
  inline CheckReq() : CheckReq(nullptr) {};
  virtual ~CheckReq();

  CheckReq(const CheckReq& from);
  CheckReq(CheckReq&& from) noexcept
    : CheckReq() {
    *this = ::std::move(from);
  }

  inline CheckReq& operator=(const CheckReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckReq& operator=(CheckReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckReq* internal_default_instance() {
    return reinterpret_cast<const CheckReq*>(
               &_CheckReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CheckReq& a, CheckReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckReq* New() const final {
    return CreateMaybeMessage<CheckReq>(nullptr);
  }

  CheckReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckReq& from);
  void MergeFrom(const CheckReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.CheckReq";
  }
  protected:
  explicit CheckReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Metadata_2eproto);
    return ::descriptor_table_Metadata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheckFieldNumber = 1,
  };
  // bool check = 1;
  void clear_check();
  bool check() const;
  void set_check(bool value);
  private:
  bool _internal_check() const;
  void _internal_set_check(bool value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.CheckReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool check_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Metadata_2eproto;
};
// -------------------------------------------------------------------

class CheckRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.CheckRes) */ {
 public:
  inline CheckRes() : CheckRes(nullptr) {};
  virtual ~CheckRes();

  CheckRes(const CheckRes& from);
  CheckRes(CheckRes&& from) noexcept
    : CheckRes() {
    *this = ::std::move(from);
  }

  inline CheckRes& operator=(const CheckRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckRes& operator=(CheckRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckRes* internal_default_instance() {
    return reinterpret_cast<const CheckRes*>(
               &_CheckRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CheckRes& a, CheckRes& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckRes* New() const final {
    return CreateMaybeMessage<CheckRes>(nullptr);
  }

  CheckRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckRes& from);
  void MergeFrom(const CheckRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.CheckRes";
  }
  protected:
  explicit CheckRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Metadata_2eproto);
    return ::descriptor_table_Metadata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExFieldNumber = 1,
    kRetFieldNumber = 2,
  };
  // .InforGuard_.ExceptionError ex = 1;
  bool has_ex() const;
  private:
  bool _internal_has_ex() const;
  public:
  void clear_ex();
  const ::InforGuard_::ExceptionError& ex() const;
  ::InforGuard_::ExceptionError* release_ex();
  ::InforGuard_::ExceptionError* mutable_ex();
  void set_allocated_ex(::InforGuard_::ExceptionError* ex);
  private:
  const ::InforGuard_::ExceptionError& _internal_ex() const;
  ::InforGuard_::ExceptionError* _internal_mutable_ex();
  public:
  void unsafe_arena_set_allocated_ex(
      ::InforGuard_::ExceptionError* ex);
  ::InforGuard_::ExceptionError* unsafe_arena_release_ex();

  // int32 ret = 2;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.CheckRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::InforGuard_::ExceptionError* ex_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Metadata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// netCallData

// int32 nThreadId = 1;
inline void netCallData::clear_nthreadid() {
  nthreadid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 netCallData::_internal_nthreadid() const {
  return nthreadid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 netCallData::nthreadid() const {
  // @@protoc_insertion_point(field_get:InforGuard_.netCallData.nThreadId)
  return _internal_nthreadid();
}
inline void netCallData::_internal_set_nthreadid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nthreadid_ = value;
}
inline void netCallData::set_nthreadid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nthreadid(value);
  // @@protoc_insertion_point(field_set:InforGuard_.netCallData.nThreadId)
}

// bytes sIp = 2;
inline void netCallData::clear_sip() {
  sip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& netCallData::sip() const {
  // @@protoc_insertion_point(field_get:InforGuard_.netCallData.sIp)
  return _internal_sip();
}
inline void netCallData::set_sip(const std::string& value) {
  _internal_set_sip(value);
  // @@protoc_insertion_point(field_set:InforGuard_.netCallData.sIp)
}
inline std::string* netCallData::mutable_sip() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.netCallData.sIp)
  return _internal_mutable_sip();
}
inline const std::string& netCallData::_internal_sip() const {
  return sip_.Get();
}
inline void netCallData::_internal_set_sip(const std::string& value) {
  
  sip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void netCallData::set_sip(std::string&& value) {
  
  sip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.netCallData.sIp)
}
inline void netCallData::set_sip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.netCallData.sIp)
}
inline void netCallData::set_sip(const void* value,
    size_t size) {
  
  sip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.netCallData.sIp)
}
inline std::string* netCallData::_internal_mutable_sip() {
  
  return sip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* netCallData::release_sip() {
  // @@protoc_insertion_point(field_release:InforGuard_.netCallData.sIp)
  return sip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void netCallData::set_allocated_sip(std::string* sip) {
  if (sip != nullptr) {
    
  } else {
    
  }
  sip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.netCallData.sIp)
}
inline std::string* netCallData::unsafe_arena_release_sip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.netCallData.sIp)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void netCallData::unsafe_arena_set_allocated_sip(
    std::string* sip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sip != nullptr) {
    
  } else {
    
  }
  sip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.netCallData.sIp)
}

// int32 sPort = 3;
inline void netCallData::clear_sport() {
  sport_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 netCallData::_internal_sport() const {
  return sport_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 netCallData::sport() const {
  // @@protoc_insertion_point(field_get:InforGuard_.netCallData.sPort)
  return _internal_sport();
}
inline void netCallData::_internal_set_sport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sport_ = value;
}
inline void netCallData::set_sport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sport(value);
  // @@protoc_insertion_point(field_set:InforGuard_.netCallData.sPort)
}

// int32 nSerial = 4;
inline void netCallData::clear_nserial() {
  nserial_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 netCallData::_internal_nserial() const {
  return nserial_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 netCallData::nserial() const {
  // @@protoc_insertion_point(field_get:InforGuard_.netCallData.nSerial)
  return _internal_nserial();
}
inline void netCallData::_internal_set_nserial(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nserial_ = value;
}
inline void netCallData::set_nserial(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nserial(value);
  // @@protoc_insertion_point(field_set:InforGuard_.netCallData.nSerial)
}

// int32 nSubSerial = 5;
inline void netCallData::clear_nsubserial() {
  nsubserial_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 netCallData::_internal_nsubserial() const {
  return nsubserial_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 netCallData::nsubserial() const {
  // @@protoc_insertion_point(field_get:InforGuard_.netCallData.nSubSerial)
  return _internal_nsubserial();
}
inline void netCallData::_internal_set_nsubserial(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nsubserial_ = value;
}
inline void netCallData::set_nsubserial(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nsubserial(value);
  // @@protoc_insertion_point(field_set:InforGuard_.netCallData.nSubSerial)
}

// int32 nRecSerial = 6;
inline void netCallData::clear_nrecserial() {
  nrecserial_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 netCallData::_internal_nrecserial() const {
  return nrecserial_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 netCallData::nrecserial() const {
  // @@protoc_insertion_point(field_get:InforGuard_.netCallData.nRecSerial)
  return _internal_nrecserial();
}
inline void netCallData::_internal_set_nrecserial(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nrecserial_ = value;
}
inline void netCallData::set_nrecserial(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nrecserial(value);
  // @@protoc_insertion_point(field_set:InforGuard_.netCallData.nRecSerial)
}

// int32 nIndent = 7;
inline void netCallData::clear_nindent() {
  nindent_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 netCallData::_internal_nindent() const {
  return nindent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 netCallData::nindent() const {
  // @@protoc_insertion_point(field_get:InforGuard_.netCallData.nIndent)
  return _internal_nindent();
}
inline void netCallData::_internal_set_nindent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nindent_ = value;
}
inline void netCallData::set_nindent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nindent(value);
  // @@protoc_insertion_point(field_set:InforGuard_.netCallData.nIndent)
}

// -------------------------------------------------------------------

// netIpPort

// bytes sIp = 1;
inline void netIpPort::clear_sip() {
  sip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& netIpPort::sip() const {
  // @@protoc_insertion_point(field_get:InforGuard_.netIpPort.sIp)
  return _internal_sip();
}
inline void netIpPort::set_sip(const std::string& value) {
  _internal_set_sip(value);
  // @@protoc_insertion_point(field_set:InforGuard_.netIpPort.sIp)
}
inline std::string* netIpPort::mutable_sip() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.netIpPort.sIp)
  return _internal_mutable_sip();
}
inline const std::string& netIpPort::_internal_sip() const {
  return sip_.Get();
}
inline void netIpPort::_internal_set_sip(const std::string& value) {
  
  sip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void netIpPort::set_sip(std::string&& value) {
  
  sip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.netIpPort.sIp)
}
inline void netIpPort::set_sip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.netIpPort.sIp)
}
inline void netIpPort::set_sip(const void* value,
    size_t size) {
  
  sip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.netIpPort.sIp)
}
inline std::string* netIpPort::_internal_mutable_sip() {
  
  return sip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* netIpPort::release_sip() {
  // @@protoc_insertion_point(field_release:InforGuard_.netIpPort.sIp)
  return sip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void netIpPort::set_allocated_sip(std::string* sip) {
  if (sip != nullptr) {
    
  } else {
    
  }
  sip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.netIpPort.sIp)
}
inline std::string* netIpPort::unsafe_arena_release_sip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.netIpPort.sIp)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void netIpPort::unsafe_arena_set_allocated_sip(
    std::string* sip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sip != nullptr) {
    
  } else {
    
  }
  sip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.netIpPort.sIp)
}

// bytes sPort = 2;
inline void netIpPort::clear_sport() {
  sport_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& netIpPort::sport() const {
  // @@protoc_insertion_point(field_get:InforGuard_.netIpPort.sPort)
  return _internal_sport();
}
inline void netIpPort::set_sport(const std::string& value) {
  _internal_set_sport(value);
  // @@protoc_insertion_point(field_set:InforGuard_.netIpPort.sPort)
}
inline std::string* netIpPort::mutable_sport() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.netIpPort.sPort)
  return _internal_mutable_sport();
}
inline const std::string& netIpPort::_internal_sport() const {
  return sport_.Get();
}
inline void netIpPort::_internal_set_sport(const std::string& value) {
  
  sport_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void netIpPort::set_sport(std::string&& value) {
  
  sport_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.netIpPort.sPort)
}
inline void netIpPort::set_sport(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sport_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.netIpPort.sPort)
}
inline void netIpPort::set_sport(const void* value,
    size_t size) {
  
  sport_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.netIpPort.sPort)
}
inline std::string* netIpPort::_internal_mutable_sport() {
  
  return sport_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* netIpPort::release_sport() {
  // @@protoc_insertion_point(field_release:InforGuard_.netIpPort.sPort)
  return sport_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void netIpPort::set_allocated_sport(std::string* sport) {
  if (sport != nullptr) {
    
  } else {
    
  }
  sport_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sport,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.netIpPort.sPort)
}
inline std::string* netIpPort::unsafe_arena_release_sport() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.netIpPort.sPort)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sport_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void netIpPort::unsafe_arena_set_allocated_sport(
    std::string* sport) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sport != nullptr) {
    
  } else {
    
  }
  sport_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sport, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.netIpPort.sPort)
}

// -------------------------------------------------------------------

// ExceptionError

// int32 nErrCode = 1;
inline void ExceptionError::clear_nerrcode() {
  nerrcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExceptionError::_internal_nerrcode() const {
  return nerrcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExceptionError::nerrcode() const {
  // @@protoc_insertion_point(field_get:InforGuard_.ExceptionError.nErrCode)
  return _internal_nerrcode();
}
inline void ExceptionError::_internal_set_nerrcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nerrcode_ = value;
}
inline void ExceptionError::set_nerrcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nerrcode(value);
  // @@protoc_insertion_point(field_set:InforGuard_.ExceptionError.nErrCode)
}

// repeated bytes vErrText = 2;
inline int ExceptionError::_internal_verrtext_size() const {
  return verrtext_.size();
}
inline int ExceptionError::verrtext_size() const {
  return _internal_verrtext_size();
}
inline void ExceptionError::clear_verrtext() {
  verrtext_.Clear();
}
inline std::string* ExceptionError::add_verrtext() {
  // @@protoc_insertion_point(field_add_mutable:InforGuard_.ExceptionError.vErrText)
  return _internal_add_verrtext();
}
inline const std::string& ExceptionError::_internal_verrtext(int index) const {
  return verrtext_.Get(index);
}
inline const std::string& ExceptionError::verrtext(int index) const {
  // @@protoc_insertion_point(field_get:InforGuard_.ExceptionError.vErrText)
  return _internal_verrtext(index);
}
inline std::string* ExceptionError::mutable_verrtext(int index) {
  // @@protoc_insertion_point(field_mutable:InforGuard_.ExceptionError.vErrText)
  return verrtext_.Mutable(index);
}
inline void ExceptionError::set_verrtext(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:InforGuard_.ExceptionError.vErrText)
  verrtext_.Mutable(index)->assign(value);
}
inline void ExceptionError::set_verrtext(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:InforGuard_.ExceptionError.vErrText)
  verrtext_.Mutable(index)->assign(std::move(value));
}
inline void ExceptionError::set_verrtext(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  verrtext_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:InforGuard_.ExceptionError.vErrText)
}
inline void ExceptionError::set_verrtext(int index, const void* value, size_t size) {
  verrtext_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.ExceptionError.vErrText)
}
inline std::string* ExceptionError::_internal_add_verrtext() {
  return verrtext_.Add();
}
inline void ExceptionError::add_verrtext(const std::string& value) {
  verrtext_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:InforGuard_.ExceptionError.vErrText)
}
inline void ExceptionError::add_verrtext(std::string&& value) {
  verrtext_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:InforGuard_.ExceptionError.vErrText)
}
inline void ExceptionError::add_verrtext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  verrtext_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:InforGuard_.ExceptionError.vErrText)
}
inline void ExceptionError::add_verrtext(const void* value, size_t size) {
  verrtext_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:InforGuard_.ExceptionError.vErrText)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ExceptionError::verrtext() const {
  // @@protoc_insertion_point(field_list:InforGuard_.ExceptionError.vErrText)
  return verrtext_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ExceptionError::mutable_verrtext() {
  // @@protoc_insertion_point(field_mutable_list:InforGuard_.ExceptionError.vErrText)
  return &verrtext_;
}

// -------------------------------------------------------------------

// NetFileTreeNode

// bytes name = 1;
inline void NetFileTreeNode::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NetFileTreeNode::name() const {
  // @@protoc_insertion_point(field_get:InforGuard_.NetFileTreeNode.name)
  return _internal_name();
}
inline void NetFileTreeNode::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:InforGuard_.NetFileTreeNode.name)
}
inline std::string* NetFileTreeNode::mutable_name() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.NetFileTreeNode.name)
  return _internal_mutable_name();
}
inline const std::string& NetFileTreeNode::_internal_name() const {
  return name_.Get();
}
inline void NetFileTreeNode::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NetFileTreeNode::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.NetFileTreeNode.name)
}
inline void NetFileTreeNode::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.NetFileTreeNode.name)
}
inline void NetFileTreeNode::set_name(const void* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.NetFileTreeNode.name)
}
inline std::string* NetFileTreeNode::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NetFileTreeNode::release_name() {
  // @@protoc_insertion_point(field_release:InforGuard_.NetFileTreeNode.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetFileTreeNode::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.NetFileTreeNode.name)
}
inline std::string* NetFileTreeNode::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.NetFileTreeNode.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NetFileTreeNode::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.NetFileTreeNode.name)
}

// int32 size = 2;
inline void NetFileTreeNode::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetFileTreeNode::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetFileTreeNode::size() const {
  // @@protoc_insertion_point(field_get:InforGuard_.NetFileTreeNode.size)
  return _internal_size();
}
inline void NetFileTreeNode::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
}
inline void NetFileTreeNode::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:InforGuard_.NetFileTreeNode.size)
}

// int32 time = 3;
inline void NetFileTreeNode::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetFileTreeNode::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetFileTreeNode::time() const {
  // @@protoc_insertion_point(field_get:InforGuard_.NetFileTreeNode.time)
  return _internal_time();
}
inline void NetFileTreeNode::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void NetFileTreeNode::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:InforGuard_.NetFileTreeNode.time)
}

// bool isfolder = 4;
inline void NetFileTreeNode::clear_isfolder() {
  isfolder_ = false;
}
inline bool NetFileTreeNode::_internal_isfolder() const {
  return isfolder_;
}
inline bool NetFileTreeNode::isfolder() const {
  // @@protoc_insertion_point(field_get:InforGuard_.NetFileTreeNode.isfolder)
  return _internal_isfolder();
}
inline void NetFileTreeNode::_internal_set_isfolder(bool value) {
  
  isfolder_ = value;
}
inline void NetFileTreeNode::set_isfolder(bool value) {
  _internal_set_isfolder(value);
  // @@protoc_insertion_point(field_set:InforGuard_.NetFileTreeNode.isfolder)
}

// -------------------------------------------------------------------

// NetFileListNode

// bytes name = 1;
inline void NetFileListNode::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NetFileListNode::name() const {
  // @@protoc_insertion_point(field_get:InforGuard_.NetFileListNode.name)
  return _internal_name();
}
inline void NetFileListNode::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:InforGuard_.NetFileListNode.name)
}
inline std::string* NetFileListNode::mutable_name() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.NetFileListNode.name)
  return _internal_mutable_name();
}
inline const std::string& NetFileListNode::_internal_name() const {
  return name_.Get();
}
inline void NetFileListNode::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NetFileListNode::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.NetFileListNode.name)
}
inline void NetFileListNode::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.NetFileListNode.name)
}
inline void NetFileListNode::set_name(const void* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.NetFileListNode.name)
}
inline std::string* NetFileListNode::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NetFileListNode::release_name() {
  // @@protoc_insertion_point(field_release:InforGuard_.NetFileListNode.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetFileListNode::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.NetFileListNode.name)
}
inline std::string* NetFileListNode::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.NetFileListNode.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NetFileListNode::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.NetFileListNode.name)
}

// int32 size = 2;
inline void NetFileListNode::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetFileListNode::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetFileListNode::size() const {
  // @@protoc_insertion_point(field_get:InforGuard_.NetFileListNode.size)
  return _internal_size();
}
inline void NetFileListNode::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
}
inline void NetFileListNode::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:InforGuard_.NetFileListNode.size)
}

// int32 time = 3;
inline void NetFileListNode::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetFileListNode::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetFileListNode::time() const {
  // @@protoc_insertion_point(field_get:InforGuard_.NetFileListNode.time)
  return _internal_time();
}
inline void NetFileListNode::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void NetFileListNode::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:InforGuard_.NetFileListNode.time)
}

// bool isfolder = 4;
inline void NetFileListNode::clear_isfolder() {
  isfolder_ = false;
}
inline bool NetFileListNode::_internal_isfolder() const {
  return isfolder_;
}
inline bool NetFileListNode::isfolder() const {
  // @@protoc_insertion_point(field_get:InforGuard_.NetFileListNode.isfolder)
  return _internal_isfolder();
}
inline void NetFileListNode::_internal_set_isfolder(bool value) {
  
  isfolder_ = value;
}
inline void NetFileListNode::set_isfolder(bool value) {
  _internal_set_isfolder(value);
  // @@protoc_insertion_point(field_set:InforGuard_.NetFileListNode.isfolder)
}

// -------------------------------------------------------------------

// s_FileNodeInfo

// bytes name = 1;
inline void s_FileNodeInfo::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& s_FileNodeInfo::name() const {
  // @@protoc_insertion_point(field_get:InforGuard_.s_FileNodeInfo.name)
  return _internal_name();
}
inline void s_FileNodeInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:InforGuard_.s_FileNodeInfo.name)
}
inline std::string* s_FileNodeInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.s_FileNodeInfo.name)
  return _internal_mutable_name();
}
inline const std::string& s_FileNodeInfo::_internal_name() const {
  return name_.Get();
}
inline void s_FileNodeInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void s_FileNodeInfo::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.s_FileNodeInfo.name)
}
inline void s_FileNodeInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.s_FileNodeInfo.name)
}
inline void s_FileNodeInfo::set_name(const void* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.s_FileNodeInfo.name)
}
inline std::string* s_FileNodeInfo::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* s_FileNodeInfo::release_name() {
  // @@protoc_insertion_point(field_release:InforGuard_.s_FileNodeInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void s_FileNodeInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.s_FileNodeInfo.name)
}
inline std::string* s_FileNodeInfo::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.s_FileNodeInfo.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void s_FileNodeInfo::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.s_FileNodeInfo.name)
}

// bool isfile = 2;
inline void s_FileNodeInfo::clear_isfile() {
  isfile_ = false;
}
inline bool s_FileNodeInfo::_internal_isfile() const {
  return isfile_;
}
inline bool s_FileNodeInfo::isfile() const {
  // @@protoc_insertion_point(field_get:InforGuard_.s_FileNodeInfo.isfile)
  return _internal_isfile();
}
inline void s_FileNodeInfo::_internal_set_isfile(bool value) {
  
  isfile_ = value;
}
inline void s_FileNodeInfo::set_isfile(bool value) {
  _internal_set_isfile(value);
  // @@protoc_insertion_point(field_set:InforGuard_.s_FileNodeInfo.isfile)
}

// int32 mtime = 3;
inline void s_FileNodeInfo::clear_mtime() {
  mtime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 s_FileNodeInfo::_internal_mtime() const {
  return mtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 s_FileNodeInfo::mtime() const {
  // @@protoc_insertion_point(field_get:InforGuard_.s_FileNodeInfo.mtime)
  return _internal_mtime();
}
inline void s_FileNodeInfo::_internal_set_mtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mtime_ = value;
}
inline void s_FileNodeInfo::set_mtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mtime(value);
  // @@protoc_insertion_point(field_set:InforGuard_.s_FileNodeInfo.mtime)
}

// int32 type = 4;
inline void s_FileNodeInfo::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 s_FileNodeInfo::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 s_FileNodeInfo::type() const {
  // @@protoc_insertion_point(field_get:InforGuard_.s_FileNodeInfo.type)
  return _internal_type();
}
inline void s_FileNodeInfo::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void s_FileNodeInfo::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:InforGuard_.s_FileNodeInfo.type)
}

// -------------------------------------------------------------------

// RemoteDirectory

// repeated .InforGuard_.s_FileNodeInfo nodes = 1;
inline int RemoteDirectory::_internal_nodes_size() const {
  return nodes_.size();
}
inline int RemoteDirectory::nodes_size() const {
  return _internal_nodes_size();
}
inline void RemoteDirectory::clear_nodes() {
  nodes_.Clear();
}
inline ::InforGuard_::s_FileNodeInfo* RemoteDirectory::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:InforGuard_.RemoteDirectory.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::s_FileNodeInfo >*
RemoteDirectory::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:InforGuard_.RemoteDirectory.nodes)
  return &nodes_;
}
inline const ::InforGuard_::s_FileNodeInfo& RemoteDirectory::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const ::InforGuard_::s_FileNodeInfo& RemoteDirectory::nodes(int index) const {
  // @@protoc_insertion_point(field_get:InforGuard_.RemoteDirectory.nodes)
  return _internal_nodes(index);
}
inline ::InforGuard_::s_FileNodeInfo* RemoteDirectory::_internal_add_nodes() {
  return nodes_.Add();
}
inline ::InforGuard_::s_FileNodeInfo* RemoteDirectory::add_nodes() {
  // @@protoc_insertion_point(field_add:InforGuard_.RemoteDirectory.nodes)
  return _internal_add_nodes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::s_FileNodeInfo >&
RemoteDirectory::nodes() const {
  // @@protoc_insertion_point(field_list:InforGuard_.RemoteDirectory.nodes)
  return nodes_;
}

// bytes id = 2;
inline void RemoteDirectory::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoteDirectory::id() const {
  // @@protoc_insertion_point(field_get:InforGuard_.RemoteDirectory.id)
  return _internal_id();
}
inline void RemoteDirectory::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:InforGuard_.RemoteDirectory.id)
}
inline std::string* RemoteDirectory::mutable_id() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.RemoteDirectory.id)
  return _internal_mutable_id();
}
inline const std::string& RemoteDirectory::_internal_id() const {
  return id_.Get();
}
inline void RemoteDirectory::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoteDirectory::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.RemoteDirectory.id)
}
inline void RemoteDirectory::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.RemoteDirectory.id)
}
inline void RemoteDirectory::set_id(const void* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.RemoteDirectory.id)
}
inline std::string* RemoteDirectory::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoteDirectory::release_id() {
  // @@protoc_insertion_point(field_release:InforGuard_.RemoteDirectory.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoteDirectory::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.RemoteDirectory.id)
}
inline std::string* RemoteDirectory::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.RemoteDirectory.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RemoteDirectory::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.RemoteDirectory.id)
}

// -------------------------------------------------------------------

// MsgBlock

// int32 mid = 1;
inline void MsgBlock::clear_mid() {
  mid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgBlock::_internal_mid() const {
  return mid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgBlock::mid() const {
  // @@protoc_insertion_point(field_get:InforGuard_.MsgBlock.mid)
  return _internal_mid();
}
inline void MsgBlock::_internal_set_mid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mid_ = value;
}
inline void MsgBlock::set_mid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mid(value);
  // @@protoc_insertion_point(field_set:InforGuard_.MsgBlock.mid)
}

// int32 level = 2;
inline void MsgBlock::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgBlock::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgBlock::level() const {
  // @@protoc_insertion_point(field_get:InforGuard_.MsgBlock.level)
  return _internal_level();
}
inline void MsgBlock::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void MsgBlock::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:InforGuard_.MsgBlock.level)
}

// int32 serial = 3;
inline void MsgBlock::clear_serial() {
  serial_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgBlock::_internal_serial() const {
  return serial_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgBlock::serial() const {
  // @@protoc_insertion_point(field_get:InforGuard_.MsgBlock.serial)
  return _internal_serial();
}
inline void MsgBlock::_internal_set_serial(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serial_ = value;
}
inline void MsgBlock::set_serial(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serial(value);
  // @@protoc_insertion_point(field_set:InforGuard_.MsgBlock.serial)
}

// bytes src = 4;
inline void MsgBlock::clear_src() {
  src_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MsgBlock::src() const {
  // @@protoc_insertion_point(field_get:InforGuard_.MsgBlock.src)
  return _internal_src();
}
inline void MsgBlock::set_src(const std::string& value) {
  _internal_set_src(value);
  // @@protoc_insertion_point(field_set:InforGuard_.MsgBlock.src)
}
inline std::string* MsgBlock::mutable_src() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.MsgBlock.src)
  return _internal_mutable_src();
}
inline const std::string& MsgBlock::_internal_src() const {
  return src_.Get();
}
inline void MsgBlock::_internal_set_src(const std::string& value) {
  
  src_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MsgBlock::set_src(std::string&& value) {
  
  src_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.MsgBlock.src)
}
inline void MsgBlock::set_src(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  src_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.MsgBlock.src)
}
inline void MsgBlock::set_src(const void* value,
    size_t size) {
  
  src_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.MsgBlock.src)
}
inline std::string* MsgBlock::_internal_mutable_src() {
  
  return src_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MsgBlock::release_src() {
  // @@protoc_insertion_point(field_release:InforGuard_.MsgBlock.src)
  return src_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgBlock::set_allocated_src(std::string* src) {
  if (src != nullptr) {
    
  } else {
    
  }
  src_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.MsgBlock.src)
}
inline std::string* MsgBlock::unsafe_arena_release_src() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.MsgBlock.src)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return src_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MsgBlock::unsafe_arena_set_allocated_src(
    std::string* src) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (src != nullptr) {
    
  } else {
    
  }
  src_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      src, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.MsgBlock.src)
}

// bytes dst = 5;
inline void MsgBlock::clear_dst() {
  dst_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MsgBlock::dst() const {
  // @@protoc_insertion_point(field_get:InforGuard_.MsgBlock.dst)
  return _internal_dst();
}
inline void MsgBlock::set_dst(const std::string& value) {
  _internal_set_dst(value);
  // @@protoc_insertion_point(field_set:InforGuard_.MsgBlock.dst)
}
inline std::string* MsgBlock::mutable_dst() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.MsgBlock.dst)
  return _internal_mutable_dst();
}
inline const std::string& MsgBlock::_internal_dst() const {
  return dst_.Get();
}
inline void MsgBlock::_internal_set_dst(const std::string& value) {
  
  dst_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MsgBlock::set_dst(std::string&& value) {
  
  dst_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.MsgBlock.dst)
}
inline void MsgBlock::set_dst(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dst_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.MsgBlock.dst)
}
inline void MsgBlock::set_dst(const void* value,
    size_t size) {
  
  dst_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.MsgBlock.dst)
}
inline std::string* MsgBlock::_internal_mutable_dst() {
  
  return dst_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MsgBlock::release_dst() {
  // @@protoc_insertion_point(field_release:InforGuard_.MsgBlock.dst)
  return dst_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgBlock::set_allocated_dst(std::string* dst) {
  if (dst != nullptr) {
    
  } else {
    
  }
  dst_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dst,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.MsgBlock.dst)
}
inline std::string* MsgBlock::unsafe_arena_release_dst() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.MsgBlock.dst)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dst_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MsgBlock::unsafe_arena_set_allocated_dst(
    std::string* dst) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dst != nullptr) {
    
  } else {
    
  }
  dst_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dst, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.MsgBlock.dst)
}

// repeated bytes pl = 6;
inline int MsgBlock::_internal_pl_size() const {
  return pl_.size();
}
inline int MsgBlock::pl_size() const {
  return _internal_pl_size();
}
inline void MsgBlock::clear_pl() {
  pl_.Clear();
}
inline std::string* MsgBlock::add_pl() {
  // @@protoc_insertion_point(field_add_mutable:InforGuard_.MsgBlock.pl)
  return _internal_add_pl();
}
inline const std::string& MsgBlock::_internal_pl(int index) const {
  return pl_.Get(index);
}
inline const std::string& MsgBlock::pl(int index) const {
  // @@protoc_insertion_point(field_get:InforGuard_.MsgBlock.pl)
  return _internal_pl(index);
}
inline std::string* MsgBlock::mutable_pl(int index) {
  // @@protoc_insertion_point(field_mutable:InforGuard_.MsgBlock.pl)
  return pl_.Mutable(index);
}
inline void MsgBlock::set_pl(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:InforGuard_.MsgBlock.pl)
  pl_.Mutable(index)->assign(value);
}
inline void MsgBlock::set_pl(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:InforGuard_.MsgBlock.pl)
  pl_.Mutable(index)->assign(std::move(value));
}
inline void MsgBlock::set_pl(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pl_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:InforGuard_.MsgBlock.pl)
}
inline void MsgBlock::set_pl(int index, const void* value, size_t size) {
  pl_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.MsgBlock.pl)
}
inline std::string* MsgBlock::_internal_add_pl() {
  return pl_.Add();
}
inline void MsgBlock::add_pl(const std::string& value) {
  pl_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:InforGuard_.MsgBlock.pl)
}
inline void MsgBlock::add_pl(std::string&& value) {
  pl_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:InforGuard_.MsgBlock.pl)
}
inline void MsgBlock::add_pl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pl_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:InforGuard_.MsgBlock.pl)
}
inline void MsgBlock::add_pl(const void* value, size_t size) {
  pl_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:InforGuard_.MsgBlock.pl)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MsgBlock::pl() const {
  // @@protoc_insertion_point(field_list:InforGuard_.MsgBlock.pl)
  return pl_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MsgBlock::mutable_pl() {
  // @@protoc_insertion_point(field_mutable_list:InforGuard_.MsgBlock.pl)
  return &pl_;
}

// -------------------------------------------------------------------

// CheckReq

// bool check = 1;
inline void CheckReq::clear_check() {
  check_ = false;
}
inline bool CheckReq::_internal_check() const {
  return check_;
}
inline bool CheckReq::check() const {
  // @@protoc_insertion_point(field_get:InforGuard_.CheckReq.check)
  return _internal_check();
}
inline void CheckReq::_internal_set_check(bool value) {
  
  check_ = value;
}
inline void CheckReq::set_check(bool value) {
  _internal_set_check(value);
  // @@protoc_insertion_point(field_set:InforGuard_.CheckReq.check)
}

// -------------------------------------------------------------------

// CheckRes

// .InforGuard_.ExceptionError ex = 1;
inline bool CheckRes::_internal_has_ex() const {
  return this != internal_default_instance() && ex_ != nullptr;
}
inline bool CheckRes::has_ex() const {
  return _internal_has_ex();
}
inline void CheckRes::clear_ex() {
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
}
inline const ::InforGuard_::ExceptionError& CheckRes::_internal_ex() const {
  const ::InforGuard_::ExceptionError* p = ex_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::ExceptionError*>(
      &::InforGuard_::_ExceptionError_default_instance_);
}
inline const ::InforGuard_::ExceptionError& CheckRes::ex() const {
  // @@protoc_insertion_point(field_get:InforGuard_.CheckRes.ex)
  return _internal_ex();
}
inline void CheckRes::unsafe_arena_set_allocated_ex(
    ::InforGuard_::ExceptionError* ex) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  ex_ = ex;
  if (ex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.CheckRes.ex)
}
inline ::InforGuard_::ExceptionError* CheckRes::release_ex() {
  auto temp = unsafe_arena_release_ex();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::ExceptionError* CheckRes::unsafe_arena_release_ex() {
  // @@protoc_insertion_point(field_release:InforGuard_.CheckRes.ex)
  
  ::InforGuard_::ExceptionError* temp = ex_;
  ex_ = nullptr;
  return temp;
}
inline ::InforGuard_::ExceptionError* CheckRes::_internal_mutable_ex() {
  
  if (ex_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::ExceptionError>(GetArena());
    ex_ = p;
  }
  return ex_;
}
inline ::InforGuard_::ExceptionError* CheckRes::mutable_ex() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.CheckRes.ex)
  return _internal_mutable_ex();
}
inline void CheckRes::set_allocated_ex(::InforGuard_::ExceptionError* ex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ex_;
  }
  if (ex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ex);
    if (message_arena != submessage_arena) {
      ex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ex, submessage_arena);
    }
    
  } else {
    
  }
  ex_ = ex;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.CheckRes.ex)
}

// int32 ret = 2;
inline void CheckRes::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CheckRes::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CheckRes::ret() const {
  // @@protoc_insertion_point(field_get:InforGuard_.CheckRes.ret)
  return _internal_ret();
}
inline void CheckRes::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void CheckRes::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:InforGuard_.CheckRes.ret)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace InforGuard_

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Metadata_2eproto
