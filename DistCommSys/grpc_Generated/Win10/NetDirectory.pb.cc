// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NetDirectory.proto

#include "NetDirectory.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Metadata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExceptionError_Metadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Metadata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetFileListNode_Metadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Metadata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetFileTreeNode_Metadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Metadata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_netCallData_Metadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Metadata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_netIpPort_Metadata_2eproto;
namespace InforGuard_ {
class GetTreeReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTreeReq> _instance;
} _GetTreeReq_default_instance_;
class GetTreeResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTreeRes> _instance;
} _GetTreeRes_default_instance_;
class GetListReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetListReq> _instance;
} _GetListReq_default_instance_;
class GetListResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetListRes> _instance;
} _GetListRes_default_instance_;
class GetTreeExReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTreeExReq> _instance;
} _GetTreeExReq_default_instance_;
class GetTreeExResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTreeExRes> _instance;
} _GetTreeExRes_default_instance_;
class GetListExReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetListExReq> _instance;
} _GetListExReq_default_instance_;
class GetListExResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetListExRes> _instance;
} _GetListExRes_default_instance_;
}  // namespace InforGuard_
static void InitDefaultsscc_info_GetListExReq_NetDirectory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_GetListExReq_default_instance_;
    new (ptr) ::InforGuard_::GetListExReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::GetListExReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetListExReq_NetDirectory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetListExReq_NetDirectory_2eproto}, {
      &scc_info_netIpPort_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_GetListExRes_NetDirectory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_GetListExRes_default_instance_;
    new (ptr) ::InforGuard_::GetListExRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::GetListExRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetListExRes_NetDirectory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetListExRes_NetDirectory_2eproto}, {
      &scc_info_ExceptionError_Metadata_2eproto.base,
      &scc_info_NetFileListNode_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_GetListReq_NetDirectory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_GetListReq_default_instance_;
    new (ptr) ::InforGuard_::GetListReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::GetListReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetListReq_NetDirectory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetListReq_NetDirectory_2eproto}, {
      &scc_info_netCallData_Metadata_2eproto.base,
      &scc_info_netIpPort_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_GetListRes_NetDirectory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_GetListRes_default_instance_;
    new (ptr) ::InforGuard_::GetListRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::GetListRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetListRes_NetDirectory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GetListRes_NetDirectory_2eproto}, {
      &scc_info_netCallData_Metadata_2eproto.base,
      &scc_info_ExceptionError_Metadata_2eproto.base,
      &scc_info_NetFileListNode_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_GetTreeExReq_NetDirectory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_GetTreeExReq_default_instance_;
    new (ptr) ::InforGuard_::GetTreeExReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::GetTreeExReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetTreeExReq_NetDirectory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetTreeExReq_NetDirectory_2eproto}, {
      &scc_info_netIpPort_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_GetTreeExRes_NetDirectory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_GetTreeExRes_default_instance_;
    new (ptr) ::InforGuard_::GetTreeExRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::GetTreeExRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetTreeExRes_NetDirectory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetTreeExRes_NetDirectory_2eproto}, {
      &scc_info_ExceptionError_Metadata_2eproto.base,
      &scc_info_NetFileTreeNode_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_GetTreeReq_NetDirectory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_GetTreeReq_default_instance_;
    new (ptr) ::InforGuard_::GetTreeReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::GetTreeReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetTreeReq_NetDirectory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetTreeReq_NetDirectory_2eproto}, {
      &scc_info_netCallData_Metadata_2eproto.base,
      &scc_info_netIpPort_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_GetTreeRes_NetDirectory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_GetTreeRes_default_instance_;
    new (ptr) ::InforGuard_::GetTreeRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::GetTreeRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetTreeRes_NetDirectory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GetTreeRes_NetDirectory_2eproto}, {
      &scc_info_netCallData_Metadata_2eproto.base,
      &scc_info_ExceptionError_Metadata_2eproto.base,
      &scc_info_NetFileTreeNode_Metadata_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_NetDirectory_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_NetDirectory_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_NetDirectory_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_NetDirectory_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetTreeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetTreeReq, call_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetTreeReq, seqipport_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetTreeReq, remotefoldername_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetTreeReq, mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetTreeRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetTreeRes, call_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetTreeRes, ex_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetTreeRes, treenode_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetTreeRes, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetListReq, call_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetListReq, seqipport_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetListReq, remotefoldername_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetListReq, mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetListRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetListRes, call_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetListRes, ex_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetListRes, filelist_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetListRes, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetTreeExReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetTreeExReq, seqipport_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetTreeExReq, remotefoldername_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetTreeExReq, mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetTreeExRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetTreeExRes, ex_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetTreeExRes, treenode_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetTreeExRes, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetListExReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetListExReq, seqipport_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetListExReq, remotefoldername_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetListExReq, mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetListExRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetListExRes, ex_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetListExRes, filelist_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetListExRes, ret_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::InforGuard_::GetTreeReq)},
  { 9, -1, sizeof(::InforGuard_::GetTreeRes)},
  { 18, -1, sizeof(::InforGuard_::GetListReq)},
  { 27, -1, sizeof(::InforGuard_::GetListRes)},
  { 36, -1, sizeof(::InforGuard_::GetTreeExReq)},
  { 44, -1, sizeof(::InforGuard_::GetTreeExRes)},
  { 52, -1, sizeof(::InforGuard_::GetListExReq)},
  { 60, -1, sizeof(::InforGuard_::GetListExRes)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_GetTreeReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_GetTreeRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_GetListReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_GetListRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_GetTreeExReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_GetTreeExRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_GetListExReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_GetListExRes_default_instance_),
};

const char descriptor_table_protodef_NetDirectory_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022NetDirectory.proto\022\013InforGuard_\032\016Metad"
  "ata.proto\"\207\001\n\nGetTreeReq\022&\n\004call\030\001 \001(\0132\030"
  ".InforGuard_.netCallData\022)\n\tseqIpPort\030\002 "
  "\003(\0132\026.InforGuard_.netIpPort\022\030\n\020remotefol"
  "dername\030\003 \001(\014\022\014\n\004mode\030\004 \001(\005\"\232\001\n\nGetTreeR"
  "es\022&\n\004call\030\001 \001(\0132\030.InforGuard_.netCallDa"
  "ta\022\'\n\002ex\030\002 \001(\0132\033.InforGuard_.ExceptionEr"
  "ror\022.\n\010treenode\030\003 \003(\0132\034.InforGuard_.NetF"
  "ileTreeNode\022\013\n\003ret\030\004 \001(\005\"\207\001\n\nGetListReq\022"
  "&\n\004call\030\001 \001(\0132\030.InforGuard_.netCallData\022"
  ")\n\tseqIpPort\030\002 \003(\0132\026.InforGuard_.netIpPo"
  "rt\022\030\n\020remotefoldername\030\003 \001(\014\022\014\n\004mode\030\004 \001"
  "(\005\"\232\001\n\nGetListRes\022&\n\004call\030\001 \001(\0132\030.InforG"
  "uard_.netCallData\022\'\n\002ex\030\002 \001(\0132\033.InforGua"
  "rd_.ExceptionError\022.\n\010filelist\030\003 \003(\0132\034.I"
  "nforGuard_.NetFileListNode\022\013\n\003ret\030\004 \001(\005\""
  "a\n\014GetTreeExReq\022)\n\tseqIpPort\030\001 \003(\0132\026.Inf"
  "orGuard_.netIpPort\022\030\n\020remotefoldername\030\002"
  " \001(\014\022\014\n\004mode\030\003 \001(\005\"t\n\014GetTreeExRes\022\'\n\002ex"
  "\030\001 \001(\0132\033.InforGuard_.ExceptionError\022.\n\010t"
  "reenode\030\002 \003(\0132\034.InforGuard_.NetFileTreeN"
  "ode\022\013\n\003ret\030\003 \001(\005\"a\n\014GetListExReq\022)\n\tseqI"
  "pPort\030\001 \003(\0132\026.InforGuard_.netIpPort\022\030\n\020r"
  "emotefoldername\030\002 \001(\014\022\014\n\004mode\030\003 \001(\005\"t\n\014G"
  "etListExRes\022\'\n\002ex\030\001 \001(\0132\033.InforGuard_.Ex"
  "ceptionError\022.\n\010filelist\030\002 \003(\0132\034.InforGu"
  "ard_.NetFileListNode\022\013\n\003ret\030\003 \001(\0052\305\002\n\014Ne"
  "tDirectory\0225\n\005Check\022\025.InforGuard_.CheckR"
  "eq\032\025.InforGuard_.CheckRes\022;\n\007GetTree\022\027.I"
  "nforGuard_.GetTreeReq\032\027.InforGuard_.GetT"
  "reeRes\022;\n\007GetList\022\027.InforGuard_.GetListR"
  "eq\032\027.InforGuard_.GetListRes\022A\n\tGetTreeEx"
  "\022\031.InforGuard_.GetTreeExReq\032\031.InforGuard"
  "_.GetTreeExRes\022A\n\tGetListEx\022\031.InforGuard"
  "_.GetListExReq\032\031.InforGuard_.GetListExRe"
  "sb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_NetDirectory_2eproto_deps[1] = {
  &::descriptor_table_Metadata_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_NetDirectory_2eproto_sccs[8] = {
  &scc_info_GetListExReq_NetDirectory_2eproto.base,
  &scc_info_GetListExRes_NetDirectory_2eproto.base,
  &scc_info_GetListReq_NetDirectory_2eproto.base,
  &scc_info_GetListRes_NetDirectory_2eproto.base,
  &scc_info_GetTreeExReq_NetDirectory_2eproto.base,
  &scc_info_GetTreeExRes_NetDirectory_2eproto.base,
  &scc_info_GetTreeReq_NetDirectory_2eproto.base,
  &scc_info_GetTreeRes_NetDirectory_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_NetDirectory_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NetDirectory_2eproto = {
  false, false, descriptor_table_protodef_NetDirectory_2eproto, "NetDirectory.proto", 1409,
  &descriptor_table_NetDirectory_2eproto_once, descriptor_table_NetDirectory_2eproto_sccs, descriptor_table_NetDirectory_2eproto_deps, 8, 1,
  schemas, file_default_instances, TableStruct_NetDirectory_2eproto::offsets,
  file_level_metadata_NetDirectory_2eproto, 8, file_level_enum_descriptors_NetDirectory_2eproto, file_level_service_descriptors_NetDirectory_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_NetDirectory_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_NetDirectory_2eproto)), true);
namespace InforGuard_ {

// ===================================================================

void GetTreeReq::InitAsDefaultInstance() {
  ::InforGuard_::_GetTreeReq_default_instance_._instance.get_mutable()->call_ = const_cast< ::InforGuard_::netCallData*>(
      ::InforGuard_::netCallData::internal_default_instance());
}
class GetTreeReq::_Internal {
 public:
  static const ::InforGuard_::netCallData& call(const GetTreeReq* msg);
};

const ::InforGuard_::netCallData&
GetTreeReq::_Internal::call(const GetTreeReq* msg) {
  return *msg->call_;
}
void GetTreeReq::clear_call() {
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
}
void GetTreeReq::clear_seqipport() {
  seqipport_.Clear();
}
GetTreeReq::GetTreeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  seqipport_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.GetTreeReq)
}
GetTreeReq::GetTreeReq(const GetTreeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      seqipport_(from.seqipport_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  remotefoldername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remotefoldername().empty()) {
    remotefoldername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_remotefoldername(),
      GetArena());
  }
  if (from._internal_has_call()) {
    call_ = new ::InforGuard_::netCallData(*from.call_);
  } else {
    call_ = nullptr;
  }
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:InforGuard_.GetTreeReq)
}

void GetTreeReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTreeReq_NetDirectory_2eproto.base);
  remotefoldername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&call_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&call_)) + sizeof(mode_));
}

GetTreeReq::~GetTreeReq() {
  // @@protoc_insertion_point(destructor:InforGuard_.GetTreeReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetTreeReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  remotefoldername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete call_;
}

void GetTreeReq::ArenaDtor(void* object) {
  GetTreeReq* _this = reinterpret_cast< GetTreeReq* >(object);
  (void)_this;
}
void GetTreeReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTreeReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTreeReq& GetTreeReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTreeReq_NetDirectory_2eproto.base);
  return *internal_default_instance();
}


void GetTreeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.GetTreeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seqipport_.Clear();
  remotefoldername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
  mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTreeReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.netCallData call = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .InforGuard_.netIpPort seqIpPort = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_seqipport(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes remotefoldername = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_remotefoldername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTreeReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.GetTreeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call(this), target, stream);
  }

  // repeated .InforGuard_.netIpPort seqIpPort = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_seqipport_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_seqipport(i), target, stream);
  }

  // bytes remotefoldername = 3;
  if (this->remotefoldername().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_remotefoldername(), target);
  }

  // int32 mode = 4;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.GetTreeReq)
  return target;
}

size_t GetTreeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.GetTreeReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .InforGuard_.netIpPort seqIpPort = 2;
  total_size += 1UL * this->_internal_seqipport_size();
  for (const auto& msg : this->seqipport_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes remotefoldername = 3;
  if (this->remotefoldername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_remotefoldername());
  }

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_);
  }

  // int32 mode = 4;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTreeReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.GetTreeReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTreeReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTreeReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.GetTreeReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.GetTreeReq)
    MergeFrom(*source);
  }
}

void GetTreeReq::MergeFrom(const GetTreeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.GetTreeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  seqipport_.MergeFrom(from.seqipport_);
  if (from.remotefoldername().size() > 0) {
    _internal_set_remotefoldername(from._internal_remotefoldername());
  }
  if (from.has_call()) {
    _internal_mutable_call()->::InforGuard_::netCallData::MergeFrom(from._internal_call());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
}

void GetTreeReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.GetTreeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTreeReq::CopyFrom(const GetTreeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.GetTreeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTreeReq::IsInitialized() const {
  return true;
}

void GetTreeReq::InternalSwap(GetTreeReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  seqipport_.InternalSwap(&other->seqipport_);
  remotefoldername_.Swap(&other->remotefoldername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTreeReq, mode_)
      + sizeof(GetTreeReq::mode_)
      - PROTOBUF_FIELD_OFFSET(GetTreeReq, call_)>(
          reinterpret_cast<char*>(&call_),
          reinterpret_cast<char*>(&other->call_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTreeReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTreeRes::InitAsDefaultInstance() {
  ::InforGuard_::_GetTreeRes_default_instance_._instance.get_mutable()->call_ = const_cast< ::InforGuard_::netCallData*>(
      ::InforGuard_::netCallData::internal_default_instance());
  ::InforGuard_::_GetTreeRes_default_instance_._instance.get_mutable()->ex_ = const_cast< ::InforGuard_::ExceptionError*>(
      ::InforGuard_::ExceptionError::internal_default_instance());
}
class GetTreeRes::_Internal {
 public:
  static const ::InforGuard_::netCallData& call(const GetTreeRes* msg);
  static const ::InforGuard_::ExceptionError& ex(const GetTreeRes* msg);
};

const ::InforGuard_::netCallData&
GetTreeRes::_Internal::call(const GetTreeRes* msg) {
  return *msg->call_;
}
const ::InforGuard_::ExceptionError&
GetTreeRes::_Internal::ex(const GetTreeRes* msg) {
  return *msg->ex_;
}
void GetTreeRes::clear_call() {
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
}
void GetTreeRes::clear_ex() {
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
}
void GetTreeRes::clear_treenode() {
  treenode_.Clear();
}
GetTreeRes::GetTreeRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  treenode_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.GetTreeRes)
}
GetTreeRes::GetTreeRes(const GetTreeRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      treenode_(from.treenode_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_call()) {
    call_ = new ::InforGuard_::netCallData(*from.call_);
  } else {
    call_ = nullptr;
  }
  if (from._internal_has_ex()) {
    ex_ = new ::InforGuard_::ExceptionError(*from.ex_);
  } else {
    ex_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:InforGuard_.GetTreeRes)
}

void GetTreeRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTreeRes_NetDirectory_2eproto.base);
  ::memset(&call_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&call_)) + sizeof(ret_));
}

GetTreeRes::~GetTreeRes() {
  // @@protoc_insertion_point(destructor:InforGuard_.GetTreeRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetTreeRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete call_;
  if (this != internal_default_instance()) delete ex_;
}

void GetTreeRes::ArenaDtor(void* object) {
  GetTreeRes* _this = reinterpret_cast< GetTreeRes* >(object);
  (void)_this;
}
void GetTreeRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTreeRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTreeRes& GetTreeRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTreeRes_NetDirectory_2eproto.base);
  return *internal_default_instance();
}


void GetTreeRes::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.GetTreeRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  treenode_.Clear();
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
  ret_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTreeRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.netCallData call = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .InforGuard_.ExceptionError ex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .InforGuard_.NetFileTreeNode treenode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_treenode(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 ret = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTreeRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.GetTreeRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call(this), target, stream);
  }

  // .InforGuard_.ExceptionError ex = 2;
  if (this->has_ex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ex(this), target, stream);
  }

  // repeated .InforGuard_.NetFileTreeNode treenode = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_treenode_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_treenode(i), target, stream);
  }

  // int32 ret = 4;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.GetTreeRes)
  return target;
}

size_t GetTreeRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.GetTreeRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .InforGuard_.NetFileTreeNode treenode = 3;
  total_size += 1UL * this->_internal_treenode_size();
  for (const auto& msg : this->treenode_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_);
  }

  // .InforGuard_.ExceptionError ex = 2;
  if (this->has_ex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ex_);
  }

  // int32 ret = 4;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTreeRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.GetTreeRes)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTreeRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTreeRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.GetTreeRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.GetTreeRes)
    MergeFrom(*source);
  }
}

void GetTreeRes::MergeFrom(const GetTreeRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.GetTreeRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  treenode_.MergeFrom(from.treenode_);
  if (from.has_call()) {
    _internal_mutable_call()->::InforGuard_::netCallData::MergeFrom(from._internal_call());
  }
  if (from.has_ex()) {
    _internal_mutable_ex()->::InforGuard_::ExceptionError::MergeFrom(from._internal_ex());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void GetTreeRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.GetTreeRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTreeRes::CopyFrom(const GetTreeRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.GetTreeRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTreeRes::IsInitialized() const {
  return true;
}

void GetTreeRes::InternalSwap(GetTreeRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  treenode_.InternalSwap(&other->treenode_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTreeRes, ret_)
      + sizeof(GetTreeRes::ret_)
      - PROTOBUF_FIELD_OFFSET(GetTreeRes, call_)>(
          reinterpret_cast<char*>(&call_),
          reinterpret_cast<char*>(&other->call_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTreeRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetListReq::InitAsDefaultInstance() {
  ::InforGuard_::_GetListReq_default_instance_._instance.get_mutable()->call_ = const_cast< ::InforGuard_::netCallData*>(
      ::InforGuard_::netCallData::internal_default_instance());
}
class GetListReq::_Internal {
 public:
  static const ::InforGuard_::netCallData& call(const GetListReq* msg);
};

const ::InforGuard_::netCallData&
GetListReq::_Internal::call(const GetListReq* msg) {
  return *msg->call_;
}
void GetListReq::clear_call() {
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
}
void GetListReq::clear_seqipport() {
  seqipport_.Clear();
}
GetListReq::GetListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  seqipport_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.GetListReq)
}
GetListReq::GetListReq(const GetListReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      seqipport_(from.seqipport_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  remotefoldername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remotefoldername().empty()) {
    remotefoldername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_remotefoldername(),
      GetArena());
  }
  if (from._internal_has_call()) {
    call_ = new ::InforGuard_::netCallData(*from.call_);
  } else {
    call_ = nullptr;
  }
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:InforGuard_.GetListReq)
}

void GetListReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetListReq_NetDirectory_2eproto.base);
  remotefoldername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&call_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&call_)) + sizeof(mode_));
}

GetListReq::~GetListReq() {
  // @@protoc_insertion_point(destructor:InforGuard_.GetListReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetListReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  remotefoldername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete call_;
}

void GetListReq::ArenaDtor(void* object) {
  GetListReq* _this = reinterpret_cast< GetListReq* >(object);
  (void)_this;
}
void GetListReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetListReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetListReq& GetListReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetListReq_NetDirectory_2eproto.base);
  return *internal_default_instance();
}


void GetListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.GetListReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seqipport_.Clear();
  remotefoldername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
  mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetListReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.netCallData call = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .InforGuard_.netIpPort seqIpPort = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_seqipport(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes remotefoldername = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_remotefoldername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetListReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.GetListReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call(this), target, stream);
  }

  // repeated .InforGuard_.netIpPort seqIpPort = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_seqipport_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_seqipport(i), target, stream);
  }

  // bytes remotefoldername = 3;
  if (this->remotefoldername().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_remotefoldername(), target);
  }

  // int32 mode = 4;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.GetListReq)
  return target;
}

size_t GetListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.GetListReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .InforGuard_.netIpPort seqIpPort = 2;
  total_size += 1UL * this->_internal_seqipport_size();
  for (const auto& msg : this->seqipport_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes remotefoldername = 3;
  if (this->remotefoldername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_remotefoldername());
  }

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_);
  }

  // int32 mode = 4;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetListReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.GetListReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetListReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetListReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.GetListReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.GetListReq)
    MergeFrom(*source);
  }
}

void GetListReq::MergeFrom(const GetListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.GetListReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  seqipport_.MergeFrom(from.seqipport_);
  if (from.remotefoldername().size() > 0) {
    _internal_set_remotefoldername(from._internal_remotefoldername());
  }
  if (from.has_call()) {
    _internal_mutable_call()->::InforGuard_::netCallData::MergeFrom(from._internal_call());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
}

void GetListReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.GetListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetListReq::CopyFrom(const GetListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.GetListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetListReq::IsInitialized() const {
  return true;
}

void GetListReq::InternalSwap(GetListReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  seqipport_.InternalSwap(&other->seqipport_);
  remotefoldername_.Swap(&other->remotefoldername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetListReq, mode_)
      + sizeof(GetListReq::mode_)
      - PROTOBUF_FIELD_OFFSET(GetListReq, call_)>(
          reinterpret_cast<char*>(&call_),
          reinterpret_cast<char*>(&other->call_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetListReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetListRes::InitAsDefaultInstance() {
  ::InforGuard_::_GetListRes_default_instance_._instance.get_mutable()->call_ = const_cast< ::InforGuard_::netCallData*>(
      ::InforGuard_::netCallData::internal_default_instance());
  ::InforGuard_::_GetListRes_default_instance_._instance.get_mutable()->ex_ = const_cast< ::InforGuard_::ExceptionError*>(
      ::InforGuard_::ExceptionError::internal_default_instance());
}
class GetListRes::_Internal {
 public:
  static const ::InforGuard_::netCallData& call(const GetListRes* msg);
  static const ::InforGuard_::ExceptionError& ex(const GetListRes* msg);
};

const ::InforGuard_::netCallData&
GetListRes::_Internal::call(const GetListRes* msg) {
  return *msg->call_;
}
const ::InforGuard_::ExceptionError&
GetListRes::_Internal::ex(const GetListRes* msg) {
  return *msg->ex_;
}
void GetListRes::clear_call() {
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
}
void GetListRes::clear_ex() {
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
}
void GetListRes::clear_filelist() {
  filelist_.Clear();
}
GetListRes::GetListRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  filelist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.GetListRes)
}
GetListRes::GetListRes(const GetListRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      filelist_(from.filelist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_call()) {
    call_ = new ::InforGuard_::netCallData(*from.call_);
  } else {
    call_ = nullptr;
  }
  if (from._internal_has_ex()) {
    ex_ = new ::InforGuard_::ExceptionError(*from.ex_);
  } else {
    ex_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:InforGuard_.GetListRes)
}

void GetListRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetListRes_NetDirectory_2eproto.base);
  ::memset(&call_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&call_)) + sizeof(ret_));
}

GetListRes::~GetListRes() {
  // @@protoc_insertion_point(destructor:InforGuard_.GetListRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetListRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete call_;
  if (this != internal_default_instance()) delete ex_;
}

void GetListRes::ArenaDtor(void* object) {
  GetListRes* _this = reinterpret_cast< GetListRes* >(object);
  (void)_this;
}
void GetListRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetListRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetListRes& GetListRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetListRes_NetDirectory_2eproto.base);
  return *internal_default_instance();
}


void GetListRes::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.GetListRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filelist_.Clear();
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
  ret_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetListRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.netCallData call = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .InforGuard_.ExceptionError ex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .InforGuard_.NetFileListNode filelist = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 ret = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetListRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.GetListRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call(this), target, stream);
  }

  // .InforGuard_.ExceptionError ex = 2;
  if (this->has_ex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ex(this), target, stream);
  }

  // repeated .InforGuard_.NetFileListNode filelist = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filelist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_filelist(i), target, stream);
  }

  // int32 ret = 4;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.GetListRes)
  return target;
}

size_t GetListRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.GetListRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .InforGuard_.NetFileListNode filelist = 3;
  total_size += 1UL * this->_internal_filelist_size();
  for (const auto& msg : this->filelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_);
  }

  // .InforGuard_.ExceptionError ex = 2;
  if (this->has_ex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ex_);
  }

  // int32 ret = 4;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetListRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.GetListRes)
  GOOGLE_DCHECK_NE(&from, this);
  const GetListRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetListRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.GetListRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.GetListRes)
    MergeFrom(*source);
  }
}

void GetListRes::MergeFrom(const GetListRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.GetListRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filelist_.MergeFrom(from.filelist_);
  if (from.has_call()) {
    _internal_mutable_call()->::InforGuard_::netCallData::MergeFrom(from._internal_call());
  }
  if (from.has_ex()) {
    _internal_mutable_ex()->::InforGuard_::ExceptionError::MergeFrom(from._internal_ex());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void GetListRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.GetListRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetListRes::CopyFrom(const GetListRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.GetListRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetListRes::IsInitialized() const {
  return true;
}

void GetListRes::InternalSwap(GetListRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filelist_.InternalSwap(&other->filelist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetListRes, ret_)
      + sizeof(GetListRes::ret_)
      - PROTOBUF_FIELD_OFFSET(GetListRes, call_)>(
          reinterpret_cast<char*>(&call_),
          reinterpret_cast<char*>(&other->call_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetListRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTreeExReq::InitAsDefaultInstance() {
}
class GetTreeExReq::_Internal {
 public:
};

void GetTreeExReq::clear_seqipport() {
  seqipport_.Clear();
}
GetTreeExReq::GetTreeExReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  seqipport_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.GetTreeExReq)
}
GetTreeExReq::GetTreeExReq(const GetTreeExReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      seqipport_(from.seqipport_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  remotefoldername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remotefoldername().empty()) {
    remotefoldername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_remotefoldername(),
      GetArena());
  }
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:InforGuard_.GetTreeExReq)
}

void GetTreeExReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTreeExReq_NetDirectory_2eproto.base);
  remotefoldername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mode_ = 0;
}

GetTreeExReq::~GetTreeExReq() {
  // @@protoc_insertion_point(destructor:InforGuard_.GetTreeExReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetTreeExReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  remotefoldername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetTreeExReq::ArenaDtor(void* object) {
  GetTreeExReq* _this = reinterpret_cast< GetTreeExReq* >(object);
  (void)_this;
}
void GetTreeExReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTreeExReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTreeExReq& GetTreeExReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTreeExReq_NetDirectory_2eproto.base);
  return *internal_default_instance();
}


void GetTreeExReq::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.GetTreeExReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seqipport_.Clear();
  remotefoldername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTreeExReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .InforGuard_.netIpPort seqIpPort = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_seqipport(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes remotefoldername = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_remotefoldername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTreeExReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.GetTreeExReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .InforGuard_.netIpPort seqIpPort = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_seqipport_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_seqipport(i), target, stream);
  }

  // bytes remotefoldername = 2;
  if (this->remotefoldername().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_remotefoldername(), target);
  }

  // int32 mode = 3;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.GetTreeExReq)
  return target;
}

size_t GetTreeExReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.GetTreeExReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .InforGuard_.netIpPort seqIpPort = 1;
  total_size += 1UL * this->_internal_seqipport_size();
  for (const auto& msg : this->seqipport_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes remotefoldername = 2;
  if (this->remotefoldername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_remotefoldername());
  }

  // int32 mode = 3;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTreeExReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.GetTreeExReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTreeExReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTreeExReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.GetTreeExReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.GetTreeExReq)
    MergeFrom(*source);
  }
}

void GetTreeExReq::MergeFrom(const GetTreeExReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.GetTreeExReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  seqipport_.MergeFrom(from.seqipport_);
  if (from.remotefoldername().size() > 0) {
    _internal_set_remotefoldername(from._internal_remotefoldername());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
}

void GetTreeExReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.GetTreeExReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTreeExReq::CopyFrom(const GetTreeExReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.GetTreeExReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTreeExReq::IsInitialized() const {
  return true;
}

void GetTreeExReq::InternalSwap(GetTreeExReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  seqipport_.InternalSwap(&other->seqipport_);
  remotefoldername_.Swap(&other->remotefoldername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(mode_, other->mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTreeExReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTreeExRes::InitAsDefaultInstance() {
  ::InforGuard_::_GetTreeExRes_default_instance_._instance.get_mutable()->ex_ = const_cast< ::InforGuard_::ExceptionError*>(
      ::InforGuard_::ExceptionError::internal_default_instance());
}
class GetTreeExRes::_Internal {
 public:
  static const ::InforGuard_::ExceptionError& ex(const GetTreeExRes* msg);
};

const ::InforGuard_::ExceptionError&
GetTreeExRes::_Internal::ex(const GetTreeExRes* msg) {
  return *msg->ex_;
}
void GetTreeExRes::clear_ex() {
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
}
void GetTreeExRes::clear_treenode() {
  treenode_.Clear();
}
GetTreeExRes::GetTreeExRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  treenode_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.GetTreeExRes)
}
GetTreeExRes::GetTreeExRes(const GetTreeExRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      treenode_(from.treenode_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ex()) {
    ex_ = new ::InforGuard_::ExceptionError(*from.ex_);
  } else {
    ex_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:InforGuard_.GetTreeExRes)
}

void GetTreeExRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTreeExRes_NetDirectory_2eproto.base);
  ::memset(&ex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&ex_)) + sizeof(ret_));
}

GetTreeExRes::~GetTreeExRes() {
  // @@protoc_insertion_point(destructor:InforGuard_.GetTreeExRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetTreeExRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ex_;
}

void GetTreeExRes::ArenaDtor(void* object) {
  GetTreeExRes* _this = reinterpret_cast< GetTreeExRes* >(object);
  (void)_this;
}
void GetTreeExRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTreeExRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTreeExRes& GetTreeExRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTreeExRes_NetDirectory_2eproto.base);
  return *internal_default_instance();
}


void GetTreeExRes::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.GetTreeExRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  treenode_.Clear();
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
  ret_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTreeExRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.ExceptionError ex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .InforGuard_.NetFileTreeNode treenode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_treenode(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 ret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTreeExRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.GetTreeExRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.ExceptionError ex = 1;
  if (this->has_ex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ex(this), target, stream);
  }

  // repeated .InforGuard_.NetFileTreeNode treenode = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_treenode_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_treenode(i), target, stream);
  }

  // int32 ret = 3;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.GetTreeExRes)
  return target;
}

size_t GetTreeExRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.GetTreeExRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .InforGuard_.NetFileTreeNode treenode = 2;
  total_size += 1UL * this->_internal_treenode_size();
  for (const auto& msg : this->treenode_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .InforGuard_.ExceptionError ex = 1;
  if (this->has_ex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ex_);
  }

  // int32 ret = 3;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTreeExRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.GetTreeExRes)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTreeExRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTreeExRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.GetTreeExRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.GetTreeExRes)
    MergeFrom(*source);
  }
}

void GetTreeExRes::MergeFrom(const GetTreeExRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.GetTreeExRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  treenode_.MergeFrom(from.treenode_);
  if (from.has_ex()) {
    _internal_mutable_ex()->::InforGuard_::ExceptionError::MergeFrom(from._internal_ex());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void GetTreeExRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.GetTreeExRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTreeExRes::CopyFrom(const GetTreeExRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.GetTreeExRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTreeExRes::IsInitialized() const {
  return true;
}

void GetTreeExRes::InternalSwap(GetTreeExRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  treenode_.InternalSwap(&other->treenode_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTreeExRes, ret_)
      + sizeof(GetTreeExRes::ret_)
      - PROTOBUF_FIELD_OFFSET(GetTreeExRes, ex_)>(
          reinterpret_cast<char*>(&ex_),
          reinterpret_cast<char*>(&other->ex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTreeExRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetListExReq::InitAsDefaultInstance() {
}
class GetListExReq::_Internal {
 public:
};

void GetListExReq::clear_seqipport() {
  seqipport_.Clear();
}
GetListExReq::GetListExReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  seqipport_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.GetListExReq)
}
GetListExReq::GetListExReq(const GetListExReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      seqipport_(from.seqipport_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  remotefoldername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remotefoldername().empty()) {
    remotefoldername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_remotefoldername(),
      GetArena());
  }
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:InforGuard_.GetListExReq)
}

void GetListExReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetListExReq_NetDirectory_2eproto.base);
  remotefoldername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mode_ = 0;
}

GetListExReq::~GetListExReq() {
  // @@protoc_insertion_point(destructor:InforGuard_.GetListExReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetListExReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  remotefoldername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetListExReq::ArenaDtor(void* object) {
  GetListExReq* _this = reinterpret_cast< GetListExReq* >(object);
  (void)_this;
}
void GetListExReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetListExReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetListExReq& GetListExReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetListExReq_NetDirectory_2eproto.base);
  return *internal_default_instance();
}


void GetListExReq::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.GetListExReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seqipport_.Clear();
  remotefoldername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetListExReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .InforGuard_.netIpPort seqIpPort = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_seqipport(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes remotefoldername = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_remotefoldername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetListExReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.GetListExReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .InforGuard_.netIpPort seqIpPort = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_seqipport_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_seqipport(i), target, stream);
  }

  // bytes remotefoldername = 2;
  if (this->remotefoldername().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_remotefoldername(), target);
  }

  // int32 mode = 3;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.GetListExReq)
  return target;
}

size_t GetListExReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.GetListExReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .InforGuard_.netIpPort seqIpPort = 1;
  total_size += 1UL * this->_internal_seqipport_size();
  for (const auto& msg : this->seqipport_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes remotefoldername = 2;
  if (this->remotefoldername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_remotefoldername());
  }

  // int32 mode = 3;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetListExReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.GetListExReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetListExReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetListExReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.GetListExReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.GetListExReq)
    MergeFrom(*source);
  }
}

void GetListExReq::MergeFrom(const GetListExReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.GetListExReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  seqipport_.MergeFrom(from.seqipport_);
  if (from.remotefoldername().size() > 0) {
    _internal_set_remotefoldername(from._internal_remotefoldername());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
}

void GetListExReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.GetListExReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetListExReq::CopyFrom(const GetListExReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.GetListExReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetListExReq::IsInitialized() const {
  return true;
}

void GetListExReq::InternalSwap(GetListExReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  seqipport_.InternalSwap(&other->seqipport_);
  remotefoldername_.Swap(&other->remotefoldername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(mode_, other->mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetListExReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetListExRes::InitAsDefaultInstance() {
  ::InforGuard_::_GetListExRes_default_instance_._instance.get_mutable()->ex_ = const_cast< ::InforGuard_::ExceptionError*>(
      ::InforGuard_::ExceptionError::internal_default_instance());
}
class GetListExRes::_Internal {
 public:
  static const ::InforGuard_::ExceptionError& ex(const GetListExRes* msg);
};

const ::InforGuard_::ExceptionError&
GetListExRes::_Internal::ex(const GetListExRes* msg) {
  return *msg->ex_;
}
void GetListExRes::clear_ex() {
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
}
void GetListExRes::clear_filelist() {
  filelist_.Clear();
}
GetListExRes::GetListExRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  filelist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.GetListExRes)
}
GetListExRes::GetListExRes(const GetListExRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      filelist_(from.filelist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ex()) {
    ex_ = new ::InforGuard_::ExceptionError(*from.ex_);
  } else {
    ex_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:InforGuard_.GetListExRes)
}

void GetListExRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetListExRes_NetDirectory_2eproto.base);
  ::memset(&ex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&ex_)) + sizeof(ret_));
}

GetListExRes::~GetListExRes() {
  // @@protoc_insertion_point(destructor:InforGuard_.GetListExRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetListExRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ex_;
}

void GetListExRes::ArenaDtor(void* object) {
  GetListExRes* _this = reinterpret_cast< GetListExRes* >(object);
  (void)_this;
}
void GetListExRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetListExRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetListExRes& GetListExRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetListExRes_NetDirectory_2eproto.base);
  return *internal_default_instance();
}


void GetListExRes::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.GetListExRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filelist_.Clear();
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
  ret_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetListExRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.ExceptionError ex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .InforGuard_.NetFileListNode filelist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 ret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetListExRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.GetListExRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.ExceptionError ex = 1;
  if (this->has_ex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ex(this), target, stream);
  }

  // repeated .InforGuard_.NetFileListNode filelist = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filelist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_filelist(i), target, stream);
  }

  // int32 ret = 3;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.GetListExRes)
  return target;
}

size_t GetListExRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.GetListExRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .InforGuard_.NetFileListNode filelist = 2;
  total_size += 1UL * this->_internal_filelist_size();
  for (const auto& msg : this->filelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .InforGuard_.ExceptionError ex = 1;
  if (this->has_ex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ex_);
  }

  // int32 ret = 3;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetListExRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.GetListExRes)
  GOOGLE_DCHECK_NE(&from, this);
  const GetListExRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetListExRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.GetListExRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.GetListExRes)
    MergeFrom(*source);
  }
}

void GetListExRes::MergeFrom(const GetListExRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.GetListExRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filelist_.MergeFrom(from.filelist_);
  if (from.has_ex()) {
    _internal_mutable_ex()->::InforGuard_::ExceptionError::MergeFrom(from._internal_ex());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void GetListExRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.GetListExRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetListExRes::CopyFrom(const GetListExRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.GetListExRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetListExRes::IsInitialized() const {
  return true;
}

void GetListExRes::InternalSwap(GetListExRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filelist_.InternalSwap(&other->filelist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetListExRes, ret_)
      + sizeof(GetListExRes::ret_)
      - PROTOBUF_FIELD_OFFSET(GetListExRes, ex_)>(
          reinterpret_cast<char*>(&ex_),
          reinterpret_cast<char*>(&other->ex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetListExRes::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace InforGuard_
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::InforGuard_::GetTreeReq* Arena::CreateMaybeMessage< ::InforGuard_::GetTreeReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::GetTreeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::GetTreeRes* Arena::CreateMaybeMessage< ::InforGuard_::GetTreeRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::GetTreeRes >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::GetListReq* Arena::CreateMaybeMessage< ::InforGuard_::GetListReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::GetListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::GetListRes* Arena::CreateMaybeMessage< ::InforGuard_::GetListRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::GetListRes >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::GetTreeExReq* Arena::CreateMaybeMessage< ::InforGuard_::GetTreeExReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::GetTreeExReq >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::GetTreeExRes* Arena::CreateMaybeMessage< ::InforGuard_::GetTreeExRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::GetTreeExRes >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::GetListExReq* Arena::CreateMaybeMessage< ::InforGuard_::GetListExReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::GetListExReq >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::GetListExRes* Arena::CreateMaybeMessage< ::InforGuard_::GetListExRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::GetListExRes >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
