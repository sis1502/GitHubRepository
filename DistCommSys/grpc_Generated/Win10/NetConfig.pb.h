// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NetConfig.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_NetConfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_NetConfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Metadata.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_NetConfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_NetConfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NetConfig_2eproto;
namespace InforGuard_ {
class LoadReq;
class LoadReqDefaultTypeInternal;
extern LoadReqDefaultTypeInternal _LoadReq_default_instance_;
class LoadRes;
class LoadResDefaultTypeInternal;
extern LoadResDefaultTypeInternal _LoadRes_default_instance_;
class SaveReq;
class SaveReqDefaultTypeInternal;
extern SaveReqDefaultTypeInternal _SaveReq_default_instance_;
class SaveRes;
class SaveResDefaultTypeInternal;
extern SaveResDefaultTypeInternal _SaveRes_default_instance_;
}  // namespace InforGuard_
PROTOBUF_NAMESPACE_OPEN
template<> ::InforGuard_::LoadReq* Arena::CreateMaybeMessage<::InforGuard_::LoadReq>(Arena*);
template<> ::InforGuard_::LoadRes* Arena::CreateMaybeMessage<::InforGuard_::LoadRes>(Arena*);
template<> ::InforGuard_::SaveReq* Arena::CreateMaybeMessage<::InforGuard_::SaveReq>(Arena*);
template<> ::InforGuard_::SaveRes* Arena::CreateMaybeMessage<::InforGuard_::SaveRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace InforGuard_ {

// ===================================================================

class LoadReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.LoadReq) */ {
 public:
  inline LoadReq() : LoadReq(nullptr) {};
  virtual ~LoadReq();

  LoadReq(const LoadReq& from);
  LoadReq(LoadReq&& from) noexcept
    : LoadReq() {
    *this = ::std::move(from);
  }

  inline LoadReq& operator=(const LoadReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadReq& operator=(LoadReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadReq* internal_default_instance() {
    return reinterpret_cast<const LoadReq*>(
               &_LoadReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoadReq& a, LoadReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadReq* New() const final {
    return CreateMaybeMessage<LoadReq>(nullptr);
  }

  LoadReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadReq& from);
  void MergeFrom(const LoadReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.LoadReq";
  }
  protected:
  explicit LoadReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NetConfig_2eproto);
    return ::descriptor_table_NetConfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeqIpPortFieldNumber = 1,
    kCfgFileNameFieldNumber = 2,
  };
  // repeated .InforGuard_.netIpPort seqIpPort = 1;
  int seqipport_size() const;
  private:
  int _internal_seqipport_size() const;
  public:
  void clear_seqipport();
  ::InforGuard_::netIpPort* mutable_seqipport(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort >*
      mutable_seqipport();
  private:
  const ::InforGuard_::netIpPort& _internal_seqipport(int index) const;
  ::InforGuard_::netIpPort* _internal_add_seqipport();
  public:
  const ::InforGuard_::netIpPort& seqipport(int index) const;
  ::InforGuard_::netIpPort* add_seqipport();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort >&
      seqipport() const;

  // bytes cfgFileName = 2;
  void clear_cfgfilename();
  const std::string& cfgfilename() const;
  void set_cfgfilename(const std::string& value);
  void set_cfgfilename(std::string&& value);
  void set_cfgfilename(const char* value);
  void set_cfgfilename(const void* value, size_t size);
  std::string* mutable_cfgfilename();
  std::string* release_cfgfilename();
  void set_allocated_cfgfilename(std::string* cfgfilename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cfgfilename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cfgfilename(
      std::string* cfgfilename);
  private:
  const std::string& _internal_cfgfilename() const;
  void _internal_set_cfgfilename(const std::string& value);
  std::string* _internal_mutable_cfgfilename();
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.LoadReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort > seqipport_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cfgfilename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NetConfig_2eproto;
};
// -------------------------------------------------------------------

class LoadRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.LoadRes) */ {
 public:
  inline LoadRes() : LoadRes(nullptr) {};
  virtual ~LoadRes();

  LoadRes(const LoadRes& from);
  LoadRes(LoadRes&& from) noexcept
    : LoadRes() {
    *this = ::std::move(from);
  }

  inline LoadRes& operator=(const LoadRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadRes& operator=(LoadRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadRes* internal_default_instance() {
    return reinterpret_cast<const LoadRes*>(
               &_LoadRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoadRes& a, LoadRes& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadRes* New() const final {
    return CreateMaybeMessage<LoadRes>(nullptr);
  }

  LoadRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadRes& from);
  void MergeFrom(const LoadRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.LoadRes";
  }
  protected:
  explicit LoadRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NetConfig_2eproto);
    return ::descriptor_table_NetConfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCfgFileContentFieldNumber = 2,
    kExFieldNumber = 1,
    kRetFieldNumber = 3,
  };
  // bytes cfgFileContent = 2;
  void clear_cfgfilecontent();
  const std::string& cfgfilecontent() const;
  void set_cfgfilecontent(const std::string& value);
  void set_cfgfilecontent(std::string&& value);
  void set_cfgfilecontent(const char* value);
  void set_cfgfilecontent(const void* value, size_t size);
  std::string* mutable_cfgfilecontent();
  std::string* release_cfgfilecontent();
  void set_allocated_cfgfilecontent(std::string* cfgfilecontent);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cfgfilecontent();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cfgfilecontent(
      std::string* cfgfilecontent);
  private:
  const std::string& _internal_cfgfilecontent() const;
  void _internal_set_cfgfilecontent(const std::string& value);
  std::string* _internal_mutable_cfgfilecontent();
  public:

  // .InforGuard_.ExceptionError ex = 1;
  bool has_ex() const;
  private:
  bool _internal_has_ex() const;
  public:
  void clear_ex();
  const ::InforGuard_::ExceptionError& ex() const;
  ::InforGuard_::ExceptionError* release_ex();
  ::InforGuard_::ExceptionError* mutable_ex();
  void set_allocated_ex(::InforGuard_::ExceptionError* ex);
  private:
  const ::InforGuard_::ExceptionError& _internal_ex() const;
  ::InforGuard_::ExceptionError* _internal_mutable_ex();
  public:
  void unsafe_arena_set_allocated_ex(
      ::InforGuard_::ExceptionError* ex);
  ::InforGuard_::ExceptionError* unsafe_arena_release_ex();

  // int32 ret = 3;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.LoadRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cfgfilecontent_;
  ::InforGuard_::ExceptionError* ex_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NetConfig_2eproto;
};
// -------------------------------------------------------------------

class SaveReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.SaveReq) */ {
 public:
  inline SaveReq() : SaveReq(nullptr) {};
  virtual ~SaveReq();

  SaveReq(const SaveReq& from);
  SaveReq(SaveReq&& from) noexcept
    : SaveReq() {
    *this = ::std::move(from);
  }

  inline SaveReq& operator=(const SaveReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveReq& operator=(SaveReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SaveReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SaveReq* internal_default_instance() {
    return reinterpret_cast<const SaveReq*>(
               &_SaveReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SaveReq& a, SaveReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SaveReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaveReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SaveReq* New() const final {
    return CreateMaybeMessage<SaveReq>(nullptr);
  }

  SaveReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SaveReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SaveReq& from);
  void MergeFrom(const SaveReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.SaveReq";
  }
  protected:
  explicit SaveReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NetConfig_2eproto);
    return ::descriptor_table_NetConfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeqIpPortFieldNumber = 1,
    kCfgFileNameFieldNumber = 2,
    kCfgFileContentFieldNumber = 3,
  };
  // repeated .InforGuard_.netIpPort seqIpPort = 1;
  int seqipport_size() const;
  private:
  int _internal_seqipport_size() const;
  public:
  void clear_seqipport();
  ::InforGuard_::netIpPort* mutable_seqipport(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort >*
      mutable_seqipport();
  private:
  const ::InforGuard_::netIpPort& _internal_seqipport(int index) const;
  ::InforGuard_::netIpPort* _internal_add_seqipport();
  public:
  const ::InforGuard_::netIpPort& seqipport(int index) const;
  ::InforGuard_::netIpPort* add_seqipport();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort >&
      seqipport() const;

  // bytes cfgFileName = 2;
  void clear_cfgfilename();
  const std::string& cfgfilename() const;
  void set_cfgfilename(const std::string& value);
  void set_cfgfilename(std::string&& value);
  void set_cfgfilename(const char* value);
  void set_cfgfilename(const void* value, size_t size);
  std::string* mutable_cfgfilename();
  std::string* release_cfgfilename();
  void set_allocated_cfgfilename(std::string* cfgfilename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cfgfilename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cfgfilename(
      std::string* cfgfilename);
  private:
  const std::string& _internal_cfgfilename() const;
  void _internal_set_cfgfilename(const std::string& value);
  std::string* _internal_mutable_cfgfilename();
  public:

  // bytes cfgFileContent = 3;
  void clear_cfgfilecontent();
  const std::string& cfgfilecontent() const;
  void set_cfgfilecontent(const std::string& value);
  void set_cfgfilecontent(std::string&& value);
  void set_cfgfilecontent(const char* value);
  void set_cfgfilecontent(const void* value, size_t size);
  std::string* mutable_cfgfilecontent();
  std::string* release_cfgfilecontent();
  void set_allocated_cfgfilecontent(std::string* cfgfilecontent);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cfgfilecontent();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cfgfilecontent(
      std::string* cfgfilecontent);
  private:
  const std::string& _internal_cfgfilecontent() const;
  void _internal_set_cfgfilecontent(const std::string& value);
  std::string* _internal_mutable_cfgfilecontent();
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.SaveReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort > seqipport_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cfgfilename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cfgfilecontent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NetConfig_2eproto;
};
// -------------------------------------------------------------------

class SaveRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.SaveRes) */ {
 public:
  inline SaveRes() : SaveRes(nullptr) {};
  virtual ~SaveRes();

  SaveRes(const SaveRes& from);
  SaveRes(SaveRes&& from) noexcept
    : SaveRes() {
    *this = ::std::move(from);
  }

  inline SaveRes& operator=(const SaveRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveRes& operator=(SaveRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SaveRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SaveRes* internal_default_instance() {
    return reinterpret_cast<const SaveRes*>(
               &_SaveRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SaveRes& a, SaveRes& b) {
    a.Swap(&b);
  }
  inline void Swap(SaveRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaveRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SaveRes* New() const final {
    return CreateMaybeMessage<SaveRes>(nullptr);
  }

  SaveRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SaveRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SaveRes& from);
  void MergeFrom(const SaveRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.SaveRes";
  }
  protected:
  explicit SaveRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NetConfig_2eproto);
    return ::descriptor_table_NetConfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExFieldNumber = 1,
    kRetFieldNumber = 2,
  };
  // .InforGuard_.ExceptionError ex = 1;
  bool has_ex() const;
  private:
  bool _internal_has_ex() const;
  public:
  void clear_ex();
  const ::InforGuard_::ExceptionError& ex() const;
  ::InforGuard_::ExceptionError* release_ex();
  ::InforGuard_::ExceptionError* mutable_ex();
  void set_allocated_ex(::InforGuard_::ExceptionError* ex);
  private:
  const ::InforGuard_::ExceptionError& _internal_ex() const;
  ::InforGuard_::ExceptionError* _internal_mutable_ex();
  public:
  void unsafe_arena_set_allocated_ex(
      ::InforGuard_::ExceptionError* ex);
  ::InforGuard_::ExceptionError* unsafe_arena_release_ex();

  // int32 ret = 2;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.SaveRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::InforGuard_::ExceptionError* ex_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NetConfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoadReq

// repeated .InforGuard_.netIpPort seqIpPort = 1;
inline int LoadReq::_internal_seqipport_size() const {
  return seqipport_.size();
}
inline int LoadReq::seqipport_size() const {
  return _internal_seqipport_size();
}
inline ::InforGuard_::netIpPort* LoadReq::mutable_seqipport(int index) {
  // @@protoc_insertion_point(field_mutable:InforGuard_.LoadReq.seqIpPort)
  return seqipport_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort >*
LoadReq::mutable_seqipport() {
  // @@protoc_insertion_point(field_mutable_list:InforGuard_.LoadReq.seqIpPort)
  return &seqipport_;
}
inline const ::InforGuard_::netIpPort& LoadReq::_internal_seqipport(int index) const {
  return seqipport_.Get(index);
}
inline const ::InforGuard_::netIpPort& LoadReq::seqipport(int index) const {
  // @@protoc_insertion_point(field_get:InforGuard_.LoadReq.seqIpPort)
  return _internal_seqipport(index);
}
inline ::InforGuard_::netIpPort* LoadReq::_internal_add_seqipport() {
  return seqipport_.Add();
}
inline ::InforGuard_::netIpPort* LoadReq::add_seqipport() {
  // @@protoc_insertion_point(field_add:InforGuard_.LoadReq.seqIpPort)
  return _internal_add_seqipport();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort >&
LoadReq::seqipport() const {
  // @@protoc_insertion_point(field_list:InforGuard_.LoadReq.seqIpPort)
  return seqipport_;
}

// bytes cfgFileName = 2;
inline void LoadReq::clear_cfgfilename() {
  cfgfilename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoadReq::cfgfilename() const {
  // @@protoc_insertion_point(field_get:InforGuard_.LoadReq.cfgFileName)
  return _internal_cfgfilename();
}
inline void LoadReq::set_cfgfilename(const std::string& value) {
  _internal_set_cfgfilename(value);
  // @@protoc_insertion_point(field_set:InforGuard_.LoadReq.cfgFileName)
}
inline std::string* LoadReq::mutable_cfgfilename() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.LoadReq.cfgFileName)
  return _internal_mutable_cfgfilename();
}
inline const std::string& LoadReq::_internal_cfgfilename() const {
  return cfgfilename_.Get();
}
inline void LoadReq::_internal_set_cfgfilename(const std::string& value) {
  
  cfgfilename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoadReq::set_cfgfilename(std::string&& value) {
  
  cfgfilename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.LoadReq.cfgFileName)
}
inline void LoadReq::set_cfgfilename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cfgfilename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.LoadReq.cfgFileName)
}
inline void LoadReq::set_cfgfilename(const void* value,
    size_t size) {
  
  cfgfilename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.LoadReq.cfgFileName)
}
inline std::string* LoadReq::_internal_mutable_cfgfilename() {
  
  return cfgfilename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoadReq::release_cfgfilename() {
  // @@protoc_insertion_point(field_release:InforGuard_.LoadReq.cfgFileName)
  return cfgfilename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoadReq::set_allocated_cfgfilename(std::string* cfgfilename) {
  if (cfgfilename != nullptr) {
    
  } else {
    
  }
  cfgfilename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cfgfilename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.LoadReq.cfgFileName)
}
inline std::string* LoadReq::unsafe_arena_release_cfgfilename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.LoadReq.cfgFileName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cfgfilename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoadReq::unsafe_arena_set_allocated_cfgfilename(
    std::string* cfgfilename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cfgfilename != nullptr) {
    
  } else {
    
  }
  cfgfilename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cfgfilename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.LoadReq.cfgFileName)
}

// -------------------------------------------------------------------

// LoadRes

// .InforGuard_.ExceptionError ex = 1;
inline bool LoadRes::_internal_has_ex() const {
  return this != internal_default_instance() && ex_ != nullptr;
}
inline bool LoadRes::has_ex() const {
  return _internal_has_ex();
}
inline const ::InforGuard_::ExceptionError& LoadRes::_internal_ex() const {
  const ::InforGuard_::ExceptionError* p = ex_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::ExceptionError*>(
      &::InforGuard_::_ExceptionError_default_instance_);
}
inline const ::InforGuard_::ExceptionError& LoadRes::ex() const {
  // @@protoc_insertion_point(field_get:InforGuard_.LoadRes.ex)
  return _internal_ex();
}
inline void LoadRes::unsafe_arena_set_allocated_ex(
    ::InforGuard_::ExceptionError* ex) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  ex_ = ex;
  if (ex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.LoadRes.ex)
}
inline ::InforGuard_::ExceptionError* LoadRes::release_ex() {
  auto temp = unsafe_arena_release_ex();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::ExceptionError* LoadRes::unsafe_arena_release_ex() {
  // @@protoc_insertion_point(field_release:InforGuard_.LoadRes.ex)
  
  ::InforGuard_::ExceptionError* temp = ex_;
  ex_ = nullptr;
  return temp;
}
inline ::InforGuard_::ExceptionError* LoadRes::_internal_mutable_ex() {
  
  if (ex_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::ExceptionError>(GetArena());
    ex_ = p;
  }
  return ex_;
}
inline ::InforGuard_::ExceptionError* LoadRes::mutable_ex() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.LoadRes.ex)
  return _internal_mutable_ex();
}
inline void LoadRes::set_allocated_ex(::InforGuard_::ExceptionError* ex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  if (ex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex)->GetArena();
    if (message_arena != submessage_arena) {
      ex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ex, submessage_arena);
    }
    
  } else {
    
  }
  ex_ = ex;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.LoadRes.ex)
}

// bytes cfgFileContent = 2;
inline void LoadRes::clear_cfgfilecontent() {
  cfgfilecontent_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoadRes::cfgfilecontent() const {
  // @@protoc_insertion_point(field_get:InforGuard_.LoadRes.cfgFileContent)
  return _internal_cfgfilecontent();
}
inline void LoadRes::set_cfgfilecontent(const std::string& value) {
  _internal_set_cfgfilecontent(value);
  // @@protoc_insertion_point(field_set:InforGuard_.LoadRes.cfgFileContent)
}
inline std::string* LoadRes::mutable_cfgfilecontent() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.LoadRes.cfgFileContent)
  return _internal_mutable_cfgfilecontent();
}
inline const std::string& LoadRes::_internal_cfgfilecontent() const {
  return cfgfilecontent_.Get();
}
inline void LoadRes::_internal_set_cfgfilecontent(const std::string& value) {
  
  cfgfilecontent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoadRes::set_cfgfilecontent(std::string&& value) {
  
  cfgfilecontent_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.LoadRes.cfgFileContent)
}
inline void LoadRes::set_cfgfilecontent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cfgfilecontent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.LoadRes.cfgFileContent)
}
inline void LoadRes::set_cfgfilecontent(const void* value,
    size_t size) {
  
  cfgfilecontent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.LoadRes.cfgFileContent)
}
inline std::string* LoadRes::_internal_mutable_cfgfilecontent() {
  
  return cfgfilecontent_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoadRes::release_cfgfilecontent() {
  // @@protoc_insertion_point(field_release:InforGuard_.LoadRes.cfgFileContent)
  return cfgfilecontent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoadRes::set_allocated_cfgfilecontent(std::string* cfgfilecontent) {
  if (cfgfilecontent != nullptr) {
    
  } else {
    
  }
  cfgfilecontent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cfgfilecontent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.LoadRes.cfgFileContent)
}
inline std::string* LoadRes::unsafe_arena_release_cfgfilecontent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.LoadRes.cfgFileContent)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cfgfilecontent_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoadRes::unsafe_arena_set_allocated_cfgfilecontent(
    std::string* cfgfilecontent) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cfgfilecontent != nullptr) {
    
  } else {
    
  }
  cfgfilecontent_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cfgfilecontent, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.LoadRes.cfgFileContent)
}

// int32 ret = 3;
inline void LoadRes::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadRes::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadRes::ret() const {
  // @@protoc_insertion_point(field_get:InforGuard_.LoadRes.ret)
  return _internal_ret();
}
inline void LoadRes::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void LoadRes::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:InforGuard_.LoadRes.ret)
}

// -------------------------------------------------------------------

// SaveReq

// repeated .InforGuard_.netIpPort seqIpPort = 1;
inline int SaveReq::_internal_seqipport_size() const {
  return seqipport_.size();
}
inline int SaveReq::seqipport_size() const {
  return _internal_seqipport_size();
}
inline ::InforGuard_::netIpPort* SaveReq::mutable_seqipport(int index) {
  // @@protoc_insertion_point(field_mutable:InforGuard_.SaveReq.seqIpPort)
  return seqipport_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort >*
SaveReq::mutable_seqipport() {
  // @@protoc_insertion_point(field_mutable_list:InforGuard_.SaveReq.seqIpPort)
  return &seqipport_;
}
inline const ::InforGuard_::netIpPort& SaveReq::_internal_seqipport(int index) const {
  return seqipport_.Get(index);
}
inline const ::InforGuard_::netIpPort& SaveReq::seqipport(int index) const {
  // @@protoc_insertion_point(field_get:InforGuard_.SaveReq.seqIpPort)
  return _internal_seqipport(index);
}
inline ::InforGuard_::netIpPort* SaveReq::_internal_add_seqipport() {
  return seqipport_.Add();
}
inline ::InforGuard_::netIpPort* SaveReq::add_seqipport() {
  // @@protoc_insertion_point(field_add:InforGuard_.SaveReq.seqIpPort)
  return _internal_add_seqipport();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort >&
SaveReq::seqipport() const {
  // @@protoc_insertion_point(field_list:InforGuard_.SaveReq.seqIpPort)
  return seqipport_;
}

// bytes cfgFileName = 2;
inline void SaveReq::clear_cfgfilename() {
  cfgfilename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SaveReq::cfgfilename() const {
  // @@protoc_insertion_point(field_get:InforGuard_.SaveReq.cfgFileName)
  return _internal_cfgfilename();
}
inline void SaveReq::set_cfgfilename(const std::string& value) {
  _internal_set_cfgfilename(value);
  // @@protoc_insertion_point(field_set:InforGuard_.SaveReq.cfgFileName)
}
inline std::string* SaveReq::mutable_cfgfilename() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.SaveReq.cfgFileName)
  return _internal_mutable_cfgfilename();
}
inline const std::string& SaveReq::_internal_cfgfilename() const {
  return cfgfilename_.Get();
}
inline void SaveReq::_internal_set_cfgfilename(const std::string& value) {
  
  cfgfilename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SaveReq::set_cfgfilename(std::string&& value) {
  
  cfgfilename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.SaveReq.cfgFileName)
}
inline void SaveReq::set_cfgfilename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cfgfilename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.SaveReq.cfgFileName)
}
inline void SaveReq::set_cfgfilename(const void* value,
    size_t size) {
  
  cfgfilename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.SaveReq.cfgFileName)
}
inline std::string* SaveReq::_internal_mutable_cfgfilename() {
  
  return cfgfilename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SaveReq::release_cfgfilename() {
  // @@protoc_insertion_point(field_release:InforGuard_.SaveReq.cfgFileName)
  return cfgfilename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SaveReq::set_allocated_cfgfilename(std::string* cfgfilename) {
  if (cfgfilename != nullptr) {
    
  } else {
    
  }
  cfgfilename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cfgfilename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.SaveReq.cfgFileName)
}
inline std::string* SaveReq::unsafe_arena_release_cfgfilename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.SaveReq.cfgFileName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cfgfilename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SaveReq::unsafe_arena_set_allocated_cfgfilename(
    std::string* cfgfilename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cfgfilename != nullptr) {
    
  } else {
    
  }
  cfgfilename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cfgfilename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.SaveReq.cfgFileName)
}

// bytes cfgFileContent = 3;
inline void SaveReq::clear_cfgfilecontent() {
  cfgfilecontent_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SaveReq::cfgfilecontent() const {
  // @@protoc_insertion_point(field_get:InforGuard_.SaveReq.cfgFileContent)
  return _internal_cfgfilecontent();
}
inline void SaveReq::set_cfgfilecontent(const std::string& value) {
  _internal_set_cfgfilecontent(value);
  // @@protoc_insertion_point(field_set:InforGuard_.SaveReq.cfgFileContent)
}
inline std::string* SaveReq::mutable_cfgfilecontent() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.SaveReq.cfgFileContent)
  return _internal_mutable_cfgfilecontent();
}
inline const std::string& SaveReq::_internal_cfgfilecontent() const {
  return cfgfilecontent_.Get();
}
inline void SaveReq::_internal_set_cfgfilecontent(const std::string& value) {
  
  cfgfilecontent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SaveReq::set_cfgfilecontent(std::string&& value) {
  
  cfgfilecontent_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.SaveReq.cfgFileContent)
}
inline void SaveReq::set_cfgfilecontent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cfgfilecontent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.SaveReq.cfgFileContent)
}
inline void SaveReq::set_cfgfilecontent(const void* value,
    size_t size) {
  
  cfgfilecontent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.SaveReq.cfgFileContent)
}
inline std::string* SaveReq::_internal_mutable_cfgfilecontent() {
  
  return cfgfilecontent_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SaveReq::release_cfgfilecontent() {
  // @@protoc_insertion_point(field_release:InforGuard_.SaveReq.cfgFileContent)
  return cfgfilecontent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SaveReq::set_allocated_cfgfilecontent(std::string* cfgfilecontent) {
  if (cfgfilecontent != nullptr) {
    
  } else {
    
  }
  cfgfilecontent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cfgfilecontent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.SaveReq.cfgFileContent)
}
inline std::string* SaveReq::unsafe_arena_release_cfgfilecontent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.SaveReq.cfgFileContent)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cfgfilecontent_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SaveReq::unsafe_arena_set_allocated_cfgfilecontent(
    std::string* cfgfilecontent) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cfgfilecontent != nullptr) {
    
  } else {
    
  }
  cfgfilecontent_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cfgfilecontent, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.SaveReq.cfgFileContent)
}

// -------------------------------------------------------------------

// SaveRes

// .InforGuard_.ExceptionError ex = 1;
inline bool SaveRes::_internal_has_ex() const {
  return this != internal_default_instance() && ex_ != nullptr;
}
inline bool SaveRes::has_ex() const {
  return _internal_has_ex();
}
inline const ::InforGuard_::ExceptionError& SaveRes::_internal_ex() const {
  const ::InforGuard_::ExceptionError* p = ex_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::ExceptionError*>(
      &::InforGuard_::_ExceptionError_default_instance_);
}
inline const ::InforGuard_::ExceptionError& SaveRes::ex() const {
  // @@protoc_insertion_point(field_get:InforGuard_.SaveRes.ex)
  return _internal_ex();
}
inline void SaveRes::unsafe_arena_set_allocated_ex(
    ::InforGuard_::ExceptionError* ex) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  ex_ = ex;
  if (ex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.SaveRes.ex)
}
inline ::InforGuard_::ExceptionError* SaveRes::release_ex() {
  auto temp = unsafe_arena_release_ex();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::ExceptionError* SaveRes::unsafe_arena_release_ex() {
  // @@protoc_insertion_point(field_release:InforGuard_.SaveRes.ex)
  
  ::InforGuard_::ExceptionError* temp = ex_;
  ex_ = nullptr;
  return temp;
}
inline ::InforGuard_::ExceptionError* SaveRes::_internal_mutable_ex() {
  
  if (ex_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::ExceptionError>(GetArena());
    ex_ = p;
  }
  return ex_;
}
inline ::InforGuard_::ExceptionError* SaveRes::mutable_ex() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.SaveRes.ex)
  return _internal_mutable_ex();
}
inline void SaveRes::set_allocated_ex(::InforGuard_::ExceptionError* ex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  if (ex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex)->GetArena();
    if (message_arena != submessage_arena) {
      ex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ex, submessage_arena);
    }
    
  } else {
    
  }
  ex_ = ex;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.SaveRes.ex)
}

// int32 ret = 2;
inline void SaveRes::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SaveRes::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SaveRes::ret() const {
  // @@protoc_insertion_point(field_get:InforGuard_.SaveRes.ret)
  return _internal_ret();
}
inline void SaveRes::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void SaveRes::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:InforGuard_.SaveRes.ret)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace InforGuard_

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_NetConfig_2eproto
