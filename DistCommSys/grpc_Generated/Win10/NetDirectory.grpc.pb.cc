// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: NetDirectory.proto

#include "NetDirectory.pb.h"
#include "NetDirectory.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace InforGuard_ {

static const char* NetDirectory_method_names[] = {
  "/InforGuard_.NetDirectory/Check",
  "/InforGuard_.NetDirectory/GetTree",
  "/InforGuard_.NetDirectory/GetList",
  "/InforGuard_.NetDirectory/GetTreeEx",
  "/InforGuard_.NetDirectory/GetListEx",
};

std::unique_ptr< NetDirectory::Stub> NetDirectory::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NetDirectory::Stub> stub(new NetDirectory::Stub(channel));
  return stub;
}

NetDirectory::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Check_(NetDirectory_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTree_(NetDirectory_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetList_(NetDirectory_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTreeEx_(NetDirectory_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetListEx_(NetDirectory_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NetDirectory::Stub::Check(::grpc::ClientContext* context, const ::InforGuard_::CheckReq& request, ::InforGuard_::CheckRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Check_, context, request, response);
}

void NetDirectory::Stub::experimental_async::Check(::grpc::ClientContext* context, const ::InforGuard_::CheckReq* request, ::InforGuard_::CheckRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Check_, context, request, response, std::move(f));
}

void NetDirectory::Stub::experimental_async::Check(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::CheckRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Check_, context, request, response, std::move(f));
}

void NetDirectory::Stub::experimental_async::Check(::grpc::ClientContext* context, const ::InforGuard_::CheckReq* request, ::InforGuard_::CheckRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Check_, context, request, response, reactor);
}

void NetDirectory::Stub::experimental_async::Check(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::CheckRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Check_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::CheckRes>* NetDirectory::Stub::AsyncCheckRaw(::grpc::ClientContext* context, const ::InforGuard_::CheckReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::CheckRes>::Create(channel_.get(), cq, rpcmethod_Check_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::CheckRes>* NetDirectory::Stub::PrepareAsyncCheckRaw(::grpc::ClientContext* context, const ::InforGuard_::CheckReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::CheckRes>::Create(channel_.get(), cq, rpcmethod_Check_, context, request, false);
}

::grpc::Status NetDirectory::Stub::GetTree(::grpc::ClientContext* context, const ::InforGuard_::GetTreeReq& request, ::InforGuard_::GetTreeRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTree_, context, request, response);
}

void NetDirectory::Stub::experimental_async::GetTree(::grpc::ClientContext* context, const ::InforGuard_::GetTreeReq* request, ::InforGuard_::GetTreeRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTree_, context, request, response, std::move(f));
}

void NetDirectory::Stub::experimental_async::GetTree(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetTreeRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTree_, context, request, response, std::move(f));
}

void NetDirectory::Stub::experimental_async::GetTree(::grpc::ClientContext* context, const ::InforGuard_::GetTreeReq* request, ::InforGuard_::GetTreeRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTree_, context, request, response, reactor);
}

void NetDirectory::Stub::experimental_async::GetTree(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetTreeRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTree_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::GetTreeRes>* NetDirectory::Stub::AsyncGetTreeRaw(::grpc::ClientContext* context, const ::InforGuard_::GetTreeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::GetTreeRes>::Create(channel_.get(), cq, rpcmethod_GetTree_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::GetTreeRes>* NetDirectory::Stub::PrepareAsyncGetTreeRaw(::grpc::ClientContext* context, const ::InforGuard_::GetTreeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::GetTreeRes>::Create(channel_.get(), cq, rpcmethod_GetTree_, context, request, false);
}

::grpc::Status NetDirectory::Stub::GetList(::grpc::ClientContext* context, const ::InforGuard_::GetListReq& request, ::InforGuard_::GetListRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetList_, context, request, response);
}

void NetDirectory::Stub::experimental_async::GetList(::grpc::ClientContext* context, const ::InforGuard_::GetListReq* request, ::InforGuard_::GetListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetList_, context, request, response, std::move(f));
}

void NetDirectory::Stub::experimental_async::GetList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetList_, context, request, response, std::move(f));
}

void NetDirectory::Stub::experimental_async::GetList(::grpc::ClientContext* context, const ::InforGuard_::GetListReq* request, ::InforGuard_::GetListRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetList_, context, request, response, reactor);
}

void NetDirectory::Stub::experimental_async::GetList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetListRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::GetListRes>* NetDirectory::Stub::AsyncGetListRaw(::grpc::ClientContext* context, const ::InforGuard_::GetListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::GetListRes>::Create(channel_.get(), cq, rpcmethod_GetList_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::GetListRes>* NetDirectory::Stub::PrepareAsyncGetListRaw(::grpc::ClientContext* context, const ::InforGuard_::GetListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::GetListRes>::Create(channel_.get(), cq, rpcmethod_GetList_, context, request, false);
}

::grpc::Status NetDirectory::Stub::GetTreeEx(::grpc::ClientContext* context, const ::InforGuard_::GetTreeExReq& request, ::InforGuard_::GetTreeExRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTreeEx_, context, request, response);
}

void NetDirectory::Stub::experimental_async::GetTreeEx(::grpc::ClientContext* context, const ::InforGuard_::GetTreeExReq* request, ::InforGuard_::GetTreeExRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTreeEx_, context, request, response, std::move(f));
}

void NetDirectory::Stub::experimental_async::GetTreeEx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetTreeExRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTreeEx_, context, request, response, std::move(f));
}

void NetDirectory::Stub::experimental_async::GetTreeEx(::grpc::ClientContext* context, const ::InforGuard_::GetTreeExReq* request, ::InforGuard_::GetTreeExRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTreeEx_, context, request, response, reactor);
}

void NetDirectory::Stub::experimental_async::GetTreeEx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetTreeExRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTreeEx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::GetTreeExRes>* NetDirectory::Stub::AsyncGetTreeExRaw(::grpc::ClientContext* context, const ::InforGuard_::GetTreeExReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::GetTreeExRes>::Create(channel_.get(), cq, rpcmethod_GetTreeEx_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::GetTreeExRes>* NetDirectory::Stub::PrepareAsyncGetTreeExRaw(::grpc::ClientContext* context, const ::InforGuard_::GetTreeExReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::GetTreeExRes>::Create(channel_.get(), cq, rpcmethod_GetTreeEx_, context, request, false);
}

::grpc::Status NetDirectory::Stub::GetListEx(::grpc::ClientContext* context, const ::InforGuard_::GetListExReq& request, ::InforGuard_::GetListExRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetListEx_, context, request, response);
}

void NetDirectory::Stub::experimental_async::GetListEx(::grpc::ClientContext* context, const ::InforGuard_::GetListExReq* request, ::InforGuard_::GetListExRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetListEx_, context, request, response, std::move(f));
}

void NetDirectory::Stub::experimental_async::GetListEx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetListExRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetListEx_, context, request, response, std::move(f));
}

void NetDirectory::Stub::experimental_async::GetListEx(::grpc::ClientContext* context, const ::InforGuard_::GetListExReq* request, ::InforGuard_::GetListExRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetListEx_, context, request, response, reactor);
}

void NetDirectory::Stub::experimental_async::GetListEx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetListExRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetListEx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::GetListExRes>* NetDirectory::Stub::AsyncGetListExRaw(::grpc::ClientContext* context, const ::InforGuard_::GetListExReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::GetListExRes>::Create(channel_.get(), cq, rpcmethod_GetListEx_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::GetListExRes>* NetDirectory::Stub::PrepareAsyncGetListExRaw(::grpc::ClientContext* context, const ::InforGuard_::GetListExReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::GetListExRes>::Create(channel_.get(), cq, rpcmethod_GetListEx_, context, request, false);
}

NetDirectory::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetDirectory_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetDirectory::Service, ::InforGuard_::CheckReq, ::InforGuard_::CheckRes>(
          [](NetDirectory::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::InforGuard_::CheckReq* req,
             ::InforGuard_::CheckRes* resp) {
               return service->Check(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetDirectory_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetDirectory::Service, ::InforGuard_::GetTreeReq, ::InforGuard_::GetTreeRes>(
          [](NetDirectory::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::InforGuard_::GetTreeReq* req,
             ::InforGuard_::GetTreeRes* resp) {
               return service->GetTree(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetDirectory_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetDirectory::Service, ::InforGuard_::GetListReq, ::InforGuard_::GetListRes>(
          [](NetDirectory::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::InforGuard_::GetListReq* req,
             ::InforGuard_::GetListRes* resp) {
               return service->GetList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetDirectory_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetDirectory::Service, ::InforGuard_::GetTreeExReq, ::InforGuard_::GetTreeExRes>(
          [](NetDirectory::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::InforGuard_::GetTreeExReq* req,
             ::InforGuard_::GetTreeExRes* resp) {
               return service->GetTreeEx(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetDirectory_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetDirectory::Service, ::InforGuard_::GetListExReq, ::InforGuard_::GetListExRes>(
          [](NetDirectory::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::InforGuard_::GetListExReq* req,
             ::InforGuard_::GetListExRes* resp) {
               return service->GetListEx(ctx, req, resp);
             }, this)));
}

NetDirectory::Service::~Service() {
}

::grpc::Status NetDirectory::Service::Check(::grpc::ServerContext* context, const ::InforGuard_::CheckReq* request, ::InforGuard_::CheckRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NetDirectory::Service::GetTree(::grpc::ServerContext* context, const ::InforGuard_::GetTreeReq* request, ::InforGuard_::GetTreeRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NetDirectory::Service::GetList(::grpc::ServerContext* context, const ::InforGuard_::GetListReq* request, ::InforGuard_::GetListRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NetDirectory::Service::GetTreeEx(::grpc::ServerContext* context, const ::InforGuard_::GetTreeExReq* request, ::InforGuard_::GetTreeExRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NetDirectory::Service::GetListEx(::grpc::ServerContext* context, const ::InforGuard_::GetListExReq* request, ::InforGuard_::GetListExRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace InforGuard_

