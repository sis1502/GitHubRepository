// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NetDirectory.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_NetDirectory_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_NetDirectory_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Metadata.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_NetDirectory_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_NetDirectory_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NetDirectory_2eproto;
namespace InforGuard_ {
class GetListExReq;
class GetListExReqDefaultTypeInternal;
extern GetListExReqDefaultTypeInternal _GetListExReq_default_instance_;
class GetListExRes;
class GetListExResDefaultTypeInternal;
extern GetListExResDefaultTypeInternal _GetListExRes_default_instance_;
class GetListReq;
class GetListReqDefaultTypeInternal;
extern GetListReqDefaultTypeInternal _GetListReq_default_instance_;
class GetListRes;
class GetListResDefaultTypeInternal;
extern GetListResDefaultTypeInternal _GetListRes_default_instance_;
class GetTreeExReq;
class GetTreeExReqDefaultTypeInternal;
extern GetTreeExReqDefaultTypeInternal _GetTreeExReq_default_instance_;
class GetTreeExRes;
class GetTreeExResDefaultTypeInternal;
extern GetTreeExResDefaultTypeInternal _GetTreeExRes_default_instance_;
class GetTreeReq;
class GetTreeReqDefaultTypeInternal;
extern GetTreeReqDefaultTypeInternal _GetTreeReq_default_instance_;
class GetTreeRes;
class GetTreeResDefaultTypeInternal;
extern GetTreeResDefaultTypeInternal _GetTreeRes_default_instance_;
}  // namespace InforGuard_
PROTOBUF_NAMESPACE_OPEN
template<> ::InforGuard_::GetListExReq* Arena::CreateMaybeMessage<::InforGuard_::GetListExReq>(Arena*);
template<> ::InforGuard_::GetListExRes* Arena::CreateMaybeMessage<::InforGuard_::GetListExRes>(Arena*);
template<> ::InforGuard_::GetListReq* Arena::CreateMaybeMessage<::InforGuard_::GetListReq>(Arena*);
template<> ::InforGuard_::GetListRes* Arena::CreateMaybeMessage<::InforGuard_::GetListRes>(Arena*);
template<> ::InforGuard_::GetTreeExReq* Arena::CreateMaybeMessage<::InforGuard_::GetTreeExReq>(Arena*);
template<> ::InforGuard_::GetTreeExRes* Arena::CreateMaybeMessage<::InforGuard_::GetTreeExRes>(Arena*);
template<> ::InforGuard_::GetTreeReq* Arena::CreateMaybeMessage<::InforGuard_::GetTreeReq>(Arena*);
template<> ::InforGuard_::GetTreeRes* Arena::CreateMaybeMessage<::InforGuard_::GetTreeRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace InforGuard_ {

// ===================================================================

class GetTreeReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.GetTreeReq) */ {
 public:
  inline GetTreeReq() : GetTreeReq(nullptr) {};
  virtual ~GetTreeReq();

  GetTreeReq(const GetTreeReq& from);
  GetTreeReq(GetTreeReq&& from) noexcept
    : GetTreeReq() {
    *this = ::std::move(from);
  }

  inline GetTreeReq& operator=(const GetTreeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTreeReq& operator=(GetTreeReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTreeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTreeReq* internal_default_instance() {
    return reinterpret_cast<const GetTreeReq*>(
               &_GetTreeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetTreeReq& a, GetTreeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTreeReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTreeReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTreeReq* New() const final {
    return CreateMaybeMessage<GetTreeReq>(nullptr);
  }

  GetTreeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTreeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTreeReq& from);
  void MergeFrom(const GetTreeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTreeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.GetTreeReq";
  }
  protected:
  explicit GetTreeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NetDirectory_2eproto);
    return ::descriptor_table_NetDirectory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeqIpPortFieldNumber = 2,
    kRemotefoldernameFieldNumber = 3,
    kCallFieldNumber = 1,
    kModeFieldNumber = 4,
  };
  // repeated .InforGuard_.netIpPort seqIpPort = 2;
  int seqipport_size() const;
  private:
  int _internal_seqipport_size() const;
  public:
  void clear_seqipport();
  ::InforGuard_::netIpPort* mutable_seqipport(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort >*
      mutable_seqipport();
  private:
  const ::InforGuard_::netIpPort& _internal_seqipport(int index) const;
  ::InforGuard_::netIpPort* _internal_add_seqipport();
  public:
  const ::InforGuard_::netIpPort& seqipport(int index) const;
  ::InforGuard_::netIpPort* add_seqipport();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort >&
      seqipport() const;

  // bytes remotefoldername = 3;
  void clear_remotefoldername();
  const std::string& remotefoldername() const;
  void set_remotefoldername(const std::string& value);
  void set_remotefoldername(std::string&& value);
  void set_remotefoldername(const char* value);
  void set_remotefoldername(const void* value, size_t size);
  std::string* mutable_remotefoldername();
  std::string* release_remotefoldername();
  void set_allocated_remotefoldername(std::string* remotefoldername);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_remotefoldername();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_remotefoldername(
      std::string* remotefoldername);
  private:
  const std::string& _internal_remotefoldername() const;
  void _internal_set_remotefoldername(const std::string& value);
  std::string* _internal_mutable_remotefoldername();
  public:

  // .InforGuard_.netCallData call = 1;
  bool has_call() const;
  private:
  bool _internal_has_call() const;
  public:
  void clear_call();
  const ::InforGuard_::netCallData& call() const;
  ::InforGuard_::netCallData* release_call();
  ::InforGuard_::netCallData* mutable_call();
  void set_allocated_call(::InforGuard_::netCallData* call);
  private:
  const ::InforGuard_::netCallData& _internal_call() const;
  ::InforGuard_::netCallData* _internal_mutable_call();
  public:
  void unsafe_arena_set_allocated_call(
      ::InforGuard_::netCallData* call);
  ::InforGuard_::netCallData* unsafe_arena_release_call();

  // int32 mode = 4;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.GetTreeReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort > seqipport_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remotefoldername_;
  ::InforGuard_::netCallData* call_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NetDirectory_2eproto;
};
// -------------------------------------------------------------------

class GetTreeRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.GetTreeRes) */ {
 public:
  inline GetTreeRes() : GetTreeRes(nullptr) {};
  virtual ~GetTreeRes();

  GetTreeRes(const GetTreeRes& from);
  GetTreeRes(GetTreeRes&& from) noexcept
    : GetTreeRes() {
    *this = ::std::move(from);
  }

  inline GetTreeRes& operator=(const GetTreeRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTreeRes& operator=(GetTreeRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTreeRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTreeRes* internal_default_instance() {
    return reinterpret_cast<const GetTreeRes*>(
               &_GetTreeRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetTreeRes& a, GetTreeRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTreeRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTreeRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTreeRes* New() const final {
    return CreateMaybeMessage<GetTreeRes>(nullptr);
  }

  GetTreeRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTreeRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTreeRes& from);
  void MergeFrom(const GetTreeRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTreeRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.GetTreeRes";
  }
  protected:
  explicit GetTreeRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NetDirectory_2eproto);
    return ::descriptor_table_NetDirectory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTreenodeFieldNumber = 3,
    kCallFieldNumber = 1,
    kExFieldNumber = 2,
    kRetFieldNumber = 4,
  };
  // repeated .InforGuard_.NetFileTreeNode treenode = 3;
  int treenode_size() const;
  private:
  int _internal_treenode_size() const;
  public:
  void clear_treenode();
  ::InforGuard_::NetFileTreeNode* mutable_treenode(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::NetFileTreeNode >*
      mutable_treenode();
  private:
  const ::InforGuard_::NetFileTreeNode& _internal_treenode(int index) const;
  ::InforGuard_::NetFileTreeNode* _internal_add_treenode();
  public:
  const ::InforGuard_::NetFileTreeNode& treenode(int index) const;
  ::InforGuard_::NetFileTreeNode* add_treenode();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::NetFileTreeNode >&
      treenode() const;

  // .InforGuard_.netCallData call = 1;
  bool has_call() const;
  private:
  bool _internal_has_call() const;
  public:
  void clear_call();
  const ::InforGuard_::netCallData& call() const;
  ::InforGuard_::netCallData* release_call();
  ::InforGuard_::netCallData* mutable_call();
  void set_allocated_call(::InforGuard_::netCallData* call);
  private:
  const ::InforGuard_::netCallData& _internal_call() const;
  ::InforGuard_::netCallData* _internal_mutable_call();
  public:
  void unsafe_arena_set_allocated_call(
      ::InforGuard_::netCallData* call);
  ::InforGuard_::netCallData* unsafe_arena_release_call();

  // .InforGuard_.ExceptionError ex = 2;
  bool has_ex() const;
  private:
  bool _internal_has_ex() const;
  public:
  void clear_ex();
  const ::InforGuard_::ExceptionError& ex() const;
  ::InforGuard_::ExceptionError* release_ex();
  ::InforGuard_::ExceptionError* mutable_ex();
  void set_allocated_ex(::InforGuard_::ExceptionError* ex);
  private:
  const ::InforGuard_::ExceptionError& _internal_ex() const;
  ::InforGuard_::ExceptionError* _internal_mutable_ex();
  public:
  void unsafe_arena_set_allocated_ex(
      ::InforGuard_::ExceptionError* ex);
  ::InforGuard_::ExceptionError* unsafe_arena_release_ex();

  // int32 ret = 4;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.GetTreeRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::NetFileTreeNode > treenode_;
  ::InforGuard_::netCallData* call_;
  ::InforGuard_::ExceptionError* ex_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NetDirectory_2eproto;
};
// -------------------------------------------------------------------

class GetListReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.GetListReq) */ {
 public:
  inline GetListReq() : GetListReq(nullptr) {};
  virtual ~GetListReq();

  GetListReq(const GetListReq& from);
  GetListReq(GetListReq&& from) noexcept
    : GetListReq() {
    *this = ::std::move(from);
  }

  inline GetListReq& operator=(const GetListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetListReq& operator=(GetListReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetListReq* internal_default_instance() {
    return reinterpret_cast<const GetListReq*>(
               &_GetListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetListReq& a, GetListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetListReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetListReq* New() const final {
    return CreateMaybeMessage<GetListReq>(nullptr);
  }

  GetListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetListReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetListReq& from);
  void MergeFrom(const GetListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetListReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.GetListReq";
  }
  protected:
  explicit GetListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NetDirectory_2eproto);
    return ::descriptor_table_NetDirectory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeqIpPortFieldNumber = 2,
    kRemotefoldernameFieldNumber = 3,
    kCallFieldNumber = 1,
    kModeFieldNumber = 4,
  };
  // repeated .InforGuard_.netIpPort seqIpPort = 2;
  int seqipport_size() const;
  private:
  int _internal_seqipport_size() const;
  public:
  void clear_seqipport();
  ::InforGuard_::netIpPort* mutable_seqipport(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort >*
      mutable_seqipport();
  private:
  const ::InforGuard_::netIpPort& _internal_seqipport(int index) const;
  ::InforGuard_::netIpPort* _internal_add_seqipport();
  public:
  const ::InforGuard_::netIpPort& seqipport(int index) const;
  ::InforGuard_::netIpPort* add_seqipport();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort >&
      seqipport() const;

  // bytes remotefoldername = 3;
  void clear_remotefoldername();
  const std::string& remotefoldername() const;
  void set_remotefoldername(const std::string& value);
  void set_remotefoldername(std::string&& value);
  void set_remotefoldername(const char* value);
  void set_remotefoldername(const void* value, size_t size);
  std::string* mutable_remotefoldername();
  std::string* release_remotefoldername();
  void set_allocated_remotefoldername(std::string* remotefoldername);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_remotefoldername();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_remotefoldername(
      std::string* remotefoldername);
  private:
  const std::string& _internal_remotefoldername() const;
  void _internal_set_remotefoldername(const std::string& value);
  std::string* _internal_mutable_remotefoldername();
  public:

  // .InforGuard_.netCallData call = 1;
  bool has_call() const;
  private:
  bool _internal_has_call() const;
  public:
  void clear_call();
  const ::InforGuard_::netCallData& call() const;
  ::InforGuard_::netCallData* release_call();
  ::InforGuard_::netCallData* mutable_call();
  void set_allocated_call(::InforGuard_::netCallData* call);
  private:
  const ::InforGuard_::netCallData& _internal_call() const;
  ::InforGuard_::netCallData* _internal_mutable_call();
  public:
  void unsafe_arena_set_allocated_call(
      ::InforGuard_::netCallData* call);
  ::InforGuard_::netCallData* unsafe_arena_release_call();

  // int32 mode = 4;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.GetListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort > seqipport_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remotefoldername_;
  ::InforGuard_::netCallData* call_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NetDirectory_2eproto;
};
// -------------------------------------------------------------------

class GetListRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.GetListRes) */ {
 public:
  inline GetListRes() : GetListRes(nullptr) {};
  virtual ~GetListRes();

  GetListRes(const GetListRes& from);
  GetListRes(GetListRes&& from) noexcept
    : GetListRes() {
    *this = ::std::move(from);
  }

  inline GetListRes& operator=(const GetListRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetListRes& operator=(GetListRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetListRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetListRes* internal_default_instance() {
    return reinterpret_cast<const GetListRes*>(
               &_GetListRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetListRes& a, GetListRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GetListRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetListRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetListRes* New() const final {
    return CreateMaybeMessage<GetListRes>(nullptr);
  }

  GetListRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetListRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetListRes& from);
  void MergeFrom(const GetListRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetListRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.GetListRes";
  }
  protected:
  explicit GetListRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NetDirectory_2eproto);
    return ::descriptor_table_NetDirectory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilelistFieldNumber = 3,
    kCallFieldNumber = 1,
    kExFieldNumber = 2,
    kRetFieldNumber = 4,
  };
  // repeated .InforGuard_.NetFileListNode filelist = 3;
  int filelist_size() const;
  private:
  int _internal_filelist_size() const;
  public:
  void clear_filelist();
  ::InforGuard_::NetFileListNode* mutable_filelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::NetFileListNode >*
      mutable_filelist();
  private:
  const ::InforGuard_::NetFileListNode& _internal_filelist(int index) const;
  ::InforGuard_::NetFileListNode* _internal_add_filelist();
  public:
  const ::InforGuard_::NetFileListNode& filelist(int index) const;
  ::InforGuard_::NetFileListNode* add_filelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::NetFileListNode >&
      filelist() const;

  // .InforGuard_.netCallData call = 1;
  bool has_call() const;
  private:
  bool _internal_has_call() const;
  public:
  void clear_call();
  const ::InforGuard_::netCallData& call() const;
  ::InforGuard_::netCallData* release_call();
  ::InforGuard_::netCallData* mutable_call();
  void set_allocated_call(::InforGuard_::netCallData* call);
  private:
  const ::InforGuard_::netCallData& _internal_call() const;
  ::InforGuard_::netCallData* _internal_mutable_call();
  public:
  void unsafe_arena_set_allocated_call(
      ::InforGuard_::netCallData* call);
  ::InforGuard_::netCallData* unsafe_arena_release_call();

  // .InforGuard_.ExceptionError ex = 2;
  bool has_ex() const;
  private:
  bool _internal_has_ex() const;
  public:
  void clear_ex();
  const ::InforGuard_::ExceptionError& ex() const;
  ::InforGuard_::ExceptionError* release_ex();
  ::InforGuard_::ExceptionError* mutable_ex();
  void set_allocated_ex(::InforGuard_::ExceptionError* ex);
  private:
  const ::InforGuard_::ExceptionError& _internal_ex() const;
  ::InforGuard_::ExceptionError* _internal_mutable_ex();
  public:
  void unsafe_arena_set_allocated_ex(
      ::InforGuard_::ExceptionError* ex);
  ::InforGuard_::ExceptionError* unsafe_arena_release_ex();

  // int32 ret = 4;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.GetListRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::NetFileListNode > filelist_;
  ::InforGuard_::netCallData* call_;
  ::InforGuard_::ExceptionError* ex_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NetDirectory_2eproto;
};
// -------------------------------------------------------------------

class GetTreeExReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.GetTreeExReq) */ {
 public:
  inline GetTreeExReq() : GetTreeExReq(nullptr) {};
  virtual ~GetTreeExReq();

  GetTreeExReq(const GetTreeExReq& from);
  GetTreeExReq(GetTreeExReq&& from) noexcept
    : GetTreeExReq() {
    *this = ::std::move(from);
  }

  inline GetTreeExReq& operator=(const GetTreeExReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTreeExReq& operator=(GetTreeExReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTreeExReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTreeExReq* internal_default_instance() {
    return reinterpret_cast<const GetTreeExReq*>(
               &_GetTreeExReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetTreeExReq& a, GetTreeExReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTreeExReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTreeExReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTreeExReq* New() const final {
    return CreateMaybeMessage<GetTreeExReq>(nullptr);
  }

  GetTreeExReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTreeExReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTreeExReq& from);
  void MergeFrom(const GetTreeExReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTreeExReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.GetTreeExReq";
  }
  protected:
  explicit GetTreeExReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NetDirectory_2eproto);
    return ::descriptor_table_NetDirectory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeqIpPortFieldNumber = 1,
    kRemotefoldernameFieldNumber = 2,
    kModeFieldNumber = 3,
  };
  // repeated .InforGuard_.netIpPort seqIpPort = 1;
  int seqipport_size() const;
  private:
  int _internal_seqipport_size() const;
  public:
  void clear_seqipport();
  ::InforGuard_::netIpPort* mutable_seqipport(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort >*
      mutable_seqipport();
  private:
  const ::InforGuard_::netIpPort& _internal_seqipport(int index) const;
  ::InforGuard_::netIpPort* _internal_add_seqipport();
  public:
  const ::InforGuard_::netIpPort& seqipport(int index) const;
  ::InforGuard_::netIpPort* add_seqipport();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort >&
      seqipport() const;

  // bytes remotefoldername = 2;
  void clear_remotefoldername();
  const std::string& remotefoldername() const;
  void set_remotefoldername(const std::string& value);
  void set_remotefoldername(std::string&& value);
  void set_remotefoldername(const char* value);
  void set_remotefoldername(const void* value, size_t size);
  std::string* mutable_remotefoldername();
  std::string* release_remotefoldername();
  void set_allocated_remotefoldername(std::string* remotefoldername);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_remotefoldername();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_remotefoldername(
      std::string* remotefoldername);
  private:
  const std::string& _internal_remotefoldername() const;
  void _internal_set_remotefoldername(const std::string& value);
  std::string* _internal_mutable_remotefoldername();
  public:

  // int32 mode = 3;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.GetTreeExReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort > seqipport_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remotefoldername_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NetDirectory_2eproto;
};
// -------------------------------------------------------------------

class GetTreeExRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.GetTreeExRes) */ {
 public:
  inline GetTreeExRes() : GetTreeExRes(nullptr) {};
  virtual ~GetTreeExRes();

  GetTreeExRes(const GetTreeExRes& from);
  GetTreeExRes(GetTreeExRes&& from) noexcept
    : GetTreeExRes() {
    *this = ::std::move(from);
  }

  inline GetTreeExRes& operator=(const GetTreeExRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTreeExRes& operator=(GetTreeExRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTreeExRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTreeExRes* internal_default_instance() {
    return reinterpret_cast<const GetTreeExRes*>(
               &_GetTreeExRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetTreeExRes& a, GetTreeExRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTreeExRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTreeExRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTreeExRes* New() const final {
    return CreateMaybeMessage<GetTreeExRes>(nullptr);
  }

  GetTreeExRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTreeExRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTreeExRes& from);
  void MergeFrom(const GetTreeExRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTreeExRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.GetTreeExRes";
  }
  protected:
  explicit GetTreeExRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NetDirectory_2eproto);
    return ::descriptor_table_NetDirectory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTreenodeFieldNumber = 2,
    kExFieldNumber = 1,
    kRetFieldNumber = 3,
  };
  // repeated .InforGuard_.NetFileTreeNode treenode = 2;
  int treenode_size() const;
  private:
  int _internal_treenode_size() const;
  public:
  void clear_treenode();
  ::InforGuard_::NetFileTreeNode* mutable_treenode(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::NetFileTreeNode >*
      mutable_treenode();
  private:
  const ::InforGuard_::NetFileTreeNode& _internal_treenode(int index) const;
  ::InforGuard_::NetFileTreeNode* _internal_add_treenode();
  public:
  const ::InforGuard_::NetFileTreeNode& treenode(int index) const;
  ::InforGuard_::NetFileTreeNode* add_treenode();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::NetFileTreeNode >&
      treenode() const;

  // .InforGuard_.ExceptionError ex = 1;
  bool has_ex() const;
  private:
  bool _internal_has_ex() const;
  public:
  void clear_ex();
  const ::InforGuard_::ExceptionError& ex() const;
  ::InforGuard_::ExceptionError* release_ex();
  ::InforGuard_::ExceptionError* mutable_ex();
  void set_allocated_ex(::InforGuard_::ExceptionError* ex);
  private:
  const ::InforGuard_::ExceptionError& _internal_ex() const;
  ::InforGuard_::ExceptionError* _internal_mutable_ex();
  public:
  void unsafe_arena_set_allocated_ex(
      ::InforGuard_::ExceptionError* ex);
  ::InforGuard_::ExceptionError* unsafe_arena_release_ex();

  // int32 ret = 3;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.GetTreeExRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::NetFileTreeNode > treenode_;
  ::InforGuard_::ExceptionError* ex_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NetDirectory_2eproto;
};
// -------------------------------------------------------------------

class GetListExReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.GetListExReq) */ {
 public:
  inline GetListExReq() : GetListExReq(nullptr) {};
  virtual ~GetListExReq();

  GetListExReq(const GetListExReq& from);
  GetListExReq(GetListExReq&& from) noexcept
    : GetListExReq() {
    *this = ::std::move(from);
  }

  inline GetListExReq& operator=(const GetListExReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetListExReq& operator=(GetListExReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetListExReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetListExReq* internal_default_instance() {
    return reinterpret_cast<const GetListExReq*>(
               &_GetListExReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetListExReq& a, GetListExReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetListExReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetListExReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetListExReq* New() const final {
    return CreateMaybeMessage<GetListExReq>(nullptr);
  }

  GetListExReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetListExReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetListExReq& from);
  void MergeFrom(const GetListExReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetListExReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.GetListExReq";
  }
  protected:
  explicit GetListExReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NetDirectory_2eproto);
    return ::descriptor_table_NetDirectory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeqIpPortFieldNumber = 1,
    kRemotefoldernameFieldNumber = 2,
    kModeFieldNumber = 3,
  };
  // repeated .InforGuard_.netIpPort seqIpPort = 1;
  int seqipport_size() const;
  private:
  int _internal_seqipport_size() const;
  public:
  void clear_seqipport();
  ::InforGuard_::netIpPort* mutable_seqipport(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort >*
      mutable_seqipport();
  private:
  const ::InforGuard_::netIpPort& _internal_seqipport(int index) const;
  ::InforGuard_::netIpPort* _internal_add_seqipport();
  public:
  const ::InforGuard_::netIpPort& seqipport(int index) const;
  ::InforGuard_::netIpPort* add_seqipport();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort >&
      seqipport() const;

  // bytes remotefoldername = 2;
  void clear_remotefoldername();
  const std::string& remotefoldername() const;
  void set_remotefoldername(const std::string& value);
  void set_remotefoldername(std::string&& value);
  void set_remotefoldername(const char* value);
  void set_remotefoldername(const void* value, size_t size);
  std::string* mutable_remotefoldername();
  std::string* release_remotefoldername();
  void set_allocated_remotefoldername(std::string* remotefoldername);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_remotefoldername();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_remotefoldername(
      std::string* remotefoldername);
  private:
  const std::string& _internal_remotefoldername() const;
  void _internal_set_remotefoldername(const std::string& value);
  std::string* _internal_mutable_remotefoldername();
  public:

  // int32 mode = 3;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.GetListExReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort > seqipport_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remotefoldername_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NetDirectory_2eproto;
};
// -------------------------------------------------------------------

class GetListExRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.GetListExRes) */ {
 public:
  inline GetListExRes() : GetListExRes(nullptr) {};
  virtual ~GetListExRes();

  GetListExRes(const GetListExRes& from);
  GetListExRes(GetListExRes&& from) noexcept
    : GetListExRes() {
    *this = ::std::move(from);
  }

  inline GetListExRes& operator=(const GetListExRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetListExRes& operator=(GetListExRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetListExRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetListExRes* internal_default_instance() {
    return reinterpret_cast<const GetListExRes*>(
               &_GetListExRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetListExRes& a, GetListExRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GetListExRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetListExRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetListExRes* New() const final {
    return CreateMaybeMessage<GetListExRes>(nullptr);
  }

  GetListExRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetListExRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetListExRes& from);
  void MergeFrom(const GetListExRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetListExRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.GetListExRes";
  }
  protected:
  explicit GetListExRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NetDirectory_2eproto);
    return ::descriptor_table_NetDirectory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilelistFieldNumber = 2,
    kExFieldNumber = 1,
    kRetFieldNumber = 3,
  };
  // repeated .InforGuard_.NetFileListNode filelist = 2;
  int filelist_size() const;
  private:
  int _internal_filelist_size() const;
  public:
  void clear_filelist();
  ::InforGuard_::NetFileListNode* mutable_filelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::NetFileListNode >*
      mutable_filelist();
  private:
  const ::InforGuard_::NetFileListNode& _internal_filelist(int index) const;
  ::InforGuard_::NetFileListNode* _internal_add_filelist();
  public:
  const ::InforGuard_::NetFileListNode& filelist(int index) const;
  ::InforGuard_::NetFileListNode* add_filelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::NetFileListNode >&
      filelist() const;

  // .InforGuard_.ExceptionError ex = 1;
  bool has_ex() const;
  private:
  bool _internal_has_ex() const;
  public:
  void clear_ex();
  const ::InforGuard_::ExceptionError& ex() const;
  ::InforGuard_::ExceptionError* release_ex();
  ::InforGuard_::ExceptionError* mutable_ex();
  void set_allocated_ex(::InforGuard_::ExceptionError* ex);
  private:
  const ::InforGuard_::ExceptionError& _internal_ex() const;
  ::InforGuard_::ExceptionError* _internal_mutable_ex();
  public:
  void unsafe_arena_set_allocated_ex(
      ::InforGuard_::ExceptionError* ex);
  ::InforGuard_::ExceptionError* unsafe_arena_release_ex();

  // int32 ret = 3;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.GetListExRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::NetFileListNode > filelist_;
  ::InforGuard_::ExceptionError* ex_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NetDirectory_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetTreeReq

// .InforGuard_.netCallData call = 1;
inline bool GetTreeReq::_internal_has_call() const {
  return this != internal_default_instance() && call_ != nullptr;
}
inline bool GetTreeReq::has_call() const {
  return _internal_has_call();
}
inline const ::InforGuard_::netCallData& GetTreeReq::_internal_call() const {
  const ::InforGuard_::netCallData* p = call_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::netCallData*>(
      &::InforGuard_::_netCallData_default_instance_);
}
inline const ::InforGuard_::netCallData& GetTreeReq::call() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetTreeReq.call)
  return _internal_call();
}
inline void GetTreeReq::unsafe_arena_set_allocated_call(
    ::InforGuard_::netCallData* call) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  call_ = call;
  if (call) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.GetTreeReq.call)
}
inline ::InforGuard_::netCallData* GetTreeReq::release_call() {
  auto temp = unsafe_arena_release_call();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::netCallData* GetTreeReq::unsafe_arena_release_call() {
  // @@protoc_insertion_point(field_release:InforGuard_.GetTreeReq.call)
  
  ::InforGuard_::netCallData* temp = call_;
  call_ = nullptr;
  return temp;
}
inline ::InforGuard_::netCallData* GetTreeReq::_internal_mutable_call() {
  
  if (call_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::netCallData>(GetArena());
    call_ = p;
  }
  return call_;
}
inline ::InforGuard_::netCallData* GetTreeReq::mutable_call() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.GetTreeReq.call)
  return _internal_mutable_call();
}
inline void GetTreeReq::set_allocated_call(::InforGuard_::netCallData* call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  if (call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call)->GetArena();
    if (message_arena != submessage_arena) {
      call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call, submessage_arena);
    }
    
  } else {
    
  }
  call_ = call;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.GetTreeReq.call)
}

// repeated .InforGuard_.netIpPort seqIpPort = 2;
inline int GetTreeReq::_internal_seqipport_size() const {
  return seqipport_.size();
}
inline int GetTreeReq::seqipport_size() const {
  return _internal_seqipport_size();
}
inline ::InforGuard_::netIpPort* GetTreeReq::mutable_seqipport(int index) {
  // @@protoc_insertion_point(field_mutable:InforGuard_.GetTreeReq.seqIpPort)
  return seqipport_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort >*
GetTreeReq::mutable_seqipport() {
  // @@protoc_insertion_point(field_mutable_list:InforGuard_.GetTreeReq.seqIpPort)
  return &seqipport_;
}
inline const ::InforGuard_::netIpPort& GetTreeReq::_internal_seqipport(int index) const {
  return seqipport_.Get(index);
}
inline const ::InforGuard_::netIpPort& GetTreeReq::seqipport(int index) const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetTreeReq.seqIpPort)
  return _internal_seqipport(index);
}
inline ::InforGuard_::netIpPort* GetTreeReq::_internal_add_seqipport() {
  return seqipport_.Add();
}
inline ::InforGuard_::netIpPort* GetTreeReq::add_seqipport() {
  // @@protoc_insertion_point(field_add:InforGuard_.GetTreeReq.seqIpPort)
  return _internal_add_seqipport();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort >&
GetTreeReq::seqipport() const {
  // @@protoc_insertion_point(field_list:InforGuard_.GetTreeReq.seqIpPort)
  return seqipport_;
}

// bytes remotefoldername = 3;
inline void GetTreeReq::clear_remotefoldername() {
  remotefoldername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetTreeReq::remotefoldername() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetTreeReq.remotefoldername)
  return _internal_remotefoldername();
}
inline void GetTreeReq::set_remotefoldername(const std::string& value) {
  _internal_set_remotefoldername(value);
  // @@protoc_insertion_point(field_set:InforGuard_.GetTreeReq.remotefoldername)
}
inline std::string* GetTreeReq::mutable_remotefoldername() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.GetTreeReq.remotefoldername)
  return _internal_mutable_remotefoldername();
}
inline const std::string& GetTreeReq::_internal_remotefoldername() const {
  return remotefoldername_.Get();
}
inline void GetTreeReq::_internal_set_remotefoldername(const std::string& value) {
  
  remotefoldername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetTreeReq::set_remotefoldername(std::string&& value) {
  
  remotefoldername_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.GetTreeReq.remotefoldername)
}
inline void GetTreeReq::set_remotefoldername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remotefoldername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.GetTreeReq.remotefoldername)
}
inline void GetTreeReq::set_remotefoldername(const void* value,
    size_t size) {
  
  remotefoldername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.GetTreeReq.remotefoldername)
}
inline std::string* GetTreeReq::_internal_mutable_remotefoldername() {
  
  return remotefoldername_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetTreeReq::release_remotefoldername() {
  // @@protoc_insertion_point(field_release:InforGuard_.GetTreeReq.remotefoldername)
  return remotefoldername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetTreeReq::set_allocated_remotefoldername(std::string* remotefoldername) {
  if (remotefoldername != nullptr) {
    
  } else {
    
  }
  remotefoldername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remotefoldername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.GetTreeReq.remotefoldername)
}
inline std::string* GetTreeReq::unsafe_arena_release_remotefoldername() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.GetTreeReq.remotefoldername)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return remotefoldername_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetTreeReq::unsafe_arena_set_allocated_remotefoldername(
    std::string* remotefoldername) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (remotefoldername != nullptr) {
    
  } else {
    
  }
  remotefoldername_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      remotefoldername, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.GetTreeReq.remotefoldername)
}

// int32 mode = 4;
inline void GetTreeReq::clear_mode() {
  mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTreeReq::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTreeReq::mode() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetTreeReq.mode)
  return _internal_mode();
}
inline void GetTreeReq::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mode_ = value;
}
inline void GetTreeReq::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:InforGuard_.GetTreeReq.mode)
}

// -------------------------------------------------------------------

// GetTreeRes

// .InforGuard_.netCallData call = 1;
inline bool GetTreeRes::_internal_has_call() const {
  return this != internal_default_instance() && call_ != nullptr;
}
inline bool GetTreeRes::has_call() const {
  return _internal_has_call();
}
inline const ::InforGuard_::netCallData& GetTreeRes::_internal_call() const {
  const ::InforGuard_::netCallData* p = call_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::netCallData*>(
      &::InforGuard_::_netCallData_default_instance_);
}
inline const ::InforGuard_::netCallData& GetTreeRes::call() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetTreeRes.call)
  return _internal_call();
}
inline void GetTreeRes::unsafe_arena_set_allocated_call(
    ::InforGuard_::netCallData* call) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  call_ = call;
  if (call) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.GetTreeRes.call)
}
inline ::InforGuard_::netCallData* GetTreeRes::release_call() {
  auto temp = unsafe_arena_release_call();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::netCallData* GetTreeRes::unsafe_arena_release_call() {
  // @@protoc_insertion_point(field_release:InforGuard_.GetTreeRes.call)
  
  ::InforGuard_::netCallData* temp = call_;
  call_ = nullptr;
  return temp;
}
inline ::InforGuard_::netCallData* GetTreeRes::_internal_mutable_call() {
  
  if (call_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::netCallData>(GetArena());
    call_ = p;
  }
  return call_;
}
inline ::InforGuard_::netCallData* GetTreeRes::mutable_call() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.GetTreeRes.call)
  return _internal_mutable_call();
}
inline void GetTreeRes::set_allocated_call(::InforGuard_::netCallData* call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  if (call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call)->GetArena();
    if (message_arena != submessage_arena) {
      call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call, submessage_arena);
    }
    
  } else {
    
  }
  call_ = call;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.GetTreeRes.call)
}

// .InforGuard_.ExceptionError ex = 2;
inline bool GetTreeRes::_internal_has_ex() const {
  return this != internal_default_instance() && ex_ != nullptr;
}
inline bool GetTreeRes::has_ex() const {
  return _internal_has_ex();
}
inline const ::InforGuard_::ExceptionError& GetTreeRes::_internal_ex() const {
  const ::InforGuard_::ExceptionError* p = ex_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::ExceptionError*>(
      &::InforGuard_::_ExceptionError_default_instance_);
}
inline const ::InforGuard_::ExceptionError& GetTreeRes::ex() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetTreeRes.ex)
  return _internal_ex();
}
inline void GetTreeRes::unsafe_arena_set_allocated_ex(
    ::InforGuard_::ExceptionError* ex) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  ex_ = ex;
  if (ex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.GetTreeRes.ex)
}
inline ::InforGuard_::ExceptionError* GetTreeRes::release_ex() {
  auto temp = unsafe_arena_release_ex();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::ExceptionError* GetTreeRes::unsafe_arena_release_ex() {
  // @@protoc_insertion_point(field_release:InforGuard_.GetTreeRes.ex)
  
  ::InforGuard_::ExceptionError* temp = ex_;
  ex_ = nullptr;
  return temp;
}
inline ::InforGuard_::ExceptionError* GetTreeRes::_internal_mutable_ex() {
  
  if (ex_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::ExceptionError>(GetArena());
    ex_ = p;
  }
  return ex_;
}
inline ::InforGuard_::ExceptionError* GetTreeRes::mutable_ex() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.GetTreeRes.ex)
  return _internal_mutable_ex();
}
inline void GetTreeRes::set_allocated_ex(::InforGuard_::ExceptionError* ex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  if (ex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex)->GetArena();
    if (message_arena != submessage_arena) {
      ex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ex, submessage_arena);
    }
    
  } else {
    
  }
  ex_ = ex;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.GetTreeRes.ex)
}

// repeated .InforGuard_.NetFileTreeNode treenode = 3;
inline int GetTreeRes::_internal_treenode_size() const {
  return treenode_.size();
}
inline int GetTreeRes::treenode_size() const {
  return _internal_treenode_size();
}
inline ::InforGuard_::NetFileTreeNode* GetTreeRes::mutable_treenode(int index) {
  // @@protoc_insertion_point(field_mutable:InforGuard_.GetTreeRes.treenode)
  return treenode_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::NetFileTreeNode >*
GetTreeRes::mutable_treenode() {
  // @@protoc_insertion_point(field_mutable_list:InforGuard_.GetTreeRes.treenode)
  return &treenode_;
}
inline const ::InforGuard_::NetFileTreeNode& GetTreeRes::_internal_treenode(int index) const {
  return treenode_.Get(index);
}
inline const ::InforGuard_::NetFileTreeNode& GetTreeRes::treenode(int index) const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetTreeRes.treenode)
  return _internal_treenode(index);
}
inline ::InforGuard_::NetFileTreeNode* GetTreeRes::_internal_add_treenode() {
  return treenode_.Add();
}
inline ::InforGuard_::NetFileTreeNode* GetTreeRes::add_treenode() {
  // @@protoc_insertion_point(field_add:InforGuard_.GetTreeRes.treenode)
  return _internal_add_treenode();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::NetFileTreeNode >&
GetTreeRes::treenode() const {
  // @@protoc_insertion_point(field_list:InforGuard_.GetTreeRes.treenode)
  return treenode_;
}

// int32 ret = 4;
inline void GetTreeRes::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTreeRes::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTreeRes::ret() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetTreeRes.ret)
  return _internal_ret();
}
inline void GetTreeRes::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void GetTreeRes::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:InforGuard_.GetTreeRes.ret)
}

// -------------------------------------------------------------------

// GetListReq

// .InforGuard_.netCallData call = 1;
inline bool GetListReq::_internal_has_call() const {
  return this != internal_default_instance() && call_ != nullptr;
}
inline bool GetListReq::has_call() const {
  return _internal_has_call();
}
inline const ::InforGuard_::netCallData& GetListReq::_internal_call() const {
  const ::InforGuard_::netCallData* p = call_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::netCallData*>(
      &::InforGuard_::_netCallData_default_instance_);
}
inline const ::InforGuard_::netCallData& GetListReq::call() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetListReq.call)
  return _internal_call();
}
inline void GetListReq::unsafe_arena_set_allocated_call(
    ::InforGuard_::netCallData* call) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  call_ = call;
  if (call) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.GetListReq.call)
}
inline ::InforGuard_::netCallData* GetListReq::release_call() {
  auto temp = unsafe_arena_release_call();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::netCallData* GetListReq::unsafe_arena_release_call() {
  // @@protoc_insertion_point(field_release:InforGuard_.GetListReq.call)
  
  ::InforGuard_::netCallData* temp = call_;
  call_ = nullptr;
  return temp;
}
inline ::InforGuard_::netCallData* GetListReq::_internal_mutable_call() {
  
  if (call_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::netCallData>(GetArena());
    call_ = p;
  }
  return call_;
}
inline ::InforGuard_::netCallData* GetListReq::mutable_call() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.GetListReq.call)
  return _internal_mutable_call();
}
inline void GetListReq::set_allocated_call(::InforGuard_::netCallData* call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  if (call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call)->GetArena();
    if (message_arena != submessage_arena) {
      call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call, submessage_arena);
    }
    
  } else {
    
  }
  call_ = call;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.GetListReq.call)
}

// repeated .InforGuard_.netIpPort seqIpPort = 2;
inline int GetListReq::_internal_seqipport_size() const {
  return seqipport_.size();
}
inline int GetListReq::seqipport_size() const {
  return _internal_seqipport_size();
}
inline ::InforGuard_::netIpPort* GetListReq::mutable_seqipport(int index) {
  // @@protoc_insertion_point(field_mutable:InforGuard_.GetListReq.seqIpPort)
  return seqipport_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort >*
GetListReq::mutable_seqipport() {
  // @@protoc_insertion_point(field_mutable_list:InforGuard_.GetListReq.seqIpPort)
  return &seqipport_;
}
inline const ::InforGuard_::netIpPort& GetListReq::_internal_seqipport(int index) const {
  return seqipport_.Get(index);
}
inline const ::InforGuard_::netIpPort& GetListReq::seqipport(int index) const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetListReq.seqIpPort)
  return _internal_seqipport(index);
}
inline ::InforGuard_::netIpPort* GetListReq::_internal_add_seqipport() {
  return seqipport_.Add();
}
inline ::InforGuard_::netIpPort* GetListReq::add_seqipport() {
  // @@protoc_insertion_point(field_add:InforGuard_.GetListReq.seqIpPort)
  return _internal_add_seqipport();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort >&
GetListReq::seqipport() const {
  // @@protoc_insertion_point(field_list:InforGuard_.GetListReq.seqIpPort)
  return seqipport_;
}

// bytes remotefoldername = 3;
inline void GetListReq::clear_remotefoldername() {
  remotefoldername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetListReq::remotefoldername() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetListReq.remotefoldername)
  return _internal_remotefoldername();
}
inline void GetListReq::set_remotefoldername(const std::string& value) {
  _internal_set_remotefoldername(value);
  // @@protoc_insertion_point(field_set:InforGuard_.GetListReq.remotefoldername)
}
inline std::string* GetListReq::mutable_remotefoldername() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.GetListReq.remotefoldername)
  return _internal_mutable_remotefoldername();
}
inline const std::string& GetListReq::_internal_remotefoldername() const {
  return remotefoldername_.Get();
}
inline void GetListReq::_internal_set_remotefoldername(const std::string& value) {
  
  remotefoldername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetListReq::set_remotefoldername(std::string&& value) {
  
  remotefoldername_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.GetListReq.remotefoldername)
}
inline void GetListReq::set_remotefoldername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remotefoldername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.GetListReq.remotefoldername)
}
inline void GetListReq::set_remotefoldername(const void* value,
    size_t size) {
  
  remotefoldername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.GetListReq.remotefoldername)
}
inline std::string* GetListReq::_internal_mutable_remotefoldername() {
  
  return remotefoldername_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetListReq::release_remotefoldername() {
  // @@protoc_insertion_point(field_release:InforGuard_.GetListReq.remotefoldername)
  return remotefoldername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetListReq::set_allocated_remotefoldername(std::string* remotefoldername) {
  if (remotefoldername != nullptr) {
    
  } else {
    
  }
  remotefoldername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remotefoldername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.GetListReq.remotefoldername)
}
inline std::string* GetListReq::unsafe_arena_release_remotefoldername() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.GetListReq.remotefoldername)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return remotefoldername_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetListReq::unsafe_arena_set_allocated_remotefoldername(
    std::string* remotefoldername) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (remotefoldername != nullptr) {
    
  } else {
    
  }
  remotefoldername_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      remotefoldername, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.GetListReq.remotefoldername)
}

// int32 mode = 4;
inline void GetListReq::clear_mode() {
  mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetListReq::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetListReq::mode() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetListReq.mode)
  return _internal_mode();
}
inline void GetListReq::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mode_ = value;
}
inline void GetListReq::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:InforGuard_.GetListReq.mode)
}

// -------------------------------------------------------------------

// GetListRes

// .InforGuard_.netCallData call = 1;
inline bool GetListRes::_internal_has_call() const {
  return this != internal_default_instance() && call_ != nullptr;
}
inline bool GetListRes::has_call() const {
  return _internal_has_call();
}
inline const ::InforGuard_::netCallData& GetListRes::_internal_call() const {
  const ::InforGuard_::netCallData* p = call_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::netCallData*>(
      &::InforGuard_::_netCallData_default_instance_);
}
inline const ::InforGuard_::netCallData& GetListRes::call() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetListRes.call)
  return _internal_call();
}
inline void GetListRes::unsafe_arena_set_allocated_call(
    ::InforGuard_::netCallData* call) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  call_ = call;
  if (call) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.GetListRes.call)
}
inline ::InforGuard_::netCallData* GetListRes::release_call() {
  auto temp = unsafe_arena_release_call();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::netCallData* GetListRes::unsafe_arena_release_call() {
  // @@protoc_insertion_point(field_release:InforGuard_.GetListRes.call)
  
  ::InforGuard_::netCallData* temp = call_;
  call_ = nullptr;
  return temp;
}
inline ::InforGuard_::netCallData* GetListRes::_internal_mutable_call() {
  
  if (call_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::netCallData>(GetArena());
    call_ = p;
  }
  return call_;
}
inline ::InforGuard_::netCallData* GetListRes::mutable_call() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.GetListRes.call)
  return _internal_mutable_call();
}
inline void GetListRes::set_allocated_call(::InforGuard_::netCallData* call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  if (call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call)->GetArena();
    if (message_arena != submessage_arena) {
      call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call, submessage_arena);
    }
    
  } else {
    
  }
  call_ = call;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.GetListRes.call)
}

// .InforGuard_.ExceptionError ex = 2;
inline bool GetListRes::_internal_has_ex() const {
  return this != internal_default_instance() && ex_ != nullptr;
}
inline bool GetListRes::has_ex() const {
  return _internal_has_ex();
}
inline const ::InforGuard_::ExceptionError& GetListRes::_internal_ex() const {
  const ::InforGuard_::ExceptionError* p = ex_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::ExceptionError*>(
      &::InforGuard_::_ExceptionError_default_instance_);
}
inline const ::InforGuard_::ExceptionError& GetListRes::ex() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetListRes.ex)
  return _internal_ex();
}
inline void GetListRes::unsafe_arena_set_allocated_ex(
    ::InforGuard_::ExceptionError* ex) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  ex_ = ex;
  if (ex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.GetListRes.ex)
}
inline ::InforGuard_::ExceptionError* GetListRes::release_ex() {
  auto temp = unsafe_arena_release_ex();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::ExceptionError* GetListRes::unsafe_arena_release_ex() {
  // @@protoc_insertion_point(field_release:InforGuard_.GetListRes.ex)
  
  ::InforGuard_::ExceptionError* temp = ex_;
  ex_ = nullptr;
  return temp;
}
inline ::InforGuard_::ExceptionError* GetListRes::_internal_mutable_ex() {
  
  if (ex_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::ExceptionError>(GetArena());
    ex_ = p;
  }
  return ex_;
}
inline ::InforGuard_::ExceptionError* GetListRes::mutable_ex() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.GetListRes.ex)
  return _internal_mutable_ex();
}
inline void GetListRes::set_allocated_ex(::InforGuard_::ExceptionError* ex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  if (ex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex)->GetArena();
    if (message_arena != submessage_arena) {
      ex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ex, submessage_arena);
    }
    
  } else {
    
  }
  ex_ = ex;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.GetListRes.ex)
}

// repeated .InforGuard_.NetFileListNode filelist = 3;
inline int GetListRes::_internal_filelist_size() const {
  return filelist_.size();
}
inline int GetListRes::filelist_size() const {
  return _internal_filelist_size();
}
inline ::InforGuard_::NetFileListNode* GetListRes::mutable_filelist(int index) {
  // @@protoc_insertion_point(field_mutable:InforGuard_.GetListRes.filelist)
  return filelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::NetFileListNode >*
GetListRes::mutable_filelist() {
  // @@protoc_insertion_point(field_mutable_list:InforGuard_.GetListRes.filelist)
  return &filelist_;
}
inline const ::InforGuard_::NetFileListNode& GetListRes::_internal_filelist(int index) const {
  return filelist_.Get(index);
}
inline const ::InforGuard_::NetFileListNode& GetListRes::filelist(int index) const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetListRes.filelist)
  return _internal_filelist(index);
}
inline ::InforGuard_::NetFileListNode* GetListRes::_internal_add_filelist() {
  return filelist_.Add();
}
inline ::InforGuard_::NetFileListNode* GetListRes::add_filelist() {
  // @@protoc_insertion_point(field_add:InforGuard_.GetListRes.filelist)
  return _internal_add_filelist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::NetFileListNode >&
GetListRes::filelist() const {
  // @@protoc_insertion_point(field_list:InforGuard_.GetListRes.filelist)
  return filelist_;
}

// int32 ret = 4;
inline void GetListRes::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetListRes::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetListRes::ret() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetListRes.ret)
  return _internal_ret();
}
inline void GetListRes::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void GetListRes::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:InforGuard_.GetListRes.ret)
}

// -------------------------------------------------------------------

// GetTreeExReq

// repeated .InforGuard_.netIpPort seqIpPort = 1;
inline int GetTreeExReq::_internal_seqipport_size() const {
  return seqipport_.size();
}
inline int GetTreeExReq::seqipport_size() const {
  return _internal_seqipport_size();
}
inline ::InforGuard_::netIpPort* GetTreeExReq::mutable_seqipport(int index) {
  // @@protoc_insertion_point(field_mutable:InforGuard_.GetTreeExReq.seqIpPort)
  return seqipport_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort >*
GetTreeExReq::mutable_seqipport() {
  // @@protoc_insertion_point(field_mutable_list:InforGuard_.GetTreeExReq.seqIpPort)
  return &seqipport_;
}
inline const ::InforGuard_::netIpPort& GetTreeExReq::_internal_seqipport(int index) const {
  return seqipport_.Get(index);
}
inline const ::InforGuard_::netIpPort& GetTreeExReq::seqipport(int index) const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetTreeExReq.seqIpPort)
  return _internal_seqipport(index);
}
inline ::InforGuard_::netIpPort* GetTreeExReq::_internal_add_seqipport() {
  return seqipport_.Add();
}
inline ::InforGuard_::netIpPort* GetTreeExReq::add_seqipport() {
  // @@protoc_insertion_point(field_add:InforGuard_.GetTreeExReq.seqIpPort)
  return _internal_add_seqipport();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort >&
GetTreeExReq::seqipport() const {
  // @@protoc_insertion_point(field_list:InforGuard_.GetTreeExReq.seqIpPort)
  return seqipport_;
}

// bytes remotefoldername = 2;
inline void GetTreeExReq::clear_remotefoldername() {
  remotefoldername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetTreeExReq::remotefoldername() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetTreeExReq.remotefoldername)
  return _internal_remotefoldername();
}
inline void GetTreeExReq::set_remotefoldername(const std::string& value) {
  _internal_set_remotefoldername(value);
  // @@protoc_insertion_point(field_set:InforGuard_.GetTreeExReq.remotefoldername)
}
inline std::string* GetTreeExReq::mutable_remotefoldername() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.GetTreeExReq.remotefoldername)
  return _internal_mutable_remotefoldername();
}
inline const std::string& GetTreeExReq::_internal_remotefoldername() const {
  return remotefoldername_.Get();
}
inline void GetTreeExReq::_internal_set_remotefoldername(const std::string& value) {
  
  remotefoldername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetTreeExReq::set_remotefoldername(std::string&& value) {
  
  remotefoldername_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.GetTreeExReq.remotefoldername)
}
inline void GetTreeExReq::set_remotefoldername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remotefoldername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.GetTreeExReq.remotefoldername)
}
inline void GetTreeExReq::set_remotefoldername(const void* value,
    size_t size) {
  
  remotefoldername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.GetTreeExReq.remotefoldername)
}
inline std::string* GetTreeExReq::_internal_mutable_remotefoldername() {
  
  return remotefoldername_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetTreeExReq::release_remotefoldername() {
  // @@protoc_insertion_point(field_release:InforGuard_.GetTreeExReq.remotefoldername)
  return remotefoldername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetTreeExReq::set_allocated_remotefoldername(std::string* remotefoldername) {
  if (remotefoldername != nullptr) {
    
  } else {
    
  }
  remotefoldername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remotefoldername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.GetTreeExReq.remotefoldername)
}
inline std::string* GetTreeExReq::unsafe_arena_release_remotefoldername() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.GetTreeExReq.remotefoldername)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return remotefoldername_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetTreeExReq::unsafe_arena_set_allocated_remotefoldername(
    std::string* remotefoldername) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (remotefoldername != nullptr) {
    
  } else {
    
  }
  remotefoldername_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      remotefoldername, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.GetTreeExReq.remotefoldername)
}

// int32 mode = 3;
inline void GetTreeExReq::clear_mode() {
  mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTreeExReq::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTreeExReq::mode() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetTreeExReq.mode)
  return _internal_mode();
}
inline void GetTreeExReq::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mode_ = value;
}
inline void GetTreeExReq::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:InforGuard_.GetTreeExReq.mode)
}

// -------------------------------------------------------------------

// GetTreeExRes

// .InforGuard_.ExceptionError ex = 1;
inline bool GetTreeExRes::_internal_has_ex() const {
  return this != internal_default_instance() && ex_ != nullptr;
}
inline bool GetTreeExRes::has_ex() const {
  return _internal_has_ex();
}
inline const ::InforGuard_::ExceptionError& GetTreeExRes::_internal_ex() const {
  const ::InforGuard_::ExceptionError* p = ex_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::ExceptionError*>(
      &::InforGuard_::_ExceptionError_default_instance_);
}
inline const ::InforGuard_::ExceptionError& GetTreeExRes::ex() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetTreeExRes.ex)
  return _internal_ex();
}
inline void GetTreeExRes::unsafe_arena_set_allocated_ex(
    ::InforGuard_::ExceptionError* ex) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  ex_ = ex;
  if (ex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.GetTreeExRes.ex)
}
inline ::InforGuard_::ExceptionError* GetTreeExRes::release_ex() {
  auto temp = unsafe_arena_release_ex();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::ExceptionError* GetTreeExRes::unsafe_arena_release_ex() {
  // @@protoc_insertion_point(field_release:InforGuard_.GetTreeExRes.ex)
  
  ::InforGuard_::ExceptionError* temp = ex_;
  ex_ = nullptr;
  return temp;
}
inline ::InforGuard_::ExceptionError* GetTreeExRes::_internal_mutable_ex() {
  
  if (ex_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::ExceptionError>(GetArena());
    ex_ = p;
  }
  return ex_;
}
inline ::InforGuard_::ExceptionError* GetTreeExRes::mutable_ex() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.GetTreeExRes.ex)
  return _internal_mutable_ex();
}
inline void GetTreeExRes::set_allocated_ex(::InforGuard_::ExceptionError* ex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  if (ex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex)->GetArena();
    if (message_arena != submessage_arena) {
      ex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ex, submessage_arena);
    }
    
  } else {
    
  }
  ex_ = ex;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.GetTreeExRes.ex)
}

// repeated .InforGuard_.NetFileTreeNode treenode = 2;
inline int GetTreeExRes::_internal_treenode_size() const {
  return treenode_.size();
}
inline int GetTreeExRes::treenode_size() const {
  return _internal_treenode_size();
}
inline ::InforGuard_::NetFileTreeNode* GetTreeExRes::mutable_treenode(int index) {
  // @@protoc_insertion_point(field_mutable:InforGuard_.GetTreeExRes.treenode)
  return treenode_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::NetFileTreeNode >*
GetTreeExRes::mutable_treenode() {
  // @@protoc_insertion_point(field_mutable_list:InforGuard_.GetTreeExRes.treenode)
  return &treenode_;
}
inline const ::InforGuard_::NetFileTreeNode& GetTreeExRes::_internal_treenode(int index) const {
  return treenode_.Get(index);
}
inline const ::InforGuard_::NetFileTreeNode& GetTreeExRes::treenode(int index) const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetTreeExRes.treenode)
  return _internal_treenode(index);
}
inline ::InforGuard_::NetFileTreeNode* GetTreeExRes::_internal_add_treenode() {
  return treenode_.Add();
}
inline ::InforGuard_::NetFileTreeNode* GetTreeExRes::add_treenode() {
  // @@protoc_insertion_point(field_add:InforGuard_.GetTreeExRes.treenode)
  return _internal_add_treenode();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::NetFileTreeNode >&
GetTreeExRes::treenode() const {
  // @@protoc_insertion_point(field_list:InforGuard_.GetTreeExRes.treenode)
  return treenode_;
}

// int32 ret = 3;
inline void GetTreeExRes::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTreeExRes::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTreeExRes::ret() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetTreeExRes.ret)
  return _internal_ret();
}
inline void GetTreeExRes::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void GetTreeExRes::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:InforGuard_.GetTreeExRes.ret)
}

// -------------------------------------------------------------------

// GetListExReq

// repeated .InforGuard_.netIpPort seqIpPort = 1;
inline int GetListExReq::_internal_seqipport_size() const {
  return seqipport_.size();
}
inline int GetListExReq::seqipport_size() const {
  return _internal_seqipport_size();
}
inline ::InforGuard_::netIpPort* GetListExReq::mutable_seqipport(int index) {
  // @@protoc_insertion_point(field_mutable:InforGuard_.GetListExReq.seqIpPort)
  return seqipport_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort >*
GetListExReq::mutable_seqipport() {
  // @@protoc_insertion_point(field_mutable_list:InforGuard_.GetListExReq.seqIpPort)
  return &seqipport_;
}
inline const ::InforGuard_::netIpPort& GetListExReq::_internal_seqipport(int index) const {
  return seqipport_.Get(index);
}
inline const ::InforGuard_::netIpPort& GetListExReq::seqipport(int index) const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetListExReq.seqIpPort)
  return _internal_seqipport(index);
}
inline ::InforGuard_::netIpPort* GetListExReq::_internal_add_seqipport() {
  return seqipport_.Add();
}
inline ::InforGuard_::netIpPort* GetListExReq::add_seqipport() {
  // @@protoc_insertion_point(field_add:InforGuard_.GetListExReq.seqIpPort)
  return _internal_add_seqipport();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort >&
GetListExReq::seqipport() const {
  // @@protoc_insertion_point(field_list:InforGuard_.GetListExReq.seqIpPort)
  return seqipport_;
}

// bytes remotefoldername = 2;
inline void GetListExReq::clear_remotefoldername() {
  remotefoldername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetListExReq::remotefoldername() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetListExReq.remotefoldername)
  return _internal_remotefoldername();
}
inline void GetListExReq::set_remotefoldername(const std::string& value) {
  _internal_set_remotefoldername(value);
  // @@protoc_insertion_point(field_set:InforGuard_.GetListExReq.remotefoldername)
}
inline std::string* GetListExReq::mutable_remotefoldername() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.GetListExReq.remotefoldername)
  return _internal_mutable_remotefoldername();
}
inline const std::string& GetListExReq::_internal_remotefoldername() const {
  return remotefoldername_.Get();
}
inline void GetListExReq::_internal_set_remotefoldername(const std::string& value) {
  
  remotefoldername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetListExReq::set_remotefoldername(std::string&& value) {
  
  remotefoldername_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.GetListExReq.remotefoldername)
}
inline void GetListExReq::set_remotefoldername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remotefoldername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.GetListExReq.remotefoldername)
}
inline void GetListExReq::set_remotefoldername(const void* value,
    size_t size) {
  
  remotefoldername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.GetListExReq.remotefoldername)
}
inline std::string* GetListExReq::_internal_mutable_remotefoldername() {
  
  return remotefoldername_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetListExReq::release_remotefoldername() {
  // @@protoc_insertion_point(field_release:InforGuard_.GetListExReq.remotefoldername)
  return remotefoldername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetListExReq::set_allocated_remotefoldername(std::string* remotefoldername) {
  if (remotefoldername != nullptr) {
    
  } else {
    
  }
  remotefoldername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remotefoldername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.GetListExReq.remotefoldername)
}
inline std::string* GetListExReq::unsafe_arena_release_remotefoldername() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.GetListExReq.remotefoldername)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return remotefoldername_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetListExReq::unsafe_arena_set_allocated_remotefoldername(
    std::string* remotefoldername) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (remotefoldername != nullptr) {
    
  } else {
    
  }
  remotefoldername_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      remotefoldername, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.GetListExReq.remotefoldername)
}

// int32 mode = 3;
inline void GetListExReq::clear_mode() {
  mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetListExReq::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetListExReq::mode() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetListExReq.mode)
  return _internal_mode();
}
inline void GetListExReq::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mode_ = value;
}
inline void GetListExReq::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:InforGuard_.GetListExReq.mode)
}

// -------------------------------------------------------------------

// GetListExRes

// .InforGuard_.ExceptionError ex = 1;
inline bool GetListExRes::_internal_has_ex() const {
  return this != internal_default_instance() && ex_ != nullptr;
}
inline bool GetListExRes::has_ex() const {
  return _internal_has_ex();
}
inline const ::InforGuard_::ExceptionError& GetListExRes::_internal_ex() const {
  const ::InforGuard_::ExceptionError* p = ex_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::ExceptionError*>(
      &::InforGuard_::_ExceptionError_default_instance_);
}
inline const ::InforGuard_::ExceptionError& GetListExRes::ex() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetListExRes.ex)
  return _internal_ex();
}
inline void GetListExRes::unsafe_arena_set_allocated_ex(
    ::InforGuard_::ExceptionError* ex) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  ex_ = ex;
  if (ex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.GetListExRes.ex)
}
inline ::InforGuard_::ExceptionError* GetListExRes::release_ex() {
  auto temp = unsafe_arena_release_ex();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::ExceptionError* GetListExRes::unsafe_arena_release_ex() {
  // @@protoc_insertion_point(field_release:InforGuard_.GetListExRes.ex)
  
  ::InforGuard_::ExceptionError* temp = ex_;
  ex_ = nullptr;
  return temp;
}
inline ::InforGuard_::ExceptionError* GetListExRes::_internal_mutable_ex() {
  
  if (ex_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::ExceptionError>(GetArena());
    ex_ = p;
  }
  return ex_;
}
inline ::InforGuard_::ExceptionError* GetListExRes::mutable_ex() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.GetListExRes.ex)
  return _internal_mutable_ex();
}
inline void GetListExRes::set_allocated_ex(::InforGuard_::ExceptionError* ex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  if (ex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex)->GetArena();
    if (message_arena != submessage_arena) {
      ex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ex, submessage_arena);
    }
    
  } else {
    
  }
  ex_ = ex;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.GetListExRes.ex)
}

// repeated .InforGuard_.NetFileListNode filelist = 2;
inline int GetListExRes::_internal_filelist_size() const {
  return filelist_.size();
}
inline int GetListExRes::filelist_size() const {
  return _internal_filelist_size();
}
inline ::InforGuard_::NetFileListNode* GetListExRes::mutable_filelist(int index) {
  // @@protoc_insertion_point(field_mutable:InforGuard_.GetListExRes.filelist)
  return filelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::NetFileListNode >*
GetListExRes::mutable_filelist() {
  // @@protoc_insertion_point(field_mutable_list:InforGuard_.GetListExRes.filelist)
  return &filelist_;
}
inline const ::InforGuard_::NetFileListNode& GetListExRes::_internal_filelist(int index) const {
  return filelist_.Get(index);
}
inline const ::InforGuard_::NetFileListNode& GetListExRes::filelist(int index) const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetListExRes.filelist)
  return _internal_filelist(index);
}
inline ::InforGuard_::NetFileListNode* GetListExRes::_internal_add_filelist() {
  return filelist_.Add();
}
inline ::InforGuard_::NetFileListNode* GetListExRes::add_filelist() {
  // @@protoc_insertion_point(field_add:InforGuard_.GetListExRes.filelist)
  return _internal_add_filelist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::NetFileListNode >&
GetListExRes::filelist() const {
  // @@protoc_insertion_point(field_list:InforGuard_.GetListExRes.filelist)
  return filelist_;
}

// int32 ret = 3;
inline void GetListExRes::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetListExRes::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetListExRes::ret() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetListExRes.ret)
  return _internal_ret();
}
inline void GetListExRes::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void GetListExRes::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:InforGuard_.GetListExRes.ret)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace InforGuard_

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_NetDirectory_2eproto
