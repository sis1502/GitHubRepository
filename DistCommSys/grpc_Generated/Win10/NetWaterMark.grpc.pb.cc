// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: NetWaterMark.proto

#include "NetWaterMark.pb.h"
#include "NetWaterMark.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace InforGuard_ {

static const char* NetWaterMark_method_names[] = {
  "/InforGuard_.NetWaterMark/Check",
  "/InforGuard_.NetWaterMark/Set",
  "/InforGuard_.NetWaterMark/Get",
  "/InforGuard_.NetWaterMark/Add",
  "/InforGuard_.NetWaterMark/Remove",
  "/InforGuard_.NetWaterMark/Rename",
  "/InforGuard_.NetWaterMark/Verify",
  "/InforGuard_.NetWaterMark/VerifyForFilter",
  "/InforGuard_.NetWaterMark/RequestResume",
};

std::unique_ptr< NetWaterMark::Stub> NetWaterMark::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NetWaterMark::Stub> stub(new NetWaterMark::Stub(channel));
  return stub;
}

NetWaterMark::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Check_(NetWaterMark_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Set_(NetWaterMark_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Get_(NetWaterMark_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Add_(NetWaterMark_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Remove_(NetWaterMark_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Rename_(NetWaterMark_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Verify_(NetWaterMark_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VerifyForFilter_(NetWaterMark_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestResume_(NetWaterMark_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NetWaterMark::Stub::Check(::grpc::ClientContext* context, const ::InforGuard_::CheckReq& request, ::InforGuard_::CheckRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Check_, context, request, response);
}

void NetWaterMark::Stub::experimental_async::Check(::grpc::ClientContext* context, const ::InforGuard_::CheckReq* request, ::InforGuard_::CheckRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Check_, context, request, response, std::move(f));
}

void NetWaterMark::Stub::experimental_async::Check(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::CheckRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Check_, context, request, response, std::move(f));
}

void NetWaterMark::Stub::experimental_async::Check(::grpc::ClientContext* context, const ::InforGuard_::CheckReq* request, ::InforGuard_::CheckRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Check_, context, request, response, reactor);
}

void NetWaterMark::Stub::experimental_async::Check(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::CheckRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Check_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::CheckRes>* NetWaterMark::Stub::AsyncCheckRaw(::grpc::ClientContext* context, const ::InforGuard_::CheckReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::CheckRes>::Create(channel_.get(), cq, rpcmethod_Check_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::CheckRes>* NetWaterMark::Stub::PrepareAsyncCheckRaw(::grpc::ClientContext* context, const ::InforGuard_::CheckReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::CheckRes>::Create(channel_.get(), cq, rpcmethod_Check_, context, request, false);
}

::grpc::Status NetWaterMark::Stub::Set(::grpc::ClientContext* context, const ::InforGuard_::SetReq& request, ::InforGuard_::SetRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Set_, context, request, response);
}

void NetWaterMark::Stub::experimental_async::Set(::grpc::ClientContext* context, const ::InforGuard_::SetReq* request, ::InforGuard_::SetRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Set_, context, request, response, std::move(f));
}

void NetWaterMark::Stub::experimental_async::Set(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::SetRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Set_, context, request, response, std::move(f));
}

void NetWaterMark::Stub::experimental_async::Set(::grpc::ClientContext* context, const ::InforGuard_::SetReq* request, ::InforGuard_::SetRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Set_, context, request, response, reactor);
}

void NetWaterMark::Stub::experimental_async::Set(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::SetRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Set_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::SetRes>* NetWaterMark::Stub::AsyncSetRaw(::grpc::ClientContext* context, const ::InforGuard_::SetReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::SetRes>::Create(channel_.get(), cq, rpcmethod_Set_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::SetRes>* NetWaterMark::Stub::PrepareAsyncSetRaw(::grpc::ClientContext* context, const ::InforGuard_::SetReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::SetRes>::Create(channel_.get(), cq, rpcmethod_Set_, context, request, false);
}

::grpc::Status NetWaterMark::Stub::Get(::grpc::ClientContext* context, const ::InforGuard_::GetReq& request, ::InforGuard_::GetRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Get_, context, request, response);
}

void NetWaterMark::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::InforGuard_::GetReq* request, ::InforGuard_::GetRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void NetWaterMark::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void NetWaterMark::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::InforGuard_::GetReq* request, ::InforGuard_::GetRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

void NetWaterMark::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::GetRes>* NetWaterMark::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::InforGuard_::GetReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::GetRes>::Create(channel_.get(), cq, rpcmethod_Get_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::GetRes>* NetWaterMark::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::InforGuard_::GetReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::GetRes>::Create(channel_.get(), cq, rpcmethod_Get_, context, request, false);
}

::grpc::Status NetWaterMark::Stub::Add(::grpc::ClientContext* context, const ::InforGuard_::AddReq& request, ::InforGuard_::AddRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Add_, context, request, response);
}

void NetWaterMark::Stub::experimental_async::Add(::grpc::ClientContext* context, const ::InforGuard_::AddReq* request, ::InforGuard_::AddRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Add_, context, request, response, std::move(f));
}

void NetWaterMark::Stub::experimental_async::Add(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::AddRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Add_, context, request, response, std::move(f));
}

void NetWaterMark::Stub::experimental_async::Add(::grpc::ClientContext* context, const ::InforGuard_::AddReq* request, ::InforGuard_::AddRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Add_, context, request, response, reactor);
}

void NetWaterMark::Stub::experimental_async::Add(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::AddRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Add_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::AddRes>* NetWaterMark::Stub::AsyncAddRaw(::grpc::ClientContext* context, const ::InforGuard_::AddReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::AddRes>::Create(channel_.get(), cq, rpcmethod_Add_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::AddRes>* NetWaterMark::Stub::PrepareAsyncAddRaw(::grpc::ClientContext* context, const ::InforGuard_::AddReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::AddRes>::Create(channel_.get(), cq, rpcmethod_Add_, context, request, false);
}

::grpc::Status NetWaterMark::Stub::Remove(::grpc::ClientContext* context, const ::InforGuard_::RemoveReq& request, ::InforGuard_::RemoveRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Remove_, context, request, response);
}

void NetWaterMark::Stub::experimental_async::Remove(::grpc::ClientContext* context, const ::InforGuard_::RemoveReq* request, ::InforGuard_::RemoveRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Remove_, context, request, response, std::move(f));
}

void NetWaterMark::Stub::experimental_async::Remove(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::RemoveRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Remove_, context, request, response, std::move(f));
}

void NetWaterMark::Stub::experimental_async::Remove(::grpc::ClientContext* context, const ::InforGuard_::RemoveReq* request, ::InforGuard_::RemoveRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Remove_, context, request, response, reactor);
}

void NetWaterMark::Stub::experimental_async::Remove(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::RemoveRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Remove_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::RemoveRes>* NetWaterMark::Stub::AsyncRemoveRaw(::grpc::ClientContext* context, const ::InforGuard_::RemoveReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::RemoveRes>::Create(channel_.get(), cq, rpcmethod_Remove_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::RemoveRes>* NetWaterMark::Stub::PrepareAsyncRemoveRaw(::grpc::ClientContext* context, const ::InforGuard_::RemoveReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::RemoveRes>::Create(channel_.get(), cq, rpcmethod_Remove_, context, request, false);
}

::grpc::Status NetWaterMark::Stub::Rename(::grpc::ClientContext* context, const ::InforGuard_::RenameReq& request, ::InforGuard_::RenameRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Rename_, context, request, response);
}

void NetWaterMark::Stub::experimental_async::Rename(::grpc::ClientContext* context, const ::InforGuard_::RenameReq* request, ::InforGuard_::RenameRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Rename_, context, request, response, std::move(f));
}

void NetWaterMark::Stub::experimental_async::Rename(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::RenameRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Rename_, context, request, response, std::move(f));
}

void NetWaterMark::Stub::experimental_async::Rename(::grpc::ClientContext* context, const ::InforGuard_::RenameReq* request, ::InforGuard_::RenameRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Rename_, context, request, response, reactor);
}

void NetWaterMark::Stub::experimental_async::Rename(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::RenameRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Rename_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::RenameRes>* NetWaterMark::Stub::AsyncRenameRaw(::grpc::ClientContext* context, const ::InforGuard_::RenameReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::RenameRes>::Create(channel_.get(), cq, rpcmethod_Rename_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::RenameRes>* NetWaterMark::Stub::PrepareAsyncRenameRaw(::grpc::ClientContext* context, const ::InforGuard_::RenameReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::RenameRes>::Create(channel_.get(), cq, rpcmethod_Rename_, context, request, false);
}

::grpc::Status NetWaterMark::Stub::Verify(::grpc::ClientContext* context, const ::InforGuard_::VerifyReq& request, ::InforGuard_::VerifyRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Verify_, context, request, response);
}

void NetWaterMark::Stub::experimental_async::Verify(::grpc::ClientContext* context, const ::InforGuard_::VerifyReq* request, ::InforGuard_::VerifyRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Verify_, context, request, response, std::move(f));
}

void NetWaterMark::Stub::experimental_async::Verify(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::VerifyRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Verify_, context, request, response, std::move(f));
}

void NetWaterMark::Stub::experimental_async::Verify(::grpc::ClientContext* context, const ::InforGuard_::VerifyReq* request, ::InforGuard_::VerifyRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Verify_, context, request, response, reactor);
}

void NetWaterMark::Stub::experimental_async::Verify(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::VerifyRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Verify_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::VerifyRes>* NetWaterMark::Stub::AsyncVerifyRaw(::grpc::ClientContext* context, const ::InforGuard_::VerifyReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::VerifyRes>::Create(channel_.get(), cq, rpcmethod_Verify_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::VerifyRes>* NetWaterMark::Stub::PrepareAsyncVerifyRaw(::grpc::ClientContext* context, const ::InforGuard_::VerifyReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::VerifyRes>::Create(channel_.get(), cq, rpcmethod_Verify_, context, request, false);
}

::grpc::Status NetWaterMark::Stub::VerifyForFilter(::grpc::ClientContext* context, const ::InforGuard_::VerifyForFilterReq& request, ::InforGuard_::VerifyForFilterRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_VerifyForFilter_, context, request, response);
}

void NetWaterMark::Stub::experimental_async::VerifyForFilter(::grpc::ClientContext* context, const ::InforGuard_::VerifyForFilterReq* request, ::InforGuard_::VerifyForFilterRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VerifyForFilter_, context, request, response, std::move(f));
}

void NetWaterMark::Stub::experimental_async::VerifyForFilter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::VerifyForFilterRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VerifyForFilter_, context, request, response, std::move(f));
}

void NetWaterMark::Stub::experimental_async::VerifyForFilter(::grpc::ClientContext* context, const ::InforGuard_::VerifyForFilterReq* request, ::InforGuard_::VerifyForFilterRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_VerifyForFilter_, context, request, response, reactor);
}

void NetWaterMark::Stub::experimental_async::VerifyForFilter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::VerifyForFilterRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_VerifyForFilter_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::VerifyForFilterRes>* NetWaterMark::Stub::AsyncVerifyForFilterRaw(::grpc::ClientContext* context, const ::InforGuard_::VerifyForFilterReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::VerifyForFilterRes>::Create(channel_.get(), cq, rpcmethod_VerifyForFilter_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::VerifyForFilterRes>* NetWaterMark::Stub::PrepareAsyncVerifyForFilterRaw(::grpc::ClientContext* context, const ::InforGuard_::VerifyForFilterReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::VerifyForFilterRes>::Create(channel_.get(), cq, rpcmethod_VerifyForFilter_, context, request, false);
}

::grpc::Status NetWaterMark::Stub::RequestResume(::grpc::ClientContext* context, const ::InforGuard_::RequestResumeReq& request, ::InforGuard_::RequestResumeRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RequestResume_, context, request, response);
}

void NetWaterMark::Stub::experimental_async::RequestResume(::grpc::ClientContext* context, const ::InforGuard_::RequestResumeReq* request, ::InforGuard_::RequestResumeRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RequestResume_, context, request, response, std::move(f));
}

void NetWaterMark::Stub::experimental_async::RequestResume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::RequestResumeRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RequestResume_, context, request, response, std::move(f));
}

void NetWaterMark::Stub::experimental_async::RequestResume(::grpc::ClientContext* context, const ::InforGuard_::RequestResumeReq* request, ::InforGuard_::RequestResumeRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RequestResume_, context, request, response, reactor);
}

void NetWaterMark::Stub::experimental_async::RequestResume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::RequestResumeRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RequestResume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::RequestResumeRes>* NetWaterMark::Stub::AsyncRequestResumeRaw(::grpc::ClientContext* context, const ::InforGuard_::RequestResumeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::RequestResumeRes>::Create(channel_.get(), cq, rpcmethod_RequestResume_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::RequestResumeRes>* NetWaterMark::Stub::PrepareAsyncRequestResumeRaw(::grpc::ClientContext* context, const ::InforGuard_::RequestResumeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::RequestResumeRes>::Create(channel_.get(), cq, rpcmethod_RequestResume_, context, request, false);
}

NetWaterMark::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetWaterMark_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetWaterMark::Service, ::InforGuard_::CheckReq, ::InforGuard_::CheckRes>(
          [](NetWaterMark::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::InforGuard_::CheckReq* req,
             ::InforGuard_::CheckRes* resp) {
               return service->Check(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetWaterMark_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetWaterMark::Service, ::InforGuard_::SetReq, ::InforGuard_::SetRes>(
          [](NetWaterMark::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::InforGuard_::SetReq* req,
             ::InforGuard_::SetRes* resp) {
               return service->Set(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetWaterMark_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetWaterMark::Service, ::InforGuard_::GetReq, ::InforGuard_::GetRes>(
          [](NetWaterMark::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::InforGuard_::GetReq* req,
             ::InforGuard_::GetRes* resp) {
               return service->Get(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetWaterMark_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetWaterMark::Service, ::InforGuard_::AddReq, ::InforGuard_::AddRes>(
          [](NetWaterMark::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::InforGuard_::AddReq* req,
             ::InforGuard_::AddRes* resp) {
               return service->Add(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetWaterMark_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetWaterMark::Service, ::InforGuard_::RemoveReq, ::InforGuard_::RemoveRes>(
          [](NetWaterMark::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::InforGuard_::RemoveReq* req,
             ::InforGuard_::RemoveRes* resp) {
               return service->Remove(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetWaterMark_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetWaterMark::Service, ::InforGuard_::RenameReq, ::InforGuard_::RenameRes>(
          [](NetWaterMark::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::InforGuard_::RenameReq* req,
             ::InforGuard_::RenameRes* resp) {
               return service->Rename(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetWaterMark_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetWaterMark::Service, ::InforGuard_::VerifyReq, ::InforGuard_::VerifyRes>(
          [](NetWaterMark::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::InforGuard_::VerifyReq* req,
             ::InforGuard_::VerifyRes* resp) {
               return service->Verify(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetWaterMark_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetWaterMark::Service, ::InforGuard_::VerifyForFilterReq, ::InforGuard_::VerifyForFilterRes>(
          [](NetWaterMark::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::InforGuard_::VerifyForFilterReq* req,
             ::InforGuard_::VerifyForFilterRes* resp) {
               return service->VerifyForFilter(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetWaterMark_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetWaterMark::Service, ::InforGuard_::RequestResumeReq, ::InforGuard_::RequestResumeRes>(
          [](NetWaterMark::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::InforGuard_::RequestResumeReq* req,
             ::InforGuard_::RequestResumeRes* resp) {
               return service->RequestResume(ctx, req, resp);
             }, this)));
}

NetWaterMark::Service::~Service() {
}

::grpc::Status NetWaterMark::Service::Check(::grpc::ServerContext* context, const ::InforGuard_::CheckReq* request, ::InforGuard_::CheckRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NetWaterMark::Service::Set(::grpc::ServerContext* context, const ::InforGuard_::SetReq* request, ::InforGuard_::SetRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NetWaterMark::Service::Get(::grpc::ServerContext* context, const ::InforGuard_::GetReq* request, ::InforGuard_::GetRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NetWaterMark::Service::Add(::grpc::ServerContext* context, const ::InforGuard_::AddReq* request, ::InforGuard_::AddRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NetWaterMark::Service::Remove(::grpc::ServerContext* context, const ::InforGuard_::RemoveReq* request, ::InforGuard_::RemoveRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NetWaterMark::Service::Rename(::grpc::ServerContext* context, const ::InforGuard_::RenameReq* request, ::InforGuard_::RenameRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NetWaterMark::Service::Verify(::grpc::ServerContext* context, const ::InforGuard_::VerifyReq* request, ::InforGuard_::VerifyRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NetWaterMark::Service::VerifyForFilter(::grpc::ServerContext* context, const ::InforGuard_::VerifyForFilterReq* request, ::InforGuard_::VerifyForFilterRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NetWaterMark::Service::RequestResume(::grpc::ServerContext* context, const ::InforGuard_::RequestResumeReq* request, ::InforGuard_::RequestResumeRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace InforGuard_

