// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgTran.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MsgTran_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MsgTran_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Metadata.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MsgTran_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MsgTran_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MsgTran_2eproto;
namespace InforGuard_ {
class GetMsgReq;
class GetMsgReqDefaultTypeInternal;
extern GetMsgReqDefaultTypeInternal _GetMsgReq_default_instance_;
class GetMsgRes;
class GetMsgResDefaultTypeInternal;
extern GetMsgResDefaultTypeInternal _GetMsgRes_default_instance_;
class PutMsgReq;
class PutMsgReqDefaultTypeInternal;
extern PutMsgReqDefaultTypeInternal _PutMsgReq_default_instance_;
class PutMsgRes;
class PutMsgResDefaultTypeInternal;
extern PutMsgResDefaultTypeInternal _PutMsgRes_default_instance_;
}  // namespace InforGuard_
PROTOBUF_NAMESPACE_OPEN
template<> ::InforGuard_::GetMsgReq* Arena::CreateMaybeMessage<::InforGuard_::GetMsgReq>(Arena*);
template<> ::InforGuard_::GetMsgRes* Arena::CreateMaybeMessage<::InforGuard_::GetMsgRes>(Arena*);
template<> ::InforGuard_::PutMsgReq* Arena::CreateMaybeMessage<::InforGuard_::PutMsgReq>(Arena*);
template<> ::InforGuard_::PutMsgRes* Arena::CreateMaybeMessage<::InforGuard_::PutMsgRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace InforGuard_ {

// ===================================================================

class GetMsgReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.GetMsgReq) */ {
 public:
  inline GetMsgReq() : GetMsgReq(nullptr) {};
  virtual ~GetMsgReq();

  GetMsgReq(const GetMsgReq& from);
  GetMsgReq(GetMsgReq&& from) noexcept
    : GetMsgReq() {
    *this = ::std::move(from);
  }

  inline GetMsgReq& operator=(const GetMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMsgReq& operator=(GetMsgReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMsgReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMsgReq* internal_default_instance() {
    return reinterpret_cast<const GetMsgReq*>(
               &_GetMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetMsgReq& a, GetMsgReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMsgReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMsgReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMsgReq* New() const final {
    return CreateMaybeMessage<GetMsgReq>(nullptr);
  }

  GetMsgReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMsgReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMsgReq& from);
  void MergeFrom(const GetMsgReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMsgReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.GetMsgReq";
  }
  protected:
  explicit GetMsgReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgTran_2eproto);
    return ::descriptor_table_MsgTran_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeqIpPortFieldNumber = 1,
    kMbFieldNumber = 2,
  };
  // repeated .InforGuard_.netIpPort seqIpPort = 1;
  int seqipport_size() const;
  private:
  int _internal_seqipport_size() const;
  public:
  void clear_seqipport();
  ::InforGuard_::netIpPort* mutable_seqipport(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort >*
      mutable_seqipport();
  private:
  const ::InforGuard_::netIpPort& _internal_seqipport(int index) const;
  ::InforGuard_::netIpPort* _internal_add_seqipport();
  public:
  const ::InforGuard_::netIpPort& seqipport(int index) const;
  ::InforGuard_::netIpPort* add_seqipport();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort >&
      seqipport() const;

  // .InforGuard_.MsgBlock mb = 2;
  bool has_mb() const;
  private:
  bool _internal_has_mb() const;
  public:
  void clear_mb();
  const ::InforGuard_::MsgBlock& mb() const;
  ::InforGuard_::MsgBlock* release_mb();
  ::InforGuard_::MsgBlock* mutable_mb();
  void set_allocated_mb(::InforGuard_::MsgBlock* mb);
  private:
  const ::InforGuard_::MsgBlock& _internal_mb() const;
  ::InforGuard_::MsgBlock* _internal_mutable_mb();
  public:
  void unsafe_arena_set_allocated_mb(
      ::InforGuard_::MsgBlock* mb);
  ::InforGuard_::MsgBlock* unsafe_arena_release_mb();

  // @@protoc_insertion_point(class_scope:InforGuard_.GetMsgReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort > seqipport_;
  ::InforGuard_::MsgBlock* mb_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgTran_2eproto;
};
// -------------------------------------------------------------------

class GetMsgRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.GetMsgRes) */ {
 public:
  inline GetMsgRes() : GetMsgRes(nullptr) {};
  virtual ~GetMsgRes();

  GetMsgRes(const GetMsgRes& from);
  GetMsgRes(GetMsgRes&& from) noexcept
    : GetMsgRes() {
    *this = ::std::move(from);
  }

  inline GetMsgRes& operator=(const GetMsgRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMsgRes& operator=(GetMsgRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMsgRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMsgRes* internal_default_instance() {
    return reinterpret_cast<const GetMsgRes*>(
               &_GetMsgRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetMsgRes& a, GetMsgRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMsgRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMsgRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMsgRes* New() const final {
    return CreateMaybeMessage<GetMsgRes>(nullptr);
  }

  GetMsgRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMsgRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMsgRes& from);
  void MergeFrom(const GetMsgRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMsgRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.GetMsgRes";
  }
  protected:
  explicit GetMsgRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgTran_2eproto);
    return ::descriptor_table_MsgTran_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExFieldNumber = 1,
    kMbFieldNumber = 2,
    kRetFieldNumber = 3,
  };
  // .InforGuard_.ExceptionError ex = 1;
  bool has_ex() const;
  private:
  bool _internal_has_ex() const;
  public:
  void clear_ex();
  const ::InforGuard_::ExceptionError& ex() const;
  ::InforGuard_::ExceptionError* release_ex();
  ::InforGuard_::ExceptionError* mutable_ex();
  void set_allocated_ex(::InforGuard_::ExceptionError* ex);
  private:
  const ::InforGuard_::ExceptionError& _internal_ex() const;
  ::InforGuard_::ExceptionError* _internal_mutable_ex();
  public:
  void unsafe_arena_set_allocated_ex(
      ::InforGuard_::ExceptionError* ex);
  ::InforGuard_::ExceptionError* unsafe_arena_release_ex();

  // .InforGuard_.MsgBlock mb = 2;
  bool has_mb() const;
  private:
  bool _internal_has_mb() const;
  public:
  void clear_mb();
  const ::InforGuard_::MsgBlock& mb() const;
  ::InforGuard_::MsgBlock* release_mb();
  ::InforGuard_::MsgBlock* mutable_mb();
  void set_allocated_mb(::InforGuard_::MsgBlock* mb);
  private:
  const ::InforGuard_::MsgBlock& _internal_mb() const;
  ::InforGuard_::MsgBlock* _internal_mutable_mb();
  public:
  void unsafe_arena_set_allocated_mb(
      ::InforGuard_::MsgBlock* mb);
  ::InforGuard_::MsgBlock* unsafe_arena_release_mb();

  // int32 ret = 3;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.GetMsgRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::InforGuard_::ExceptionError* ex_;
  ::InforGuard_::MsgBlock* mb_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgTran_2eproto;
};
// -------------------------------------------------------------------

class PutMsgReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.PutMsgReq) */ {
 public:
  inline PutMsgReq() : PutMsgReq(nullptr) {};
  virtual ~PutMsgReq();

  PutMsgReq(const PutMsgReq& from);
  PutMsgReq(PutMsgReq&& from) noexcept
    : PutMsgReq() {
    *this = ::std::move(from);
  }

  inline PutMsgReq& operator=(const PutMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutMsgReq& operator=(PutMsgReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PutMsgReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutMsgReq* internal_default_instance() {
    return reinterpret_cast<const PutMsgReq*>(
               &_PutMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PutMsgReq& a, PutMsgReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PutMsgReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutMsgReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutMsgReq* New() const final {
    return CreateMaybeMessage<PutMsgReq>(nullptr);
  }

  PutMsgReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutMsgReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PutMsgReq& from);
  void MergeFrom(const PutMsgReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutMsgReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.PutMsgReq";
  }
  protected:
  explicit PutMsgReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgTran_2eproto);
    return ::descriptor_table_MsgTran_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeqIpPortFieldNumber = 1,
    kMbFieldNumber = 2,
  };
  // repeated .InforGuard_.netIpPort seqIpPort = 1;
  int seqipport_size() const;
  private:
  int _internal_seqipport_size() const;
  public:
  void clear_seqipport();
  ::InforGuard_::netIpPort* mutable_seqipport(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort >*
      mutable_seqipport();
  private:
  const ::InforGuard_::netIpPort& _internal_seqipport(int index) const;
  ::InforGuard_::netIpPort* _internal_add_seqipport();
  public:
  const ::InforGuard_::netIpPort& seqipport(int index) const;
  ::InforGuard_::netIpPort* add_seqipport();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort >&
      seqipport() const;

  // .InforGuard_.MsgBlock mb = 2;
  bool has_mb() const;
  private:
  bool _internal_has_mb() const;
  public:
  void clear_mb();
  const ::InforGuard_::MsgBlock& mb() const;
  ::InforGuard_::MsgBlock* release_mb();
  ::InforGuard_::MsgBlock* mutable_mb();
  void set_allocated_mb(::InforGuard_::MsgBlock* mb);
  private:
  const ::InforGuard_::MsgBlock& _internal_mb() const;
  ::InforGuard_::MsgBlock* _internal_mutable_mb();
  public:
  void unsafe_arena_set_allocated_mb(
      ::InforGuard_::MsgBlock* mb);
  ::InforGuard_::MsgBlock* unsafe_arena_release_mb();

  // @@protoc_insertion_point(class_scope:InforGuard_.PutMsgReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort > seqipport_;
  ::InforGuard_::MsgBlock* mb_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgTran_2eproto;
};
// -------------------------------------------------------------------

class PutMsgRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.PutMsgRes) */ {
 public:
  inline PutMsgRes() : PutMsgRes(nullptr) {};
  virtual ~PutMsgRes();

  PutMsgRes(const PutMsgRes& from);
  PutMsgRes(PutMsgRes&& from) noexcept
    : PutMsgRes() {
    *this = ::std::move(from);
  }

  inline PutMsgRes& operator=(const PutMsgRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutMsgRes& operator=(PutMsgRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PutMsgRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutMsgRes* internal_default_instance() {
    return reinterpret_cast<const PutMsgRes*>(
               &_PutMsgRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PutMsgRes& a, PutMsgRes& b) {
    a.Swap(&b);
  }
  inline void Swap(PutMsgRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutMsgRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutMsgRes* New() const final {
    return CreateMaybeMessage<PutMsgRes>(nullptr);
  }

  PutMsgRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutMsgRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PutMsgRes& from);
  void MergeFrom(const PutMsgRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutMsgRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.PutMsgRes";
  }
  protected:
  explicit PutMsgRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgTran_2eproto);
    return ::descriptor_table_MsgTran_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExFieldNumber = 1,
    kRetFieldNumber = 2,
  };
  // .InforGuard_.ExceptionError ex = 1;
  bool has_ex() const;
  private:
  bool _internal_has_ex() const;
  public:
  void clear_ex();
  const ::InforGuard_::ExceptionError& ex() const;
  ::InforGuard_::ExceptionError* release_ex();
  ::InforGuard_::ExceptionError* mutable_ex();
  void set_allocated_ex(::InforGuard_::ExceptionError* ex);
  private:
  const ::InforGuard_::ExceptionError& _internal_ex() const;
  ::InforGuard_::ExceptionError* _internal_mutable_ex();
  public:
  void unsafe_arena_set_allocated_ex(
      ::InforGuard_::ExceptionError* ex);
  ::InforGuard_::ExceptionError* unsafe_arena_release_ex();

  // int32 ret = 2;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.PutMsgRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::InforGuard_::ExceptionError* ex_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgTran_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetMsgReq

// repeated .InforGuard_.netIpPort seqIpPort = 1;
inline int GetMsgReq::_internal_seqipport_size() const {
  return seqipport_.size();
}
inline int GetMsgReq::seqipport_size() const {
  return _internal_seqipport_size();
}
inline ::InforGuard_::netIpPort* GetMsgReq::mutable_seqipport(int index) {
  // @@protoc_insertion_point(field_mutable:InforGuard_.GetMsgReq.seqIpPort)
  return seqipport_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort >*
GetMsgReq::mutable_seqipport() {
  // @@protoc_insertion_point(field_mutable_list:InforGuard_.GetMsgReq.seqIpPort)
  return &seqipport_;
}
inline const ::InforGuard_::netIpPort& GetMsgReq::_internal_seqipport(int index) const {
  return seqipport_.Get(index);
}
inline const ::InforGuard_::netIpPort& GetMsgReq::seqipport(int index) const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetMsgReq.seqIpPort)
  return _internal_seqipport(index);
}
inline ::InforGuard_::netIpPort* GetMsgReq::_internal_add_seqipport() {
  return seqipport_.Add();
}
inline ::InforGuard_::netIpPort* GetMsgReq::add_seqipport() {
  // @@protoc_insertion_point(field_add:InforGuard_.GetMsgReq.seqIpPort)
  return _internal_add_seqipport();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort >&
GetMsgReq::seqipport() const {
  // @@protoc_insertion_point(field_list:InforGuard_.GetMsgReq.seqIpPort)
  return seqipport_;
}

// .InforGuard_.MsgBlock mb = 2;
inline bool GetMsgReq::_internal_has_mb() const {
  return this != internal_default_instance() && mb_ != nullptr;
}
inline bool GetMsgReq::has_mb() const {
  return _internal_has_mb();
}
inline const ::InforGuard_::MsgBlock& GetMsgReq::_internal_mb() const {
  const ::InforGuard_::MsgBlock* p = mb_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::MsgBlock*>(
      &::InforGuard_::_MsgBlock_default_instance_);
}
inline const ::InforGuard_::MsgBlock& GetMsgReq::mb() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetMsgReq.mb)
  return _internal_mb();
}
inline void GetMsgReq::unsafe_arena_set_allocated_mb(
    ::InforGuard_::MsgBlock* mb) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mb_);
  }
  mb_ = mb;
  if (mb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.GetMsgReq.mb)
}
inline ::InforGuard_::MsgBlock* GetMsgReq::release_mb() {
  auto temp = unsafe_arena_release_mb();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::MsgBlock* GetMsgReq::unsafe_arena_release_mb() {
  // @@protoc_insertion_point(field_release:InforGuard_.GetMsgReq.mb)
  
  ::InforGuard_::MsgBlock* temp = mb_;
  mb_ = nullptr;
  return temp;
}
inline ::InforGuard_::MsgBlock* GetMsgReq::_internal_mutable_mb() {
  
  if (mb_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::MsgBlock>(GetArena());
    mb_ = p;
  }
  return mb_;
}
inline ::InforGuard_::MsgBlock* GetMsgReq::mutable_mb() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.GetMsgReq.mb)
  return _internal_mutable_mb();
}
inline void GetMsgReq::set_allocated_mb(::InforGuard_::MsgBlock* mb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mb_);
  }
  if (mb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mb)->GetArena();
    if (message_arena != submessage_arena) {
      mb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mb, submessage_arena);
    }
    
  } else {
    
  }
  mb_ = mb;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.GetMsgReq.mb)
}

// -------------------------------------------------------------------

// GetMsgRes

// .InforGuard_.ExceptionError ex = 1;
inline bool GetMsgRes::_internal_has_ex() const {
  return this != internal_default_instance() && ex_ != nullptr;
}
inline bool GetMsgRes::has_ex() const {
  return _internal_has_ex();
}
inline const ::InforGuard_::ExceptionError& GetMsgRes::_internal_ex() const {
  const ::InforGuard_::ExceptionError* p = ex_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::ExceptionError*>(
      &::InforGuard_::_ExceptionError_default_instance_);
}
inline const ::InforGuard_::ExceptionError& GetMsgRes::ex() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetMsgRes.ex)
  return _internal_ex();
}
inline void GetMsgRes::unsafe_arena_set_allocated_ex(
    ::InforGuard_::ExceptionError* ex) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  ex_ = ex;
  if (ex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.GetMsgRes.ex)
}
inline ::InforGuard_::ExceptionError* GetMsgRes::release_ex() {
  auto temp = unsafe_arena_release_ex();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::ExceptionError* GetMsgRes::unsafe_arena_release_ex() {
  // @@protoc_insertion_point(field_release:InforGuard_.GetMsgRes.ex)
  
  ::InforGuard_::ExceptionError* temp = ex_;
  ex_ = nullptr;
  return temp;
}
inline ::InforGuard_::ExceptionError* GetMsgRes::_internal_mutable_ex() {
  
  if (ex_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::ExceptionError>(GetArena());
    ex_ = p;
  }
  return ex_;
}
inline ::InforGuard_::ExceptionError* GetMsgRes::mutable_ex() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.GetMsgRes.ex)
  return _internal_mutable_ex();
}
inline void GetMsgRes::set_allocated_ex(::InforGuard_::ExceptionError* ex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  if (ex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex)->GetArena();
    if (message_arena != submessage_arena) {
      ex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ex, submessage_arena);
    }
    
  } else {
    
  }
  ex_ = ex;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.GetMsgRes.ex)
}

// .InforGuard_.MsgBlock mb = 2;
inline bool GetMsgRes::_internal_has_mb() const {
  return this != internal_default_instance() && mb_ != nullptr;
}
inline bool GetMsgRes::has_mb() const {
  return _internal_has_mb();
}
inline const ::InforGuard_::MsgBlock& GetMsgRes::_internal_mb() const {
  const ::InforGuard_::MsgBlock* p = mb_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::MsgBlock*>(
      &::InforGuard_::_MsgBlock_default_instance_);
}
inline const ::InforGuard_::MsgBlock& GetMsgRes::mb() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetMsgRes.mb)
  return _internal_mb();
}
inline void GetMsgRes::unsafe_arena_set_allocated_mb(
    ::InforGuard_::MsgBlock* mb) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mb_);
  }
  mb_ = mb;
  if (mb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.GetMsgRes.mb)
}
inline ::InforGuard_::MsgBlock* GetMsgRes::release_mb() {
  auto temp = unsafe_arena_release_mb();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::MsgBlock* GetMsgRes::unsafe_arena_release_mb() {
  // @@protoc_insertion_point(field_release:InforGuard_.GetMsgRes.mb)
  
  ::InforGuard_::MsgBlock* temp = mb_;
  mb_ = nullptr;
  return temp;
}
inline ::InforGuard_::MsgBlock* GetMsgRes::_internal_mutable_mb() {
  
  if (mb_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::MsgBlock>(GetArena());
    mb_ = p;
  }
  return mb_;
}
inline ::InforGuard_::MsgBlock* GetMsgRes::mutable_mb() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.GetMsgRes.mb)
  return _internal_mutable_mb();
}
inline void GetMsgRes::set_allocated_mb(::InforGuard_::MsgBlock* mb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mb_);
  }
  if (mb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mb)->GetArena();
    if (message_arena != submessage_arena) {
      mb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mb, submessage_arena);
    }
    
  } else {
    
  }
  mb_ = mb;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.GetMsgRes.mb)
}

// int32 ret = 3;
inline void GetMsgRes::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetMsgRes::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetMsgRes::ret() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetMsgRes.ret)
  return _internal_ret();
}
inline void GetMsgRes::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void GetMsgRes::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:InforGuard_.GetMsgRes.ret)
}

// -------------------------------------------------------------------

// PutMsgReq

// repeated .InforGuard_.netIpPort seqIpPort = 1;
inline int PutMsgReq::_internal_seqipport_size() const {
  return seqipport_.size();
}
inline int PutMsgReq::seqipport_size() const {
  return _internal_seqipport_size();
}
inline ::InforGuard_::netIpPort* PutMsgReq::mutable_seqipport(int index) {
  // @@protoc_insertion_point(field_mutable:InforGuard_.PutMsgReq.seqIpPort)
  return seqipport_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort >*
PutMsgReq::mutable_seqipport() {
  // @@protoc_insertion_point(field_mutable_list:InforGuard_.PutMsgReq.seqIpPort)
  return &seqipport_;
}
inline const ::InforGuard_::netIpPort& PutMsgReq::_internal_seqipport(int index) const {
  return seqipport_.Get(index);
}
inline const ::InforGuard_::netIpPort& PutMsgReq::seqipport(int index) const {
  // @@protoc_insertion_point(field_get:InforGuard_.PutMsgReq.seqIpPort)
  return _internal_seqipport(index);
}
inline ::InforGuard_::netIpPort* PutMsgReq::_internal_add_seqipport() {
  return seqipport_.Add();
}
inline ::InforGuard_::netIpPort* PutMsgReq::add_seqipport() {
  // @@protoc_insertion_point(field_add:InforGuard_.PutMsgReq.seqIpPort)
  return _internal_add_seqipport();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InforGuard_::netIpPort >&
PutMsgReq::seqipport() const {
  // @@protoc_insertion_point(field_list:InforGuard_.PutMsgReq.seqIpPort)
  return seqipport_;
}

// .InforGuard_.MsgBlock mb = 2;
inline bool PutMsgReq::_internal_has_mb() const {
  return this != internal_default_instance() && mb_ != nullptr;
}
inline bool PutMsgReq::has_mb() const {
  return _internal_has_mb();
}
inline const ::InforGuard_::MsgBlock& PutMsgReq::_internal_mb() const {
  const ::InforGuard_::MsgBlock* p = mb_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::MsgBlock*>(
      &::InforGuard_::_MsgBlock_default_instance_);
}
inline const ::InforGuard_::MsgBlock& PutMsgReq::mb() const {
  // @@protoc_insertion_point(field_get:InforGuard_.PutMsgReq.mb)
  return _internal_mb();
}
inline void PutMsgReq::unsafe_arena_set_allocated_mb(
    ::InforGuard_::MsgBlock* mb) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mb_);
  }
  mb_ = mb;
  if (mb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.PutMsgReq.mb)
}
inline ::InforGuard_::MsgBlock* PutMsgReq::release_mb() {
  auto temp = unsafe_arena_release_mb();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::MsgBlock* PutMsgReq::unsafe_arena_release_mb() {
  // @@protoc_insertion_point(field_release:InforGuard_.PutMsgReq.mb)
  
  ::InforGuard_::MsgBlock* temp = mb_;
  mb_ = nullptr;
  return temp;
}
inline ::InforGuard_::MsgBlock* PutMsgReq::_internal_mutable_mb() {
  
  if (mb_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::MsgBlock>(GetArena());
    mb_ = p;
  }
  return mb_;
}
inline ::InforGuard_::MsgBlock* PutMsgReq::mutable_mb() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.PutMsgReq.mb)
  return _internal_mutable_mb();
}
inline void PutMsgReq::set_allocated_mb(::InforGuard_::MsgBlock* mb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mb_);
  }
  if (mb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mb)->GetArena();
    if (message_arena != submessage_arena) {
      mb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mb, submessage_arena);
    }
    
  } else {
    
  }
  mb_ = mb;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.PutMsgReq.mb)
}

// -------------------------------------------------------------------

// PutMsgRes

// .InforGuard_.ExceptionError ex = 1;
inline bool PutMsgRes::_internal_has_ex() const {
  return this != internal_default_instance() && ex_ != nullptr;
}
inline bool PutMsgRes::has_ex() const {
  return _internal_has_ex();
}
inline const ::InforGuard_::ExceptionError& PutMsgRes::_internal_ex() const {
  const ::InforGuard_::ExceptionError* p = ex_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::ExceptionError*>(
      &::InforGuard_::_ExceptionError_default_instance_);
}
inline const ::InforGuard_::ExceptionError& PutMsgRes::ex() const {
  // @@protoc_insertion_point(field_get:InforGuard_.PutMsgRes.ex)
  return _internal_ex();
}
inline void PutMsgRes::unsafe_arena_set_allocated_ex(
    ::InforGuard_::ExceptionError* ex) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  ex_ = ex;
  if (ex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.PutMsgRes.ex)
}
inline ::InforGuard_::ExceptionError* PutMsgRes::release_ex() {
  auto temp = unsafe_arena_release_ex();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::ExceptionError* PutMsgRes::unsafe_arena_release_ex() {
  // @@protoc_insertion_point(field_release:InforGuard_.PutMsgRes.ex)
  
  ::InforGuard_::ExceptionError* temp = ex_;
  ex_ = nullptr;
  return temp;
}
inline ::InforGuard_::ExceptionError* PutMsgRes::_internal_mutable_ex() {
  
  if (ex_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::ExceptionError>(GetArena());
    ex_ = p;
  }
  return ex_;
}
inline ::InforGuard_::ExceptionError* PutMsgRes::mutable_ex() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.PutMsgRes.ex)
  return _internal_mutable_ex();
}
inline void PutMsgRes::set_allocated_ex(::InforGuard_::ExceptionError* ex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  if (ex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex)->GetArena();
    if (message_arena != submessage_arena) {
      ex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ex, submessage_arena);
    }
    
  } else {
    
  }
  ex_ = ex;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.PutMsgRes.ex)
}

// int32 ret = 2;
inline void PutMsgRes::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PutMsgRes::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PutMsgRes::ret() const {
  // @@protoc_insertion_point(field_get:InforGuard_.PutMsgRes.ret)
  return _internal_ret();
}
inline void PutMsgRes::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void PutMsgRes::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:InforGuard_.PutMsgRes.ret)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace InforGuard_

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MsgTran_2eproto
