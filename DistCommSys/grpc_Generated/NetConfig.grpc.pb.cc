// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: NetConfig.proto

#include "NetConfig.pb.h"
#include "NetConfig.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace InforGuard_ {

static const char* NetConfig_method_names[] = {
  "/InforGuard_.NetConfig/Load",
  "/InforGuard_.NetConfig/Save",
};

std::unique_ptr< NetConfig::Stub> NetConfig::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NetConfig::Stub> stub(new NetConfig::Stub(channel));
  return stub;
}

NetConfig::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Load_(NetConfig_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Save_(NetConfig_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NetConfig::Stub::Load(::grpc::ClientContext* context, const ::InforGuard_::LoadReq& request, ::InforGuard_::LoadRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Load_, context, request, response);
}

void NetConfig::Stub::experimental_async::Load(::grpc::ClientContext* context, const ::InforGuard_::LoadReq* request, ::InforGuard_::LoadRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Load_, context, request, response, std::move(f));
}

void NetConfig::Stub::experimental_async::Load(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::LoadRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Load_, context, request, response, std::move(f));
}

void NetConfig::Stub::experimental_async::Load(::grpc::ClientContext* context, const ::InforGuard_::LoadReq* request, ::InforGuard_::LoadRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Load_, context, request, response, reactor);
}

void NetConfig::Stub::experimental_async::Load(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::LoadRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Load_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::LoadRes>* NetConfig::Stub::AsyncLoadRaw(::grpc::ClientContext* context, const ::InforGuard_::LoadReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::LoadRes>::Create(channel_.get(), cq, rpcmethod_Load_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::LoadRes>* NetConfig::Stub::PrepareAsyncLoadRaw(::grpc::ClientContext* context, const ::InforGuard_::LoadReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::LoadRes>::Create(channel_.get(), cq, rpcmethod_Load_, context, request, false);
}

::grpc::Status NetConfig::Stub::Save(::grpc::ClientContext* context, const ::InforGuard_::SaveReq& request, ::InforGuard_::SaveRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Save_, context, request, response);
}

void NetConfig::Stub::experimental_async::Save(::grpc::ClientContext* context, const ::InforGuard_::SaveReq* request, ::InforGuard_::SaveRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Save_, context, request, response, std::move(f));
}

void NetConfig::Stub::experimental_async::Save(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::SaveRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Save_, context, request, response, std::move(f));
}

void NetConfig::Stub::experimental_async::Save(::grpc::ClientContext* context, const ::InforGuard_::SaveReq* request, ::InforGuard_::SaveRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Save_, context, request, response, reactor);
}

void NetConfig::Stub::experimental_async::Save(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::SaveRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Save_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::SaveRes>* NetConfig::Stub::AsyncSaveRaw(::grpc::ClientContext* context, const ::InforGuard_::SaveReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::SaveRes>::Create(channel_.get(), cq, rpcmethod_Save_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::SaveRes>* NetConfig::Stub::PrepareAsyncSaveRaw(::grpc::ClientContext* context, const ::InforGuard_::SaveReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::SaveRes>::Create(channel_.get(), cq, rpcmethod_Save_, context, request, false);
}

NetConfig::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetConfig_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetConfig::Service, ::InforGuard_::LoadReq, ::InforGuard_::LoadRes>(
          [](NetConfig::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::InforGuard_::LoadReq* req,
             ::InforGuard_::LoadRes* resp) {
               return service->Load(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetConfig_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetConfig::Service, ::InforGuard_::SaveReq, ::InforGuard_::SaveRes>(
          [](NetConfig::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::InforGuard_::SaveReq* req,
             ::InforGuard_::SaveRes* resp) {
               return service->Save(ctx, req, resp);
             }, this)));
}

NetConfig::Service::~Service() {
}

::grpc::Status NetConfig::Service::Load(::grpc::ServerContext* context, const ::InforGuard_::LoadReq* request, ::InforGuard_::LoadRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NetConfig::Service::Save(::grpc::ServerContext* context, const ::InforGuard_::SaveReq* request, ::InforGuard_::SaveRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace InforGuard_

