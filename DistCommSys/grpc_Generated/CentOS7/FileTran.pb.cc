// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FileTran.proto

#include "FileTran.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Metadata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExceptionError_Metadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Metadata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetFileListNode_Metadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Metadata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RemoteDirectory_Metadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Metadata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_netCallData_Metadata_2eproto;
namespace InforGuard_ {
class GetFileBlockReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetFileBlockReq> _instance;
} _GetFileBlockReq_default_instance_;
class GetFileBlockResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetFileBlockRes> _instance;
} _GetFileBlockRes_default_instance_;
class PutFileBlockReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PutFileBlockReq> _instance;
} _PutFileBlockReq_default_instance_;
class PutFileBlockResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PutFileBlockRes> _instance;
} _PutFileBlockRes_default_instance_;
class MakeDirectoryReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MakeDirectoryReq> _instance;
} _MakeDirectoryReq_default_instance_;
class MakeDirectoryResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MakeDirectoryRes> _instance;
} _MakeDirectoryRes_default_instance_;
class MoveFileInReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveFileInReq> _instance;
} _MoveFileInReq_default_instance_;
class MoveFileInResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveFileInRes> _instance;
} _MoveFileInRes_default_instance_;
class MoveFileOutReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveFileOutReq> _instance;
} _MoveFileOutReq_default_instance_;
class MoveFileOutResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveFileOutRes> _instance;
} _MoveFileOutRes_default_instance_;
class RenameFileReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RenameFileReq> _instance;
} _RenameFileReq_default_instance_;
class RenameFileResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RenameFileRes> _instance;
} _RenameFileRes_default_instance_;
class QueryBasePathReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryBasePathReq> _instance;
} _QueryBasePathReq_default_instance_;
class QueryBasePathResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryBasePathRes> _instance;
} _QueryBasePathRes_default_instance_;
class isFileExistReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<isFileExistReq> _instance;
} _isFileExistReq_default_instance_;
class isFileExistResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<isFileExistRes> _instance;
} _isFileExistRes_default_instance_;
class setFileTimeReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<setFileTimeReq> _instance;
} _setFileTimeReq_default_instance_;
class setFileTimeResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<setFileTimeRes> _instance;
} _setFileTimeRes_default_instance_;
class getFileTimeReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<getFileTimeReq> _instance;
} _getFileTimeReq_default_instance_;
class getFileTimeResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<getFileTimeRes> _instance;
} _getFileTimeRes_default_instance_;
class sendFileListReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<sendFileListReq> _instance;
} _sendFileListReq_default_instance_;
class sendFileListResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<sendFileListRes> _instance;
} _sendFileListRes_default_instance_;
class sendAccessReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<sendAccessReq> _instance;
} _sendAccessReq_default_instance_;
class sendAccessResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<sendAccessRes> _instance;
} _sendAccessRes_default_instance_;
class checkFileListReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<checkFileListReq> _instance;
} _checkFileListReq_default_instance_;
class checkFileListResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<checkFileListRes> _instance;
} _checkFileListRes_default_instance_;
}  // namespace InforGuard_
static void InitDefaultsscc_info_GetFileBlockReq_FileTran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_GetFileBlockReq_default_instance_;
    new (ptr) ::InforGuard_::GetFileBlockReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::GetFileBlockReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetFileBlockReq_FileTran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetFileBlockReq_FileTran_2eproto}, {
      &scc_info_netCallData_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_GetFileBlockRes_FileTran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_GetFileBlockRes_default_instance_;
    new (ptr) ::InforGuard_::GetFileBlockRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::GetFileBlockRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetFileBlockRes_FileTran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetFileBlockRes_FileTran_2eproto}, {
      &scc_info_netCallData_Metadata_2eproto.base,
      &scc_info_ExceptionError_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_MakeDirectoryReq_FileTran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_MakeDirectoryReq_default_instance_;
    new (ptr) ::InforGuard_::MakeDirectoryReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::MakeDirectoryReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MakeDirectoryReq_FileTran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MakeDirectoryReq_FileTran_2eproto}, {
      &scc_info_netCallData_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_MakeDirectoryRes_FileTran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_MakeDirectoryRes_default_instance_;
    new (ptr) ::InforGuard_::MakeDirectoryRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::MakeDirectoryRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MakeDirectoryRes_FileTran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MakeDirectoryRes_FileTran_2eproto}, {
      &scc_info_netCallData_Metadata_2eproto.base,
      &scc_info_ExceptionError_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_MoveFileInReq_FileTran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_MoveFileInReq_default_instance_;
    new (ptr) ::InforGuard_::MoveFileInReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::MoveFileInReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoveFileInReq_FileTran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MoveFileInReq_FileTran_2eproto}, {
      &scc_info_netCallData_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_MoveFileInRes_FileTran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_MoveFileInRes_default_instance_;
    new (ptr) ::InforGuard_::MoveFileInRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::MoveFileInRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MoveFileInRes_FileTran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MoveFileInRes_FileTran_2eproto}, {
      &scc_info_netCallData_Metadata_2eproto.base,
      &scc_info_ExceptionError_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_MoveFileOutReq_FileTran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_MoveFileOutReq_default_instance_;
    new (ptr) ::InforGuard_::MoveFileOutReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::MoveFileOutReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoveFileOutReq_FileTran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MoveFileOutReq_FileTran_2eproto}, {
      &scc_info_netCallData_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_MoveFileOutRes_FileTran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_MoveFileOutRes_default_instance_;
    new (ptr) ::InforGuard_::MoveFileOutRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::MoveFileOutRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MoveFileOutRes_FileTran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MoveFileOutRes_FileTran_2eproto}, {
      &scc_info_netCallData_Metadata_2eproto.base,
      &scc_info_ExceptionError_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_PutFileBlockReq_FileTran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_PutFileBlockReq_default_instance_;
    new (ptr) ::InforGuard_::PutFileBlockReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::PutFileBlockReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PutFileBlockReq_FileTran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PutFileBlockReq_FileTran_2eproto}, {
      &scc_info_netCallData_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_PutFileBlockRes_FileTran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_PutFileBlockRes_default_instance_;
    new (ptr) ::InforGuard_::PutFileBlockRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::PutFileBlockRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PutFileBlockRes_FileTran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PutFileBlockRes_FileTran_2eproto}, {
      &scc_info_netCallData_Metadata_2eproto.base,
      &scc_info_ExceptionError_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_QueryBasePathReq_FileTran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_QueryBasePathReq_default_instance_;
    new (ptr) ::InforGuard_::QueryBasePathReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::QueryBasePathReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryBasePathReq_FileTran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueryBasePathReq_FileTran_2eproto}, {}};

static void InitDefaultsscc_info_QueryBasePathRes_FileTran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_QueryBasePathRes_default_instance_;
    new (ptr) ::InforGuard_::QueryBasePathRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::QueryBasePathRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueryBasePathRes_FileTran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QueryBasePathRes_FileTran_2eproto}, {
      &scc_info_ExceptionError_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_RenameFileReq_FileTran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_RenameFileReq_default_instance_;
    new (ptr) ::InforGuard_::RenameFileReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::RenameFileReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RenameFileReq_FileTran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RenameFileReq_FileTran_2eproto}, {
      &scc_info_netCallData_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_RenameFileRes_FileTran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_RenameFileRes_default_instance_;
    new (ptr) ::InforGuard_::RenameFileRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::RenameFileRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RenameFileRes_FileTran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RenameFileRes_FileTran_2eproto}, {
      &scc_info_netCallData_Metadata_2eproto.base,
      &scc_info_ExceptionError_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_checkFileListReq_FileTran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_checkFileListReq_default_instance_;
    new (ptr) ::InforGuard_::checkFileListReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::checkFileListReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_checkFileListReq_FileTran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_checkFileListReq_FileTran_2eproto}, {
      &scc_info_NetFileListNode_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_checkFileListRes_FileTran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_checkFileListRes_default_instance_;
    new (ptr) ::InforGuard_::checkFileListRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::checkFileListRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_checkFileListRes_FileTran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_checkFileListRes_FileTran_2eproto}, {
      &scc_info_ExceptionError_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_getFileTimeReq_FileTran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_getFileTimeReq_default_instance_;
    new (ptr) ::InforGuard_::getFileTimeReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::getFileTimeReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_getFileTimeReq_FileTran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_getFileTimeReq_FileTran_2eproto}, {
      &scc_info_netCallData_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_getFileTimeRes_FileTran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_getFileTimeRes_default_instance_;
    new (ptr) ::InforGuard_::getFileTimeRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::getFileTimeRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_getFileTimeRes_FileTran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_getFileTimeRes_FileTran_2eproto}, {
      &scc_info_netCallData_Metadata_2eproto.base,
      &scc_info_ExceptionError_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_isFileExistReq_FileTran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_isFileExistReq_default_instance_;
    new (ptr) ::InforGuard_::isFileExistReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::isFileExistReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_isFileExistReq_FileTran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_isFileExistReq_FileTran_2eproto}, {}};

static void InitDefaultsscc_info_isFileExistRes_FileTran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_isFileExistRes_default_instance_;
    new (ptr) ::InforGuard_::isFileExistRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::isFileExistRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_isFileExistRes_FileTran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_isFileExistRes_FileTran_2eproto}, {
      &scc_info_ExceptionError_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_sendAccessReq_FileTran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_sendAccessReq_default_instance_;
    new (ptr) ::InforGuard_::sendAccessReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::sendAccessReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_sendAccessReq_FileTran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_sendAccessReq_FileTran_2eproto}, {}};

static void InitDefaultsscc_info_sendAccessRes_FileTran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_sendAccessRes_default_instance_;
    new (ptr) ::InforGuard_::sendAccessRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::sendAccessRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_sendAccessRes_FileTran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_sendAccessRes_FileTran_2eproto}, {
      &scc_info_ExceptionError_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_sendFileListReq_FileTran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_sendFileListReq_default_instance_;
    new (ptr) ::InforGuard_::sendFileListReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::sendFileListReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_sendFileListReq_FileTran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_sendFileListReq_FileTran_2eproto}, {
      &scc_info_RemoteDirectory_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_sendFileListRes_FileTran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_sendFileListRes_default_instance_;
    new (ptr) ::InforGuard_::sendFileListRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::sendFileListRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_sendFileListRes_FileTran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_sendFileListRes_FileTran_2eproto}, {
      &scc_info_ExceptionError_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_setFileTimeReq_FileTran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_setFileTimeReq_default_instance_;
    new (ptr) ::InforGuard_::setFileTimeReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::setFileTimeReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_setFileTimeReq_FileTran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_setFileTimeReq_FileTran_2eproto}, {
      &scc_info_netCallData_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_setFileTimeRes_FileTran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_setFileTimeRes_default_instance_;
    new (ptr) ::InforGuard_::setFileTimeRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::setFileTimeRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_setFileTimeRes_FileTran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_setFileTimeRes_FileTran_2eproto}, {
      &scc_info_netCallData_Metadata_2eproto.base,
      &scc_info_ExceptionError_Metadata_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_FileTran_2eproto[26];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_FileTran_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_FileTran_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_FileTran_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetFileBlockReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetFileBlockReq, call_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetFileBlockReq, filename_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetFileBlockReq, off_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetFileBlockReq, len_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetFileBlockRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetFileBlockRes, call_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetFileBlockRes, ex_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetFileBlockRes, buff_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetFileBlockRes, len_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetFileBlockRes, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::PutFileBlockReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::PutFileBlockReq, call_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::PutFileBlockReq, filename_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::PutFileBlockReq, off_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::PutFileBlockReq, buff_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::PutFileBlockReq, len_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::PutFileBlockRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::PutFileBlockRes, call_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::PutFileBlockRes, ex_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::PutFileBlockRes, len_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::PutFileBlockRes, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::MakeDirectoryReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::MakeDirectoryReq, call_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::MakeDirectoryReq, filename_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::MakeDirectoryReq, temp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::MakeDirectoryRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::MakeDirectoryRes, call_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::MakeDirectoryRes, ex_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::MakeDirectoryRes, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::MoveFileInReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::MoveFileInReq, call_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::MoveFileInReq, srcfile_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::MoveFileInReq, dstfile_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::MoveFileInReq, delfile_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::MoveFileInReq, btoppath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::MoveFileInRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::MoveFileInRes, call_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::MoveFileInRes, ex_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::MoveFileInRes, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::MoveFileOutReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::MoveFileOutReq, call_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::MoveFileOutReq, srcfile_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::MoveFileOutReq, dstfile_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::MoveFileOutRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::MoveFileOutRes, call_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::MoveFileOutRes, ex_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::MoveFileOutRes, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::RenameFileReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::RenameFileReq, call_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::RenameFileReq, oldfile_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::RenameFileReq, newfile_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::RenameFileReq, attr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::RenameFileRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::RenameFileRes, call_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::RenameFileRes, ex_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::RenameFileRes, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::QueryBasePathReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::QueryBasePathReq, req_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::QueryBasePathRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::QueryBasePathRes, ex_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::QueryBasePathRes, basepath_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::QueryBasePathRes, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::isFileExistReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::isFileExistReq, filepath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::isFileExistRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::isFileExistRes, ex_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::isFileExistRes, filesize_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::isFileExistRes, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::setFileTimeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::setFileTimeReq, call_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::setFileTimeReq, filename_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::setFileTimeReq, mtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::setFileTimeRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::setFileTimeRes, call_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::setFileTimeRes, ex_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::setFileTimeRes, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::getFileTimeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::getFileTimeReq, call_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::getFileTimeReq, filename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::getFileTimeRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::getFileTimeRes, call_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::getFileTimeRes, ex_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::getFileTimeRes, mtime_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::getFileTimeRes, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::sendFileListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::sendFileListReq, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::sendFileListRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::sendFileListRes, ex_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::sendFileListRes, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::sendAccessReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::sendAccessReq, req_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::sendAccessRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::sendAccessRes, ex_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::sendAccessRes, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::checkFileListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::checkFileListReq, inlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::checkFileListRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::checkFileListRes, ex_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::checkFileListRes, notexistlist_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::checkFileListRes, difflist_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::checkFileListRes, ret_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::InforGuard_::GetFileBlockReq)},
  { 9, -1, sizeof(::InforGuard_::GetFileBlockRes)},
  { 19, -1, sizeof(::InforGuard_::PutFileBlockReq)},
  { 29, -1, sizeof(::InforGuard_::PutFileBlockRes)},
  { 38, -1, sizeof(::InforGuard_::MakeDirectoryReq)},
  { 46, -1, sizeof(::InforGuard_::MakeDirectoryRes)},
  { 54, -1, sizeof(::InforGuard_::MoveFileInReq)},
  { 64, -1, sizeof(::InforGuard_::MoveFileInRes)},
  { 72, -1, sizeof(::InforGuard_::MoveFileOutReq)},
  { 80, -1, sizeof(::InforGuard_::MoveFileOutRes)},
  { 88, -1, sizeof(::InforGuard_::RenameFileReq)},
  { 97, -1, sizeof(::InforGuard_::RenameFileRes)},
  { 105, -1, sizeof(::InforGuard_::QueryBasePathReq)},
  { 111, -1, sizeof(::InforGuard_::QueryBasePathRes)},
  { 119, -1, sizeof(::InforGuard_::isFileExistReq)},
  { 125, -1, sizeof(::InforGuard_::isFileExistRes)},
  { 133, -1, sizeof(::InforGuard_::setFileTimeReq)},
  { 141, -1, sizeof(::InforGuard_::setFileTimeRes)},
  { 149, -1, sizeof(::InforGuard_::getFileTimeReq)},
  { 156, -1, sizeof(::InforGuard_::getFileTimeRes)},
  { 165, -1, sizeof(::InforGuard_::sendFileListReq)},
  { 171, -1, sizeof(::InforGuard_::sendFileListRes)},
  { 178, -1, sizeof(::InforGuard_::sendAccessReq)},
  { 184, -1, sizeof(::InforGuard_::sendAccessRes)},
  { 191, -1, sizeof(::InforGuard_::checkFileListReq)},
  { 197, -1, sizeof(::InforGuard_::checkFileListRes)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_GetFileBlockReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_GetFileBlockRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_PutFileBlockReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_PutFileBlockRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_MakeDirectoryReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_MakeDirectoryRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_MoveFileInReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_MoveFileInRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_MoveFileOutReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_MoveFileOutRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_RenameFileReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_RenameFileRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_QueryBasePathReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_QueryBasePathRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_isFileExistReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_isFileExistRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_setFileTimeReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_setFileTimeRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_getFileTimeReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_getFileTimeRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_sendFileListReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_sendFileListRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_sendAccessReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_sendAccessRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_checkFileListReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_checkFileListRes_default_instance_),
};

const char descriptor_table_protodef_FileTran_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016FileTran.proto\022\013InforGuard_\032\016Metadata."
  "proto\"e\n\017GetFileBlockReq\022&\n\004call\030\001 \001(\0132\030"
  ".InforGuard_.netCallData\022\020\n\010filename\030\002 \001"
  "(\014\022\013\n\003off\030\003 \001(\022\022\013\n\003len\030\004 \001(\005\"\212\001\n\017GetFile"
  "BlockRes\022&\n\004call\030\001 \001(\0132\030.InforGuard_.net"
  "CallData\022\'\n\002ex\030\002 \001(\0132\033.InforGuard_.Excep"
  "tionError\022\014\n\004buff\030\003 \001(\014\022\013\n\003len\030\004 \001(\005\022\013\n\003"
  "ret\030\005 \001(\005\"s\n\017PutFileBlockReq\022&\n\004call\030\001 \001"
  "(\0132\030.InforGuard_.netCallData\022\020\n\010filename"
  "\030\002 \001(\014\022\013\n\003off\030\003 \001(\022\022\014\n\004buff\030\004 \001(\014\022\013\n\003len"
  "\030\005 \001(\005\"|\n\017PutFileBlockRes\022&\n\004call\030\001 \001(\0132"
  "\030.InforGuard_.netCallData\022\'\n\002ex\030\002 \001(\0132\033."
  "InforGuard_.ExceptionError\022\013\n\003len\030\003 \001(\005\022"
  "\013\n\003ret\030\004 \001(\005\"Z\n\020MakeDirectoryReq\022&\n\004call"
  "\030\001 \001(\0132\030.InforGuard_.netCallData\022\020\n\010file"
  "name\030\002 \001(\014\022\014\n\004temp\030\003 \001(\010\"p\n\020MakeDirector"
  "yRes\022&\n\004call\030\001 \001(\0132\030.InforGuard_.netCall"
  "Data\022\'\n\002ex\030\002 \001(\0132\033.InforGuard_.Exception"
  "Error\022\013\n\003ret\030\003 \001(\005\"|\n\rMoveFileInReq\022&\n\004c"
  "all\030\001 \001(\0132\030.InforGuard_.netCallData\022\017\n\007s"
  "rcfile\030\002 \001(\014\022\017\n\007dstfile\030\003 \001(\014\022\017\n\007delfile"
  "\030\004 \001(\014\022\020\n\010bTopPath\030\005 \001(\010\"m\n\rMoveFileInRe"
  "s\022&\n\004call\030\001 \001(\0132\030.InforGuard_.netCallDat"
  "a\022\'\n\002ex\030\002 \001(\0132\033.InforGuard_.ExceptionErr"
  "or\022\013\n\003ret\030\003 \001(\005\"Z\n\016MoveFileOutReq\022&\n\004cal"
  "l\030\001 \001(\0132\030.InforGuard_.netCallData\022\017\n\007src"
  "file\030\002 \001(\014\022\017\n\007dstfile\030\003 \001(\014\"n\n\016MoveFileO"
  "utRes\022&\n\004call\030\001 \001(\0132\030.InforGuard_.netCal"
  "lData\022\'\n\002ex\030\002 \001(\0132\033.InforGuard_.Exceptio"
  "nError\022\013\n\003ret\030\003 \001(\005\"g\n\rRenameFileReq\022&\n\004"
  "call\030\001 \001(\0132\030.InforGuard_.netCallData\022\017\n\007"
  "oldfile\030\002 \001(\014\022\017\n\007newfile\030\003 \001(\014\022\014\n\004attr\030\004"
  " \001(\005\"m\n\rRenameFileRes\022&\n\004call\030\001 \001(\0132\030.In"
  "forGuard_.netCallData\022\'\n\002ex\030\002 \001(\0132\033.Info"
  "rGuard_.ExceptionError\022\013\n\003ret\030\003 \001(\005\"\037\n\020Q"
  "ueryBasePathReq\022\013\n\003req\030\001 \001(\010\"Z\n\020QueryBas"
  "ePathRes\022\'\n\002ex\030\001 \001(\0132\033.InforGuard_.Excep"
  "tionError\022\020\n\010basepath\030\002 \001(\014\022\013\n\003ret\030\003 \001(\005"
  "\"\"\n\016isFileExistReq\022\020\n\010filePath\030\001 \001(\014\"X\n\016"
  "isFileExistRes\022\'\n\002ex\030\001 \001(\0132\033.InforGuard_"
  ".ExceptionError\022\020\n\010fileSize\030\002 \001(\005\022\013\n\003ret"
  "\030\003 \001(\005\"Y\n\016setFileTimeReq\022&\n\004call\030\001 \001(\0132\030"
  ".InforGuard_.netCallData\022\020\n\010filename\030\002 \001"
  "(\014\022\r\n\005mtime\030\003 \001(\005\"n\n\016setFileTimeRes\022&\n\004c"
  "all\030\001 \001(\0132\030.InforGuard_.netCallData\022\'\n\002e"
  "x\030\002 \001(\0132\033.InforGuard_.ExceptionError\022\013\n\003"
  "ret\030\003 \001(\005\"J\n\016getFileTimeReq\022&\n\004call\030\001 \001("
  "\0132\030.InforGuard_.netCallData\022\020\n\010filename\030"
  "\002 \001(\014\"}\n\016getFileTimeRes\022&\n\004call\030\001 \001(\0132\030."
  "InforGuard_.netCallData\022\'\n\002ex\030\002 \001(\0132\033.In"
  "forGuard_.ExceptionError\022\r\n\005mtime\030\003 \001(\005\022"
  "\013\n\003ret\030\004 \001(\005\"=\n\017sendFileListReq\022*\n\004list\030"
  "\001 \003(\0132\034.InforGuard_.RemoteDirectory\"G\n\017s"
  "endFileListRes\022\'\n\002ex\030\001 \001(\0132\033.InforGuard_"
  ".ExceptionError\022\013\n\003ret\030\002 \001(\005\"\034\n\rsendAcce"
  "ssReq\022\013\n\003req\030\001 \001(\010\"E\n\rsendAccessRes\022\'\n\002e"
  "x\030\001 \001(\0132\033.InforGuard_.ExceptionError\022\013\n\003"
  "ret\030\002 \001(\005\"@\n\020checkFileListReq\022,\n\006inList\030"
  "\001 \003(\0132\034.InforGuard_.NetFileListNode\"p\n\020c"
  "heckFileListRes\022\'\n\002ex\030\001 \001(\0132\033.InforGuard"
  "_.ExceptionError\022\024\n\014notExistList\030\002 \003(\014\022\020"
  "\n\010diffList\030\003 \003(\014\022\013\n\003ret\030\004 \001(\0052\210\010\n\010FileTr"
  "an\0225\n\005Check\022\025.InforGuard_.CheckReq\032\025.Inf"
  "orGuard_.CheckRes\022J\n\014GetFileBlock\022\034.Info"
  "rGuard_.GetFileBlockReq\032\034.InforGuard_.Ge"
  "tFileBlockRes\022J\n\014PutFileBlock\022\034.InforGua"
  "rd_.PutFileBlockReq\032\034.InforGuard_.PutFil"
  "eBlockRes\022M\n\rMakeDirectory\022\035.InforGuard_"
  ".MakeDirectoryReq\032\035.InforGuard_.MakeDire"
  "ctoryRes\022D\n\nMoveFileIn\022\032.InforGuard_.Mov"
  "eFileInReq\032\032.InforGuard_.MoveFileInRes\022G"
  "\n\013MoveFileOut\022\033.InforGuard_.MoveFileOutR"
  "eq\032\033.InforGuard_.MoveFileOutRes\022D\n\nRenam"
  "eFile\022\032.InforGuard_.RenameFileReq\032\032.Info"
  "rGuard_.RenameFileRes\022M\n\rQueryBasePath\022\035"
  ".InforGuard_.QueryBasePathReq\032\035.InforGua"
  "rd_.QueryBasePathRes\022G\n\013isFileExist\022\033.In"
  "forGuard_.isFileExistReq\032\033.InforGuard_.i"
  "sFileExistRes\022G\n\013setFileTime\022\033.InforGuar"
  "d_.setFileTimeReq\032\033.InforGuard_.setFileT"
  "imeRes\022G\n\013getFileTime\022\033.InforGuard_.getF"
  "ileTimeReq\032\033.InforGuard_.getFileTimeRes\022"
  "J\n\014sendFileList\022\034.InforGuard_.sendFileLi"
  "stReq\032\034.InforGuard_.sendFileListRes\022D\n\ns"
  "endAccess\022\032.InforGuard_.sendAccessReq\032\032."
  "InforGuard_.sendAccessRes\022M\n\rcheckFileLi"
  "st\022\035.InforGuard_.checkFileListReq\032\035.Info"
  "rGuard_.checkFileListResb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_FileTran_2eproto_deps[1] = {
  &::descriptor_table_Metadata_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_FileTran_2eproto_sccs[26] = {
  &scc_info_GetFileBlockReq_FileTran_2eproto.base,
  &scc_info_GetFileBlockRes_FileTran_2eproto.base,
  &scc_info_MakeDirectoryReq_FileTran_2eproto.base,
  &scc_info_MakeDirectoryRes_FileTran_2eproto.base,
  &scc_info_MoveFileInReq_FileTran_2eproto.base,
  &scc_info_MoveFileInRes_FileTran_2eproto.base,
  &scc_info_MoveFileOutReq_FileTran_2eproto.base,
  &scc_info_MoveFileOutRes_FileTran_2eproto.base,
  &scc_info_PutFileBlockReq_FileTran_2eproto.base,
  &scc_info_PutFileBlockRes_FileTran_2eproto.base,
  &scc_info_QueryBasePathReq_FileTran_2eproto.base,
  &scc_info_QueryBasePathRes_FileTran_2eproto.base,
  &scc_info_RenameFileReq_FileTran_2eproto.base,
  &scc_info_RenameFileRes_FileTran_2eproto.base,
  &scc_info_checkFileListReq_FileTran_2eproto.base,
  &scc_info_checkFileListRes_FileTran_2eproto.base,
  &scc_info_getFileTimeReq_FileTran_2eproto.base,
  &scc_info_getFileTimeRes_FileTran_2eproto.base,
  &scc_info_isFileExistReq_FileTran_2eproto.base,
  &scc_info_isFileExistRes_FileTran_2eproto.base,
  &scc_info_sendAccessReq_FileTran_2eproto.base,
  &scc_info_sendAccessRes_FileTran_2eproto.base,
  &scc_info_sendFileListReq_FileTran_2eproto.base,
  &scc_info_sendFileListRes_FileTran_2eproto.base,
  &scc_info_setFileTimeReq_FileTran_2eproto.base,
  &scc_info_setFileTimeRes_FileTran_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_FileTran_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FileTran_2eproto = {
  false, false, descriptor_table_protodef_FileTran_2eproto, "FileTran.proto", 3512,
  &descriptor_table_FileTran_2eproto_once, descriptor_table_FileTran_2eproto_sccs, descriptor_table_FileTran_2eproto_deps, 26, 1,
  schemas, file_default_instances, TableStruct_FileTran_2eproto::offsets,
  file_level_metadata_FileTran_2eproto, 26, file_level_enum_descriptors_FileTran_2eproto, file_level_service_descriptors_FileTran_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_FileTran_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_FileTran_2eproto)), true);
namespace InforGuard_ {

// ===================================================================

void GetFileBlockReq::InitAsDefaultInstance() {
  ::InforGuard_::_GetFileBlockReq_default_instance_._instance.get_mutable()->call_ = const_cast< ::InforGuard_::netCallData*>(
      ::InforGuard_::netCallData::internal_default_instance());
}
class GetFileBlockReq::_Internal {
 public:
  static const ::InforGuard_::netCallData& call(const GetFileBlockReq* msg);
};

const ::InforGuard_::netCallData&
GetFileBlockReq::_Internal::call(const GetFileBlockReq* msg) {
  return *msg->call_;
}
void GetFileBlockReq::clear_call() {
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
}
GetFileBlockReq::GetFileBlockReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.GetFileBlockReq)
}
GetFileBlockReq::GetFileBlockReq(const GetFileBlockReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_filename(),
      GetArena());
  }
  if (from._internal_has_call()) {
    call_ = new ::InforGuard_::netCallData(*from.call_);
  } else {
    call_ = nullptr;
  }
  ::memcpy(&off_, &from.off_,
    static_cast<size_t>(reinterpret_cast<char*>(&len_) -
    reinterpret_cast<char*>(&off_)) + sizeof(len_));
  // @@protoc_insertion_point(copy_constructor:InforGuard_.GetFileBlockReq)
}

void GetFileBlockReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetFileBlockReq_FileTran_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&call_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&len_) -
      reinterpret_cast<char*>(&call_)) + sizeof(len_));
}

GetFileBlockReq::~GetFileBlockReq() {
  // @@protoc_insertion_point(destructor:InforGuard_.GetFileBlockReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetFileBlockReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete call_;
}

void GetFileBlockReq::ArenaDtor(void* object) {
  GetFileBlockReq* _this = reinterpret_cast< GetFileBlockReq* >(object);
  (void)_this;
}
void GetFileBlockReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetFileBlockReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetFileBlockReq& GetFileBlockReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetFileBlockReq_FileTran_2eproto.base);
  return *internal_default_instance();
}


void GetFileBlockReq::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.GetFileBlockReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
  ::memset(&off_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&len_) -
      reinterpret_cast<char*>(&off_)) + sizeof(len_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFileBlockReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.netCallData call = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes filename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 off = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          off_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 len = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFileBlockReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.GetFileBlockReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call(this), target, stream);
  }

  // bytes filename = 2;
  if (this->filename().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_filename(), target);
  }

  // sint64 off = 3;
  if (this->off() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(3, this->_internal_off(), target);
  }

  // int32 len = 4;
  if (this->len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_len(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.GetFileBlockReq)
  return target;
}

size_t GetFileBlockReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.GetFileBlockReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes filename = 2;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_filename());
  }

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_);
  }

  // sint64 off = 3;
  if (this->off() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_off());
  }

  // int32 len = 4;
  if (this->len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_len());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFileBlockReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.GetFileBlockReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFileBlockReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetFileBlockReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.GetFileBlockReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.GetFileBlockReq)
    MergeFrom(*source);
  }
}

void GetFileBlockReq::MergeFrom(const GetFileBlockReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.GetFileBlockReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {
    _internal_set_filename(from._internal_filename());
  }
  if (from.has_call()) {
    _internal_mutable_call()->::InforGuard_::netCallData::MergeFrom(from._internal_call());
  }
  if (from.off() != 0) {
    _internal_set_off(from._internal_off());
  }
  if (from.len() != 0) {
    _internal_set_len(from._internal_len());
  }
}

void GetFileBlockReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.GetFileBlockReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFileBlockReq::CopyFrom(const GetFileBlockReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.GetFileBlockReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileBlockReq::IsInitialized() const {
  return true;
}

void GetFileBlockReq::InternalSwap(GetFileBlockReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetFileBlockReq, len_)
      + sizeof(GetFileBlockReq::len_)
      - PROTOBUF_FIELD_OFFSET(GetFileBlockReq, call_)>(
          reinterpret_cast<char*>(&call_),
          reinterpret_cast<char*>(&other->call_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFileBlockReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetFileBlockRes::InitAsDefaultInstance() {
  ::InforGuard_::_GetFileBlockRes_default_instance_._instance.get_mutable()->call_ = const_cast< ::InforGuard_::netCallData*>(
      ::InforGuard_::netCallData::internal_default_instance());
  ::InforGuard_::_GetFileBlockRes_default_instance_._instance.get_mutable()->ex_ = const_cast< ::InforGuard_::ExceptionError*>(
      ::InforGuard_::ExceptionError::internal_default_instance());
}
class GetFileBlockRes::_Internal {
 public:
  static const ::InforGuard_::netCallData& call(const GetFileBlockRes* msg);
  static const ::InforGuard_::ExceptionError& ex(const GetFileBlockRes* msg);
};

const ::InforGuard_::netCallData&
GetFileBlockRes::_Internal::call(const GetFileBlockRes* msg) {
  return *msg->call_;
}
const ::InforGuard_::ExceptionError&
GetFileBlockRes::_Internal::ex(const GetFileBlockRes* msg) {
  return *msg->ex_;
}
void GetFileBlockRes::clear_call() {
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
}
void GetFileBlockRes::clear_ex() {
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
}
GetFileBlockRes::GetFileBlockRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.GetFileBlockRes)
}
GetFileBlockRes::GetFileBlockRes(const GetFileBlockRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  buff_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buff().empty()) {
    buff_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_buff(),
      GetArena());
  }
  if (from._internal_has_call()) {
    call_ = new ::InforGuard_::netCallData(*from.call_);
  } else {
    call_ = nullptr;
  }
  if (from._internal_has_ex()) {
    ex_ = new ::InforGuard_::ExceptionError(*from.ex_);
  } else {
    ex_ = nullptr;
  }
  ::memcpy(&len_, &from.len_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&len_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:InforGuard_.GetFileBlockRes)
}

void GetFileBlockRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetFileBlockRes_FileTran_2eproto.base);
  buff_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&call_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&call_)) + sizeof(ret_));
}

GetFileBlockRes::~GetFileBlockRes() {
  // @@protoc_insertion_point(destructor:InforGuard_.GetFileBlockRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetFileBlockRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  buff_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete call_;
  if (this != internal_default_instance()) delete ex_;
}

void GetFileBlockRes::ArenaDtor(void* object) {
  GetFileBlockRes* _this = reinterpret_cast< GetFileBlockRes* >(object);
  (void)_this;
}
void GetFileBlockRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetFileBlockRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetFileBlockRes& GetFileBlockRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetFileBlockRes_FileTran_2eproto.base);
  return *internal_default_instance();
}


void GetFileBlockRes::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.GetFileBlockRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buff_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
  ::memset(&len_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&len_)) + sizeof(ret_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFileBlockRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.netCallData call = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .InforGuard_.ExceptionError ex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes buff = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_buff();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 len = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ret = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFileBlockRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.GetFileBlockRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call(this), target, stream);
  }

  // .InforGuard_.ExceptionError ex = 2;
  if (this->has_ex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ex(this), target, stream);
  }

  // bytes buff = 3;
  if (this->buff().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_buff(), target);
  }

  // int32 len = 4;
  if (this->len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_len(), target);
  }

  // int32 ret = 5;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.GetFileBlockRes)
  return target;
}

size_t GetFileBlockRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.GetFileBlockRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes buff = 3;
  if (this->buff().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buff());
  }

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_);
  }

  // .InforGuard_.ExceptionError ex = 2;
  if (this->has_ex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ex_);
  }

  // int32 len = 4;
  if (this->len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_len());
  }

  // int32 ret = 5;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFileBlockRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.GetFileBlockRes)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFileBlockRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetFileBlockRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.GetFileBlockRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.GetFileBlockRes)
    MergeFrom(*source);
  }
}

void GetFileBlockRes::MergeFrom(const GetFileBlockRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.GetFileBlockRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.buff().size() > 0) {
    _internal_set_buff(from._internal_buff());
  }
  if (from.has_call()) {
    _internal_mutable_call()->::InforGuard_::netCallData::MergeFrom(from._internal_call());
  }
  if (from.has_ex()) {
    _internal_mutable_ex()->::InforGuard_::ExceptionError::MergeFrom(from._internal_ex());
  }
  if (from.len() != 0) {
    _internal_set_len(from._internal_len());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void GetFileBlockRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.GetFileBlockRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFileBlockRes::CopyFrom(const GetFileBlockRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.GetFileBlockRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileBlockRes::IsInitialized() const {
  return true;
}

void GetFileBlockRes::InternalSwap(GetFileBlockRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  buff_.Swap(&other->buff_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetFileBlockRes, ret_)
      + sizeof(GetFileBlockRes::ret_)
      - PROTOBUF_FIELD_OFFSET(GetFileBlockRes, call_)>(
          reinterpret_cast<char*>(&call_),
          reinterpret_cast<char*>(&other->call_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFileBlockRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PutFileBlockReq::InitAsDefaultInstance() {
  ::InforGuard_::_PutFileBlockReq_default_instance_._instance.get_mutable()->call_ = const_cast< ::InforGuard_::netCallData*>(
      ::InforGuard_::netCallData::internal_default_instance());
}
class PutFileBlockReq::_Internal {
 public:
  static const ::InforGuard_::netCallData& call(const PutFileBlockReq* msg);
};

const ::InforGuard_::netCallData&
PutFileBlockReq::_Internal::call(const PutFileBlockReq* msg) {
  return *msg->call_;
}
void PutFileBlockReq::clear_call() {
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
}
PutFileBlockReq::PutFileBlockReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.PutFileBlockReq)
}
PutFileBlockReq::PutFileBlockReq(const PutFileBlockReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_filename(),
      GetArena());
  }
  buff_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buff().empty()) {
    buff_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_buff(),
      GetArena());
  }
  if (from._internal_has_call()) {
    call_ = new ::InforGuard_::netCallData(*from.call_);
  } else {
    call_ = nullptr;
  }
  ::memcpy(&off_, &from.off_,
    static_cast<size_t>(reinterpret_cast<char*>(&len_) -
    reinterpret_cast<char*>(&off_)) + sizeof(len_));
  // @@protoc_insertion_point(copy_constructor:InforGuard_.PutFileBlockReq)
}

void PutFileBlockReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PutFileBlockReq_FileTran_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buff_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&call_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&len_) -
      reinterpret_cast<char*>(&call_)) + sizeof(len_));
}

PutFileBlockReq::~PutFileBlockReq() {
  // @@protoc_insertion_point(destructor:InforGuard_.PutFileBlockReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PutFileBlockReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buff_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete call_;
}

void PutFileBlockReq::ArenaDtor(void* object) {
  PutFileBlockReq* _this = reinterpret_cast< PutFileBlockReq* >(object);
  (void)_this;
}
void PutFileBlockReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PutFileBlockReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PutFileBlockReq& PutFileBlockReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PutFileBlockReq_FileTran_2eproto.base);
  return *internal_default_instance();
}


void PutFileBlockReq::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.PutFileBlockReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  buff_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
  ::memset(&off_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&len_) -
      reinterpret_cast<char*>(&off_)) + sizeof(len_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PutFileBlockReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.netCallData call = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes filename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 off = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          off_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes buff = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_buff();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 len = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PutFileBlockReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.PutFileBlockReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call(this), target, stream);
  }

  // bytes filename = 2;
  if (this->filename().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_filename(), target);
  }

  // sint64 off = 3;
  if (this->off() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(3, this->_internal_off(), target);
  }

  // bytes buff = 4;
  if (this->buff().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_buff(), target);
  }

  // int32 len = 5;
  if (this->len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_len(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.PutFileBlockReq)
  return target;
}

size_t PutFileBlockReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.PutFileBlockReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes filename = 2;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_filename());
  }

  // bytes buff = 4;
  if (this->buff().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buff());
  }

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_);
  }

  // sint64 off = 3;
  if (this->off() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_off());
  }

  // int32 len = 5;
  if (this->len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_len());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutFileBlockReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.PutFileBlockReq)
  GOOGLE_DCHECK_NE(&from, this);
  const PutFileBlockReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PutFileBlockReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.PutFileBlockReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.PutFileBlockReq)
    MergeFrom(*source);
  }
}

void PutFileBlockReq::MergeFrom(const PutFileBlockReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.PutFileBlockReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {
    _internal_set_filename(from._internal_filename());
  }
  if (from.buff().size() > 0) {
    _internal_set_buff(from._internal_buff());
  }
  if (from.has_call()) {
    _internal_mutable_call()->::InforGuard_::netCallData::MergeFrom(from._internal_call());
  }
  if (from.off() != 0) {
    _internal_set_off(from._internal_off());
  }
  if (from.len() != 0) {
    _internal_set_len(from._internal_len());
  }
}

void PutFileBlockReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.PutFileBlockReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutFileBlockReq::CopyFrom(const PutFileBlockReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.PutFileBlockReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutFileBlockReq::IsInitialized() const {
  return true;
}

void PutFileBlockReq::InternalSwap(PutFileBlockReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  buff_.Swap(&other->buff_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PutFileBlockReq, len_)
      + sizeof(PutFileBlockReq::len_)
      - PROTOBUF_FIELD_OFFSET(PutFileBlockReq, call_)>(
          reinterpret_cast<char*>(&call_),
          reinterpret_cast<char*>(&other->call_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PutFileBlockReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PutFileBlockRes::InitAsDefaultInstance() {
  ::InforGuard_::_PutFileBlockRes_default_instance_._instance.get_mutable()->call_ = const_cast< ::InforGuard_::netCallData*>(
      ::InforGuard_::netCallData::internal_default_instance());
  ::InforGuard_::_PutFileBlockRes_default_instance_._instance.get_mutable()->ex_ = const_cast< ::InforGuard_::ExceptionError*>(
      ::InforGuard_::ExceptionError::internal_default_instance());
}
class PutFileBlockRes::_Internal {
 public:
  static const ::InforGuard_::netCallData& call(const PutFileBlockRes* msg);
  static const ::InforGuard_::ExceptionError& ex(const PutFileBlockRes* msg);
};

const ::InforGuard_::netCallData&
PutFileBlockRes::_Internal::call(const PutFileBlockRes* msg) {
  return *msg->call_;
}
const ::InforGuard_::ExceptionError&
PutFileBlockRes::_Internal::ex(const PutFileBlockRes* msg) {
  return *msg->ex_;
}
void PutFileBlockRes::clear_call() {
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
}
void PutFileBlockRes::clear_ex() {
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
}
PutFileBlockRes::PutFileBlockRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.PutFileBlockRes)
}
PutFileBlockRes::PutFileBlockRes(const PutFileBlockRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_call()) {
    call_ = new ::InforGuard_::netCallData(*from.call_);
  } else {
    call_ = nullptr;
  }
  if (from._internal_has_ex()) {
    ex_ = new ::InforGuard_::ExceptionError(*from.ex_);
  } else {
    ex_ = nullptr;
  }
  ::memcpy(&len_, &from.len_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&len_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:InforGuard_.PutFileBlockRes)
}

void PutFileBlockRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PutFileBlockRes_FileTran_2eproto.base);
  ::memset(&call_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&call_)) + sizeof(ret_));
}

PutFileBlockRes::~PutFileBlockRes() {
  // @@protoc_insertion_point(destructor:InforGuard_.PutFileBlockRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PutFileBlockRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete call_;
  if (this != internal_default_instance()) delete ex_;
}

void PutFileBlockRes::ArenaDtor(void* object) {
  PutFileBlockRes* _this = reinterpret_cast< PutFileBlockRes* >(object);
  (void)_this;
}
void PutFileBlockRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PutFileBlockRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PutFileBlockRes& PutFileBlockRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PutFileBlockRes_FileTran_2eproto.base);
  return *internal_default_instance();
}


void PutFileBlockRes::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.PutFileBlockRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
  ::memset(&len_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&len_)) + sizeof(ret_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PutFileBlockRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.netCallData call = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .InforGuard_.ExceptionError ex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 len = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ret = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PutFileBlockRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.PutFileBlockRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call(this), target, stream);
  }

  // .InforGuard_.ExceptionError ex = 2;
  if (this->has_ex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ex(this), target, stream);
  }

  // int32 len = 3;
  if (this->len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_len(), target);
  }

  // int32 ret = 4;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.PutFileBlockRes)
  return target;
}

size_t PutFileBlockRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.PutFileBlockRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_);
  }

  // .InforGuard_.ExceptionError ex = 2;
  if (this->has_ex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ex_);
  }

  // int32 len = 3;
  if (this->len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_len());
  }

  // int32 ret = 4;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutFileBlockRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.PutFileBlockRes)
  GOOGLE_DCHECK_NE(&from, this);
  const PutFileBlockRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PutFileBlockRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.PutFileBlockRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.PutFileBlockRes)
    MergeFrom(*source);
  }
}

void PutFileBlockRes::MergeFrom(const PutFileBlockRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.PutFileBlockRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_call()) {
    _internal_mutable_call()->::InforGuard_::netCallData::MergeFrom(from._internal_call());
  }
  if (from.has_ex()) {
    _internal_mutable_ex()->::InforGuard_::ExceptionError::MergeFrom(from._internal_ex());
  }
  if (from.len() != 0) {
    _internal_set_len(from._internal_len());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void PutFileBlockRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.PutFileBlockRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutFileBlockRes::CopyFrom(const PutFileBlockRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.PutFileBlockRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutFileBlockRes::IsInitialized() const {
  return true;
}

void PutFileBlockRes::InternalSwap(PutFileBlockRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PutFileBlockRes, ret_)
      + sizeof(PutFileBlockRes::ret_)
      - PROTOBUF_FIELD_OFFSET(PutFileBlockRes, call_)>(
          reinterpret_cast<char*>(&call_),
          reinterpret_cast<char*>(&other->call_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PutFileBlockRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MakeDirectoryReq::InitAsDefaultInstance() {
  ::InforGuard_::_MakeDirectoryReq_default_instance_._instance.get_mutable()->call_ = const_cast< ::InforGuard_::netCallData*>(
      ::InforGuard_::netCallData::internal_default_instance());
}
class MakeDirectoryReq::_Internal {
 public:
  static const ::InforGuard_::netCallData& call(const MakeDirectoryReq* msg);
};

const ::InforGuard_::netCallData&
MakeDirectoryReq::_Internal::call(const MakeDirectoryReq* msg) {
  return *msg->call_;
}
void MakeDirectoryReq::clear_call() {
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
}
MakeDirectoryReq::MakeDirectoryReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.MakeDirectoryReq)
}
MakeDirectoryReq::MakeDirectoryReq(const MakeDirectoryReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_filename(),
      GetArena());
  }
  if (from._internal_has_call()) {
    call_ = new ::InforGuard_::netCallData(*from.call_);
  } else {
    call_ = nullptr;
  }
  temp_ = from.temp_;
  // @@protoc_insertion_point(copy_constructor:InforGuard_.MakeDirectoryReq)
}

void MakeDirectoryReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MakeDirectoryReq_FileTran_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&call_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&temp_) -
      reinterpret_cast<char*>(&call_)) + sizeof(temp_));
}

MakeDirectoryReq::~MakeDirectoryReq() {
  // @@protoc_insertion_point(destructor:InforGuard_.MakeDirectoryReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MakeDirectoryReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete call_;
}

void MakeDirectoryReq::ArenaDtor(void* object) {
  MakeDirectoryReq* _this = reinterpret_cast< MakeDirectoryReq* >(object);
  (void)_this;
}
void MakeDirectoryReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MakeDirectoryReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MakeDirectoryReq& MakeDirectoryReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MakeDirectoryReq_FileTran_2eproto.base);
  return *internal_default_instance();
}


void MakeDirectoryReq::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.MakeDirectoryReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
  temp_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MakeDirectoryReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.netCallData call = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes filename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool temp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MakeDirectoryReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.MakeDirectoryReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call(this), target, stream);
  }

  // bytes filename = 2;
  if (this->filename().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_filename(), target);
  }

  // bool temp = 3;
  if (this->temp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_temp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.MakeDirectoryReq)
  return target;
}

size_t MakeDirectoryReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.MakeDirectoryReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes filename = 2;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_filename());
  }

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_);
  }

  // bool temp = 3;
  if (this->temp() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MakeDirectoryReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.MakeDirectoryReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MakeDirectoryReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MakeDirectoryReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.MakeDirectoryReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.MakeDirectoryReq)
    MergeFrom(*source);
  }
}

void MakeDirectoryReq::MergeFrom(const MakeDirectoryReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.MakeDirectoryReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {
    _internal_set_filename(from._internal_filename());
  }
  if (from.has_call()) {
    _internal_mutable_call()->::InforGuard_::netCallData::MergeFrom(from._internal_call());
  }
  if (from.temp() != 0) {
    _internal_set_temp(from._internal_temp());
  }
}

void MakeDirectoryReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.MakeDirectoryReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MakeDirectoryReq::CopyFrom(const MakeDirectoryReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.MakeDirectoryReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakeDirectoryReq::IsInitialized() const {
  return true;
}

void MakeDirectoryReq::InternalSwap(MakeDirectoryReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MakeDirectoryReq, temp_)
      + sizeof(MakeDirectoryReq::temp_)
      - PROTOBUF_FIELD_OFFSET(MakeDirectoryReq, call_)>(
          reinterpret_cast<char*>(&call_),
          reinterpret_cast<char*>(&other->call_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MakeDirectoryReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MakeDirectoryRes::InitAsDefaultInstance() {
  ::InforGuard_::_MakeDirectoryRes_default_instance_._instance.get_mutable()->call_ = const_cast< ::InforGuard_::netCallData*>(
      ::InforGuard_::netCallData::internal_default_instance());
  ::InforGuard_::_MakeDirectoryRes_default_instance_._instance.get_mutable()->ex_ = const_cast< ::InforGuard_::ExceptionError*>(
      ::InforGuard_::ExceptionError::internal_default_instance());
}
class MakeDirectoryRes::_Internal {
 public:
  static const ::InforGuard_::netCallData& call(const MakeDirectoryRes* msg);
  static const ::InforGuard_::ExceptionError& ex(const MakeDirectoryRes* msg);
};

const ::InforGuard_::netCallData&
MakeDirectoryRes::_Internal::call(const MakeDirectoryRes* msg) {
  return *msg->call_;
}
const ::InforGuard_::ExceptionError&
MakeDirectoryRes::_Internal::ex(const MakeDirectoryRes* msg) {
  return *msg->ex_;
}
void MakeDirectoryRes::clear_call() {
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
}
void MakeDirectoryRes::clear_ex() {
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
}
MakeDirectoryRes::MakeDirectoryRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.MakeDirectoryRes)
}
MakeDirectoryRes::MakeDirectoryRes(const MakeDirectoryRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_call()) {
    call_ = new ::InforGuard_::netCallData(*from.call_);
  } else {
    call_ = nullptr;
  }
  if (from._internal_has_ex()) {
    ex_ = new ::InforGuard_::ExceptionError(*from.ex_);
  } else {
    ex_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:InforGuard_.MakeDirectoryRes)
}

void MakeDirectoryRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MakeDirectoryRes_FileTran_2eproto.base);
  ::memset(&call_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&call_)) + sizeof(ret_));
}

MakeDirectoryRes::~MakeDirectoryRes() {
  // @@protoc_insertion_point(destructor:InforGuard_.MakeDirectoryRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MakeDirectoryRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete call_;
  if (this != internal_default_instance()) delete ex_;
}

void MakeDirectoryRes::ArenaDtor(void* object) {
  MakeDirectoryRes* _this = reinterpret_cast< MakeDirectoryRes* >(object);
  (void)_this;
}
void MakeDirectoryRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MakeDirectoryRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MakeDirectoryRes& MakeDirectoryRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MakeDirectoryRes_FileTran_2eproto.base);
  return *internal_default_instance();
}


void MakeDirectoryRes::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.MakeDirectoryRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
  ret_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MakeDirectoryRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.netCallData call = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .InforGuard_.ExceptionError ex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MakeDirectoryRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.MakeDirectoryRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call(this), target, stream);
  }

  // .InforGuard_.ExceptionError ex = 2;
  if (this->has_ex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ex(this), target, stream);
  }

  // int32 ret = 3;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.MakeDirectoryRes)
  return target;
}

size_t MakeDirectoryRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.MakeDirectoryRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_);
  }

  // .InforGuard_.ExceptionError ex = 2;
  if (this->has_ex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ex_);
  }

  // int32 ret = 3;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MakeDirectoryRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.MakeDirectoryRes)
  GOOGLE_DCHECK_NE(&from, this);
  const MakeDirectoryRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MakeDirectoryRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.MakeDirectoryRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.MakeDirectoryRes)
    MergeFrom(*source);
  }
}

void MakeDirectoryRes::MergeFrom(const MakeDirectoryRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.MakeDirectoryRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_call()) {
    _internal_mutable_call()->::InforGuard_::netCallData::MergeFrom(from._internal_call());
  }
  if (from.has_ex()) {
    _internal_mutable_ex()->::InforGuard_::ExceptionError::MergeFrom(from._internal_ex());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void MakeDirectoryRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.MakeDirectoryRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MakeDirectoryRes::CopyFrom(const MakeDirectoryRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.MakeDirectoryRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakeDirectoryRes::IsInitialized() const {
  return true;
}

void MakeDirectoryRes::InternalSwap(MakeDirectoryRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MakeDirectoryRes, ret_)
      + sizeof(MakeDirectoryRes::ret_)
      - PROTOBUF_FIELD_OFFSET(MakeDirectoryRes, call_)>(
          reinterpret_cast<char*>(&call_),
          reinterpret_cast<char*>(&other->call_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MakeDirectoryRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveFileInReq::InitAsDefaultInstance() {
  ::InforGuard_::_MoveFileInReq_default_instance_._instance.get_mutable()->call_ = const_cast< ::InforGuard_::netCallData*>(
      ::InforGuard_::netCallData::internal_default_instance());
}
class MoveFileInReq::_Internal {
 public:
  static const ::InforGuard_::netCallData& call(const MoveFileInReq* msg);
};

const ::InforGuard_::netCallData&
MoveFileInReq::_Internal::call(const MoveFileInReq* msg) {
  return *msg->call_;
}
void MoveFileInReq::clear_call() {
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
}
MoveFileInReq::MoveFileInReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.MoveFileInReq)
}
MoveFileInReq::MoveFileInReq(const MoveFileInReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  srcfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_srcfile().empty()) {
    srcfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_srcfile(),
      GetArena());
  }
  dstfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dstfile().empty()) {
    dstfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dstfile(),
      GetArena());
  }
  delfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_delfile().empty()) {
    delfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_delfile(),
      GetArena());
  }
  if (from._internal_has_call()) {
    call_ = new ::InforGuard_::netCallData(*from.call_);
  } else {
    call_ = nullptr;
  }
  btoppath_ = from.btoppath_;
  // @@protoc_insertion_point(copy_constructor:InforGuard_.MoveFileInReq)
}

void MoveFileInReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveFileInReq_FileTran_2eproto.base);
  srcfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  delfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&call_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&btoppath_) -
      reinterpret_cast<char*>(&call_)) + sizeof(btoppath_));
}

MoveFileInReq::~MoveFileInReq() {
  // @@protoc_insertion_point(destructor:InforGuard_.MoveFileInReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoveFileInReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  srcfile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstfile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  delfile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete call_;
}

void MoveFileInReq::ArenaDtor(void* object) {
  MoveFileInReq* _this = reinterpret_cast< MoveFileInReq* >(object);
  (void)_this;
}
void MoveFileInReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveFileInReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveFileInReq& MoveFileInReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveFileInReq_FileTran_2eproto.base);
  return *internal_default_instance();
}


void MoveFileInReq::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.MoveFileInReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  srcfile_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dstfile_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  delfile_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
  btoppath_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveFileInReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.netCallData call = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes srcfile = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_srcfile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes dstfile = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_dstfile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes delfile = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_delfile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bTopPath = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          btoppath_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveFileInReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.MoveFileInReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call(this), target, stream);
  }

  // bytes srcfile = 2;
  if (this->srcfile().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_srcfile(), target);
  }

  // bytes dstfile = 3;
  if (this->dstfile().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_dstfile(), target);
  }

  // bytes delfile = 4;
  if (this->delfile().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_delfile(), target);
  }

  // bool bTopPath = 5;
  if (this->btoppath() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_btoppath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.MoveFileInReq)
  return target;
}

size_t MoveFileInReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.MoveFileInReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes srcfile = 2;
  if (this->srcfile().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_srcfile());
  }

  // bytes dstfile = 3;
  if (this->dstfile().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_dstfile());
  }

  // bytes delfile = 4;
  if (this->delfile().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_delfile());
  }

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_);
  }

  // bool bTopPath = 5;
  if (this->btoppath() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveFileInReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.MoveFileInReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveFileInReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveFileInReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.MoveFileInReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.MoveFileInReq)
    MergeFrom(*source);
  }
}

void MoveFileInReq::MergeFrom(const MoveFileInReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.MoveFileInReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.srcfile().size() > 0) {
    _internal_set_srcfile(from._internal_srcfile());
  }
  if (from.dstfile().size() > 0) {
    _internal_set_dstfile(from._internal_dstfile());
  }
  if (from.delfile().size() > 0) {
    _internal_set_delfile(from._internal_delfile());
  }
  if (from.has_call()) {
    _internal_mutable_call()->::InforGuard_::netCallData::MergeFrom(from._internal_call());
  }
  if (from.btoppath() != 0) {
    _internal_set_btoppath(from._internal_btoppath());
  }
}

void MoveFileInReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.MoveFileInReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveFileInReq::CopyFrom(const MoveFileInReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.MoveFileInReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveFileInReq::IsInitialized() const {
  return true;
}

void MoveFileInReq::InternalSwap(MoveFileInReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  srcfile_.Swap(&other->srcfile_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dstfile_.Swap(&other->dstfile_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  delfile_.Swap(&other->delfile_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveFileInReq, btoppath_)
      + sizeof(MoveFileInReq::btoppath_)
      - PROTOBUF_FIELD_OFFSET(MoveFileInReq, call_)>(
          reinterpret_cast<char*>(&call_),
          reinterpret_cast<char*>(&other->call_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveFileInReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveFileInRes::InitAsDefaultInstance() {
  ::InforGuard_::_MoveFileInRes_default_instance_._instance.get_mutable()->call_ = const_cast< ::InforGuard_::netCallData*>(
      ::InforGuard_::netCallData::internal_default_instance());
  ::InforGuard_::_MoveFileInRes_default_instance_._instance.get_mutable()->ex_ = const_cast< ::InforGuard_::ExceptionError*>(
      ::InforGuard_::ExceptionError::internal_default_instance());
}
class MoveFileInRes::_Internal {
 public:
  static const ::InforGuard_::netCallData& call(const MoveFileInRes* msg);
  static const ::InforGuard_::ExceptionError& ex(const MoveFileInRes* msg);
};

const ::InforGuard_::netCallData&
MoveFileInRes::_Internal::call(const MoveFileInRes* msg) {
  return *msg->call_;
}
const ::InforGuard_::ExceptionError&
MoveFileInRes::_Internal::ex(const MoveFileInRes* msg) {
  return *msg->ex_;
}
void MoveFileInRes::clear_call() {
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
}
void MoveFileInRes::clear_ex() {
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
}
MoveFileInRes::MoveFileInRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.MoveFileInRes)
}
MoveFileInRes::MoveFileInRes(const MoveFileInRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_call()) {
    call_ = new ::InforGuard_::netCallData(*from.call_);
  } else {
    call_ = nullptr;
  }
  if (from._internal_has_ex()) {
    ex_ = new ::InforGuard_::ExceptionError(*from.ex_);
  } else {
    ex_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:InforGuard_.MoveFileInRes)
}

void MoveFileInRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveFileInRes_FileTran_2eproto.base);
  ::memset(&call_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&call_)) + sizeof(ret_));
}

MoveFileInRes::~MoveFileInRes() {
  // @@protoc_insertion_point(destructor:InforGuard_.MoveFileInRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoveFileInRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete call_;
  if (this != internal_default_instance()) delete ex_;
}

void MoveFileInRes::ArenaDtor(void* object) {
  MoveFileInRes* _this = reinterpret_cast< MoveFileInRes* >(object);
  (void)_this;
}
void MoveFileInRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveFileInRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveFileInRes& MoveFileInRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveFileInRes_FileTran_2eproto.base);
  return *internal_default_instance();
}


void MoveFileInRes::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.MoveFileInRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
  ret_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveFileInRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.netCallData call = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .InforGuard_.ExceptionError ex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveFileInRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.MoveFileInRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call(this), target, stream);
  }

  // .InforGuard_.ExceptionError ex = 2;
  if (this->has_ex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ex(this), target, stream);
  }

  // int32 ret = 3;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.MoveFileInRes)
  return target;
}

size_t MoveFileInRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.MoveFileInRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_);
  }

  // .InforGuard_.ExceptionError ex = 2;
  if (this->has_ex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ex_);
  }

  // int32 ret = 3;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveFileInRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.MoveFileInRes)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveFileInRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveFileInRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.MoveFileInRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.MoveFileInRes)
    MergeFrom(*source);
  }
}

void MoveFileInRes::MergeFrom(const MoveFileInRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.MoveFileInRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_call()) {
    _internal_mutable_call()->::InforGuard_::netCallData::MergeFrom(from._internal_call());
  }
  if (from.has_ex()) {
    _internal_mutable_ex()->::InforGuard_::ExceptionError::MergeFrom(from._internal_ex());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void MoveFileInRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.MoveFileInRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveFileInRes::CopyFrom(const MoveFileInRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.MoveFileInRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveFileInRes::IsInitialized() const {
  return true;
}

void MoveFileInRes::InternalSwap(MoveFileInRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveFileInRes, ret_)
      + sizeof(MoveFileInRes::ret_)
      - PROTOBUF_FIELD_OFFSET(MoveFileInRes, call_)>(
          reinterpret_cast<char*>(&call_),
          reinterpret_cast<char*>(&other->call_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveFileInRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveFileOutReq::InitAsDefaultInstance() {
  ::InforGuard_::_MoveFileOutReq_default_instance_._instance.get_mutable()->call_ = const_cast< ::InforGuard_::netCallData*>(
      ::InforGuard_::netCallData::internal_default_instance());
}
class MoveFileOutReq::_Internal {
 public:
  static const ::InforGuard_::netCallData& call(const MoveFileOutReq* msg);
};

const ::InforGuard_::netCallData&
MoveFileOutReq::_Internal::call(const MoveFileOutReq* msg) {
  return *msg->call_;
}
void MoveFileOutReq::clear_call() {
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
}
MoveFileOutReq::MoveFileOutReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.MoveFileOutReq)
}
MoveFileOutReq::MoveFileOutReq(const MoveFileOutReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  srcfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_srcfile().empty()) {
    srcfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_srcfile(),
      GetArena());
  }
  dstfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dstfile().empty()) {
    dstfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dstfile(),
      GetArena());
  }
  if (from._internal_has_call()) {
    call_ = new ::InforGuard_::netCallData(*from.call_);
  } else {
    call_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:InforGuard_.MoveFileOutReq)
}

void MoveFileOutReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveFileOutReq_FileTran_2eproto.base);
  srcfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  call_ = nullptr;
}

MoveFileOutReq::~MoveFileOutReq() {
  // @@protoc_insertion_point(destructor:InforGuard_.MoveFileOutReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoveFileOutReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  srcfile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstfile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete call_;
}

void MoveFileOutReq::ArenaDtor(void* object) {
  MoveFileOutReq* _this = reinterpret_cast< MoveFileOutReq* >(object);
  (void)_this;
}
void MoveFileOutReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveFileOutReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveFileOutReq& MoveFileOutReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveFileOutReq_FileTran_2eproto.base);
  return *internal_default_instance();
}


void MoveFileOutReq::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.MoveFileOutReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  srcfile_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dstfile_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveFileOutReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.netCallData call = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes srcfile = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_srcfile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes dstfile = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_dstfile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveFileOutReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.MoveFileOutReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call(this), target, stream);
  }

  // bytes srcfile = 2;
  if (this->srcfile().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_srcfile(), target);
  }

  // bytes dstfile = 3;
  if (this->dstfile().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_dstfile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.MoveFileOutReq)
  return target;
}

size_t MoveFileOutReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.MoveFileOutReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes srcfile = 2;
  if (this->srcfile().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_srcfile());
  }

  // bytes dstfile = 3;
  if (this->dstfile().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_dstfile());
  }

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveFileOutReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.MoveFileOutReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveFileOutReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveFileOutReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.MoveFileOutReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.MoveFileOutReq)
    MergeFrom(*source);
  }
}

void MoveFileOutReq::MergeFrom(const MoveFileOutReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.MoveFileOutReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.srcfile().size() > 0) {
    _internal_set_srcfile(from._internal_srcfile());
  }
  if (from.dstfile().size() > 0) {
    _internal_set_dstfile(from._internal_dstfile());
  }
  if (from.has_call()) {
    _internal_mutable_call()->::InforGuard_::netCallData::MergeFrom(from._internal_call());
  }
}

void MoveFileOutReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.MoveFileOutReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveFileOutReq::CopyFrom(const MoveFileOutReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.MoveFileOutReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveFileOutReq::IsInitialized() const {
  return true;
}

void MoveFileOutReq::InternalSwap(MoveFileOutReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  srcfile_.Swap(&other->srcfile_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dstfile_.Swap(&other->dstfile_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(call_, other->call_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveFileOutReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveFileOutRes::InitAsDefaultInstance() {
  ::InforGuard_::_MoveFileOutRes_default_instance_._instance.get_mutable()->call_ = const_cast< ::InforGuard_::netCallData*>(
      ::InforGuard_::netCallData::internal_default_instance());
  ::InforGuard_::_MoveFileOutRes_default_instance_._instance.get_mutable()->ex_ = const_cast< ::InforGuard_::ExceptionError*>(
      ::InforGuard_::ExceptionError::internal_default_instance());
}
class MoveFileOutRes::_Internal {
 public:
  static const ::InforGuard_::netCallData& call(const MoveFileOutRes* msg);
  static const ::InforGuard_::ExceptionError& ex(const MoveFileOutRes* msg);
};

const ::InforGuard_::netCallData&
MoveFileOutRes::_Internal::call(const MoveFileOutRes* msg) {
  return *msg->call_;
}
const ::InforGuard_::ExceptionError&
MoveFileOutRes::_Internal::ex(const MoveFileOutRes* msg) {
  return *msg->ex_;
}
void MoveFileOutRes::clear_call() {
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
}
void MoveFileOutRes::clear_ex() {
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
}
MoveFileOutRes::MoveFileOutRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.MoveFileOutRes)
}
MoveFileOutRes::MoveFileOutRes(const MoveFileOutRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_call()) {
    call_ = new ::InforGuard_::netCallData(*from.call_);
  } else {
    call_ = nullptr;
  }
  if (from._internal_has_ex()) {
    ex_ = new ::InforGuard_::ExceptionError(*from.ex_);
  } else {
    ex_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:InforGuard_.MoveFileOutRes)
}

void MoveFileOutRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveFileOutRes_FileTran_2eproto.base);
  ::memset(&call_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&call_)) + sizeof(ret_));
}

MoveFileOutRes::~MoveFileOutRes() {
  // @@protoc_insertion_point(destructor:InforGuard_.MoveFileOutRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoveFileOutRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete call_;
  if (this != internal_default_instance()) delete ex_;
}

void MoveFileOutRes::ArenaDtor(void* object) {
  MoveFileOutRes* _this = reinterpret_cast< MoveFileOutRes* >(object);
  (void)_this;
}
void MoveFileOutRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveFileOutRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveFileOutRes& MoveFileOutRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveFileOutRes_FileTran_2eproto.base);
  return *internal_default_instance();
}


void MoveFileOutRes::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.MoveFileOutRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
  ret_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveFileOutRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.netCallData call = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .InforGuard_.ExceptionError ex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveFileOutRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.MoveFileOutRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call(this), target, stream);
  }

  // .InforGuard_.ExceptionError ex = 2;
  if (this->has_ex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ex(this), target, stream);
  }

  // int32 ret = 3;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.MoveFileOutRes)
  return target;
}

size_t MoveFileOutRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.MoveFileOutRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_);
  }

  // .InforGuard_.ExceptionError ex = 2;
  if (this->has_ex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ex_);
  }

  // int32 ret = 3;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveFileOutRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.MoveFileOutRes)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveFileOutRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveFileOutRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.MoveFileOutRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.MoveFileOutRes)
    MergeFrom(*source);
  }
}

void MoveFileOutRes::MergeFrom(const MoveFileOutRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.MoveFileOutRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_call()) {
    _internal_mutable_call()->::InforGuard_::netCallData::MergeFrom(from._internal_call());
  }
  if (from.has_ex()) {
    _internal_mutable_ex()->::InforGuard_::ExceptionError::MergeFrom(from._internal_ex());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void MoveFileOutRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.MoveFileOutRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveFileOutRes::CopyFrom(const MoveFileOutRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.MoveFileOutRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveFileOutRes::IsInitialized() const {
  return true;
}

void MoveFileOutRes::InternalSwap(MoveFileOutRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveFileOutRes, ret_)
      + sizeof(MoveFileOutRes::ret_)
      - PROTOBUF_FIELD_OFFSET(MoveFileOutRes, call_)>(
          reinterpret_cast<char*>(&call_),
          reinterpret_cast<char*>(&other->call_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveFileOutRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RenameFileReq::InitAsDefaultInstance() {
  ::InforGuard_::_RenameFileReq_default_instance_._instance.get_mutable()->call_ = const_cast< ::InforGuard_::netCallData*>(
      ::InforGuard_::netCallData::internal_default_instance());
}
class RenameFileReq::_Internal {
 public:
  static const ::InforGuard_::netCallData& call(const RenameFileReq* msg);
};

const ::InforGuard_::netCallData&
RenameFileReq::_Internal::call(const RenameFileReq* msg) {
  return *msg->call_;
}
void RenameFileReq::clear_call() {
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
}
RenameFileReq::RenameFileReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.RenameFileReq)
}
RenameFileReq::RenameFileReq(const RenameFileReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  oldfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_oldfile().empty()) {
    oldfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_oldfile(),
      GetArena());
  }
  newfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_newfile().empty()) {
    newfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_newfile(),
      GetArena());
  }
  if (from._internal_has_call()) {
    call_ = new ::InforGuard_::netCallData(*from.call_);
  } else {
    call_ = nullptr;
  }
  attr_ = from.attr_;
  // @@protoc_insertion_point(copy_constructor:InforGuard_.RenameFileReq)
}

void RenameFileReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RenameFileReq_FileTran_2eproto.base);
  oldfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&call_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attr_) -
      reinterpret_cast<char*>(&call_)) + sizeof(attr_));
}

RenameFileReq::~RenameFileReq() {
  // @@protoc_insertion_point(destructor:InforGuard_.RenameFileReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RenameFileReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  oldfile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newfile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete call_;
}

void RenameFileReq::ArenaDtor(void* object) {
  RenameFileReq* _this = reinterpret_cast< RenameFileReq* >(object);
  (void)_this;
}
void RenameFileReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RenameFileReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RenameFileReq& RenameFileReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RenameFileReq_FileTran_2eproto.base);
  return *internal_default_instance();
}


void RenameFileReq::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.RenameFileReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  oldfile_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  newfile_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
  attr_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RenameFileReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.netCallData call = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes oldfile = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_oldfile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes newfile = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_newfile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 attr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          attr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RenameFileReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.RenameFileReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call(this), target, stream);
  }

  // bytes oldfile = 2;
  if (this->oldfile().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_oldfile(), target);
  }

  // bytes newfile = 3;
  if (this->newfile().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_newfile(), target);
  }

  // int32 attr = 4;
  if (this->attr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_attr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.RenameFileReq)
  return target;
}

size_t RenameFileReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.RenameFileReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes oldfile = 2;
  if (this->oldfile().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_oldfile());
  }

  // bytes newfile = 3;
  if (this->newfile().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_newfile());
  }

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_);
  }

  // int32 attr = 4;
  if (this->attr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attr());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RenameFileReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.RenameFileReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RenameFileReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RenameFileReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.RenameFileReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.RenameFileReq)
    MergeFrom(*source);
  }
}

void RenameFileReq::MergeFrom(const RenameFileReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.RenameFileReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.oldfile().size() > 0) {
    _internal_set_oldfile(from._internal_oldfile());
  }
  if (from.newfile().size() > 0) {
    _internal_set_newfile(from._internal_newfile());
  }
  if (from.has_call()) {
    _internal_mutable_call()->::InforGuard_::netCallData::MergeFrom(from._internal_call());
  }
  if (from.attr() != 0) {
    _internal_set_attr(from._internal_attr());
  }
}

void RenameFileReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.RenameFileReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenameFileReq::CopyFrom(const RenameFileReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.RenameFileReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameFileReq::IsInitialized() const {
  return true;
}

void RenameFileReq::InternalSwap(RenameFileReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  oldfile_.Swap(&other->oldfile_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  newfile_.Swap(&other->newfile_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RenameFileReq, attr_)
      + sizeof(RenameFileReq::attr_)
      - PROTOBUF_FIELD_OFFSET(RenameFileReq, call_)>(
          reinterpret_cast<char*>(&call_),
          reinterpret_cast<char*>(&other->call_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RenameFileReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RenameFileRes::InitAsDefaultInstance() {
  ::InforGuard_::_RenameFileRes_default_instance_._instance.get_mutable()->call_ = const_cast< ::InforGuard_::netCallData*>(
      ::InforGuard_::netCallData::internal_default_instance());
  ::InforGuard_::_RenameFileRes_default_instance_._instance.get_mutable()->ex_ = const_cast< ::InforGuard_::ExceptionError*>(
      ::InforGuard_::ExceptionError::internal_default_instance());
}
class RenameFileRes::_Internal {
 public:
  static const ::InforGuard_::netCallData& call(const RenameFileRes* msg);
  static const ::InforGuard_::ExceptionError& ex(const RenameFileRes* msg);
};

const ::InforGuard_::netCallData&
RenameFileRes::_Internal::call(const RenameFileRes* msg) {
  return *msg->call_;
}
const ::InforGuard_::ExceptionError&
RenameFileRes::_Internal::ex(const RenameFileRes* msg) {
  return *msg->ex_;
}
void RenameFileRes::clear_call() {
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
}
void RenameFileRes::clear_ex() {
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
}
RenameFileRes::RenameFileRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.RenameFileRes)
}
RenameFileRes::RenameFileRes(const RenameFileRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_call()) {
    call_ = new ::InforGuard_::netCallData(*from.call_);
  } else {
    call_ = nullptr;
  }
  if (from._internal_has_ex()) {
    ex_ = new ::InforGuard_::ExceptionError(*from.ex_);
  } else {
    ex_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:InforGuard_.RenameFileRes)
}

void RenameFileRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RenameFileRes_FileTran_2eproto.base);
  ::memset(&call_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&call_)) + sizeof(ret_));
}

RenameFileRes::~RenameFileRes() {
  // @@protoc_insertion_point(destructor:InforGuard_.RenameFileRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RenameFileRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete call_;
  if (this != internal_default_instance()) delete ex_;
}

void RenameFileRes::ArenaDtor(void* object) {
  RenameFileRes* _this = reinterpret_cast< RenameFileRes* >(object);
  (void)_this;
}
void RenameFileRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RenameFileRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RenameFileRes& RenameFileRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RenameFileRes_FileTran_2eproto.base);
  return *internal_default_instance();
}


void RenameFileRes::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.RenameFileRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
  ret_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RenameFileRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.netCallData call = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .InforGuard_.ExceptionError ex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RenameFileRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.RenameFileRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call(this), target, stream);
  }

  // .InforGuard_.ExceptionError ex = 2;
  if (this->has_ex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ex(this), target, stream);
  }

  // int32 ret = 3;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.RenameFileRes)
  return target;
}

size_t RenameFileRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.RenameFileRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_);
  }

  // .InforGuard_.ExceptionError ex = 2;
  if (this->has_ex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ex_);
  }

  // int32 ret = 3;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RenameFileRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.RenameFileRes)
  GOOGLE_DCHECK_NE(&from, this);
  const RenameFileRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RenameFileRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.RenameFileRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.RenameFileRes)
    MergeFrom(*source);
  }
}

void RenameFileRes::MergeFrom(const RenameFileRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.RenameFileRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_call()) {
    _internal_mutable_call()->::InforGuard_::netCallData::MergeFrom(from._internal_call());
  }
  if (from.has_ex()) {
    _internal_mutable_ex()->::InforGuard_::ExceptionError::MergeFrom(from._internal_ex());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void RenameFileRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.RenameFileRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenameFileRes::CopyFrom(const RenameFileRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.RenameFileRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameFileRes::IsInitialized() const {
  return true;
}

void RenameFileRes::InternalSwap(RenameFileRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RenameFileRes, ret_)
      + sizeof(RenameFileRes::ret_)
      - PROTOBUF_FIELD_OFFSET(RenameFileRes, call_)>(
          reinterpret_cast<char*>(&call_),
          reinterpret_cast<char*>(&other->call_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RenameFileRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryBasePathReq::InitAsDefaultInstance() {
}
class QueryBasePathReq::_Internal {
 public:
};

QueryBasePathReq::QueryBasePathReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.QueryBasePathReq)
}
QueryBasePathReq::QueryBasePathReq(const QueryBasePathReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  req_ = from.req_;
  // @@protoc_insertion_point(copy_constructor:InforGuard_.QueryBasePathReq)
}

void QueryBasePathReq::SharedCtor() {
  req_ = false;
}

QueryBasePathReq::~QueryBasePathReq() {
  // @@protoc_insertion_point(destructor:InforGuard_.QueryBasePathReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueryBasePathReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void QueryBasePathReq::ArenaDtor(void* object) {
  QueryBasePathReq* _this = reinterpret_cast< QueryBasePathReq* >(object);
  (void)_this;
}
void QueryBasePathReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryBasePathReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryBasePathReq& QueryBasePathReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryBasePathReq_FileTran_2eproto.base);
  return *internal_default_instance();
}


void QueryBasePathReq::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.QueryBasePathReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  req_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryBasePathReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          req_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryBasePathReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.QueryBasePathReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool req = 1;
  if (this->req() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_req(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.QueryBasePathReq)
  return target;
}

size_t QueryBasePathReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.QueryBasePathReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool req = 1;
  if (this->req() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryBasePathReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.QueryBasePathReq)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryBasePathReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryBasePathReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.QueryBasePathReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.QueryBasePathReq)
    MergeFrom(*source);
  }
}

void QueryBasePathReq::MergeFrom(const QueryBasePathReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.QueryBasePathReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.req() != 0) {
    _internal_set_req(from._internal_req());
  }
}

void QueryBasePathReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.QueryBasePathReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryBasePathReq::CopyFrom(const QueryBasePathReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.QueryBasePathReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryBasePathReq::IsInitialized() const {
  return true;
}

void QueryBasePathReq::InternalSwap(QueryBasePathReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(req_, other->req_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryBasePathReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryBasePathRes::InitAsDefaultInstance() {
  ::InforGuard_::_QueryBasePathRes_default_instance_._instance.get_mutable()->ex_ = const_cast< ::InforGuard_::ExceptionError*>(
      ::InforGuard_::ExceptionError::internal_default_instance());
}
class QueryBasePathRes::_Internal {
 public:
  static const ::InforGuard_::ExceptionError& ex(const QueryBasePathRes* msg);
};

const ::InforGuard_::ExceptionError&
QueryBasePathRes::_Internal::ex(const QueryBasePathRes* msg) {
  return *msg->ex_;
}
void QueryBasePathRes::clear_ex() {
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
}
QueryBasePathRes::QueryBasePathRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.QueryBasePathRes)
}
QueryBasePathRes::QueryBasePathRes(const QueryBasePathRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  basepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_basepath().empty()) {
    basepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_basepath(),
      GetArena());
  }
  if (from._internal_has_ex()) {
    ex_ = new ::InforGuard_::ExceptionError(*from.ex_);
  } else {
    ex_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:InforGuard_.QueryBasePathRes)
}

void QueryBasePathRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryBasePathRes_FileTran_2eproto.base);
  basepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&ex_)) + sizeof(ret_));
}

QueryBasePathRes::~QueryBasePathRes() {
  // @@protoc_insertion_point(destructor:InforGuard_.QueryBasePathRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueryBasePathRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  basepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ex_;
}

void QueryBasePathRes::ArenaDtor(void* object) {
  QueryBasePathRes* _this = reinterpret_cast< QueryBasePathRes* >(object);
  (void)_this;
}
void QueryBasePathRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryBasePathRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryBasePathRes& QueryBasePathRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryBasePathRes_FileTran_2eproto.base);
  return *internal_default_instance();
}


void QueryBasePathRes::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.QueryBasePathRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  basepath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
  ret_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryBasePathRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.ExceptionError ex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes basepath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_basepath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryBasePathRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.QueryBasePathRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.ExceptionError ex = 1;
  if (this->has_ex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ex(this), target, stream);
  }

  // bytes basepath = 2;
  if (this->basepath().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_basepath(), target);
  }

  // int32 ret = 3;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.QueryBasePathRes)
  return target;
}

size_t QueryBasePathRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.QueryBasePathRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes basepath = 2;
  if (this->basepath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_basepath());
  }

  // .InforGuard_.ExceptionError ex = 1;
  if (this->has_ex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ex_);
  }

  // int32 ret = 3;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryBasePathRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.QueryBasePathRes)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryBasePathRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryBasePathRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.QueryBasePathRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.QueryBasePathRes)
    MergeFrom(*source);
  }
}

void QueryBasePathRes::MergeFrom(const QueryBasePathRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.QueryBasePathRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.basepath().size() > 0) {
    _internal_set_basepath(from._internal_basepath());
  }
  if (from.has_ex()) {
    _internal_mutable_ex()->::InforGuard_::ExceptionError::MergeFrom(from._internal_ex());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void QueryBasePathRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.QueryBasePathRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryBasePathRes::CopyFrom(const QueryBasePathRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.QueryBasePathRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryBasePathRes::IsInitialized() const {
  return true;
}

void QueryBasePathRes::InternalSwap(QueryBasePathRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  basepath_.Swap(&other->basepath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryBasePathRes, ret_)
      + sizeof(QueryBasePathRes::ret_)
      - PROTOBUF_FIELD_OFFSET(QueryBasePathRes, ex_)>(
          reinterpret_cast<char*>(&ex_),
          reinterpret_cast<char*>(&other->ex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryBasePathRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void isFileExistReq::InitAsDefaultInstance() {
}
class isFileExistReq::_Internal {
 public:
};

isFileExistReq::isFileExistReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.isFileExistReq)
}
isFileExistReq::isFileExistReq(const isFileExistReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filepath().empty()) {
    filepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_filepath(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:InforGuard_.isFileExistReq)
}

void isFileExistReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_isFileExistReq_FileTran_2eproto.base);
  filepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

isFileExistReq::~isFileExistReq() {
  // @@protoc_insertion_point(destructor:InforGuard_.isFileExistReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void isFileExistReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void isFileExistReq::ArenaDtor(void* object) {
  isFileExistReq* _this = reinterpret_cast< isFileExistReq* >(object);
  (void)_this;
}
void isFileExistReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void isFileExistReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const isFileExistReq& isFileExistReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_isFileExistReq_FileTran_2eproto.base);
  return *internal_default_instance();
}


void isFileExistReq::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.isFileExistReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filepath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* isFileExistReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes filePath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filepath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* isFileExistReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.isFileExistReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes filePath = 1;
  if (this->filepath().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_filepath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.isFileExistReq)
  return target;
}

size_t isFileExistReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.isFileExistReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes filePath = 1;
  if (this->filepath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_filepath());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void isFileExistReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.isFileExistReq)
  GOOGLE_DCHECK_NE(&from, this);
  const isFileExistReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<isFileExistReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.isFileExistReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.isFileExistReq)
    MergeFrom(*source);
  }
}

void isFileExistReq::MergeFrom(const isFileExistReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.isFileExistReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filepath().size() > 0) {
    _internal_set_filepath(from._internal_filepath());
  }
}

void isFileExistReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.isFileExistReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void isFileExistReq::CopyFrom(const isFileExistReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.isFileExistReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool isFileExistReq::IsInitialized() const {
  return true;
}

void isFileExistReq::InternalSwap(isFileExistReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filepath_.Swap(&other->filepath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata isFileExistReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void isFileExistRes::InitAsDefaultInstance() {
  ::InforGuard_::_isFileExistRes_default_instance_._instance.get_mutable()->ex_ = const_cast< ::InforGuard_::ExceptionError*>(
      ::InforGuard_::ExceptionError::internal_default_instance());
}
class isFileExistRes::_Internal {
 public:
  static const ::InforGuard_::ExceptionError& ex(const isFileExistRes* msg);
};

const ::InforGuard_::ExceptionError&
isFileExistRes::_Internal::ex(const isFileExistRes* msg) {
  return *msg->ex_;
}
void isFileExistRes::clear_ex() {
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
}
isFileExistRes::isFileExistRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.isFileExistRes)
}
isFileExistRes::isFileExistRes(const isFileExistRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ex()) {
    ex_ = new ::InforGuard_::ExceptionError(*from.ex_);
  } else {
    ex_ = nullptr;
  }
  ::memcpy(&filesize_, &from.filesize_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&filesize_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:InforGuard_.isFileExistRes)
}

void isFileExistRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_isFileExistRes_FileTran_2eproto.base);
  ::memset(&ex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&ex_)) + sizeof(ret_));
}

isFileExistRes::~isFileExistRes() {
  // @@protoc_insertion_point(destructor:InforGuard_.isFileExistRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void isFileExistRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ex_;
}

void isFileExistRes::ArenaDtor(void* object) {
  isFileExistRes* _this = reinterpret_cast< isFileExistRes* >(object);
  (void)_this;
}
void isFileExistRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void isFileExistRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const isFileExistRes& isFileExistRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_isFileExistRes_FileTran_2eproto.base);
  return *internal_default_instance();
}


void isFileExistRes::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.isFileExistRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
  ::memset(&filesize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&filesize_)) + sizeof(ret_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* isFileExistRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.ExceptionError ex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fileSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          filesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* isFileExistRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.isFileExistRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.ExceptionError ex = 1;
  if (this->has_ex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ex(this), target, stream);
  }

  // int32 fileSize = 2;
  if (this->filesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_filesize(), target);
  }

  // int32 ret = 3;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.isFileExistRes)
  return target;
}

size_t isFileExistRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.isFileExistRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .InforGuard_.ExceptionError ex = 1;
  if (this->has_ex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ex_);
  }

  // int32 fileSize = 2;
  if (this->filesize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_filesize());
  }

  // int32 ret = 3;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void isFileExistRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.isFileExistRes)
  GOOGLE_DCHECK_NE(&from, this);
  const isFileExistRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<isFileExistRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.isFileExistRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.isFileExistRes)
    MergeFrom(*source);
  }
}

void isFileExistRes::MergeFrom(const isFileExistRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.isFileExistRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ex()) {
    _internal_mutable_ex()->::InforGuard_::ExceptionError::MergeFrom(from._internal_ex());
  }
  if (from.filesize() != 0) {
    _internal_set_filesize(from._internal_filesize());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void isFileExistRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.isFileExistRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void isFileExistRes::CopyFrom(const isFileExistRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.isFileExistRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool isFileExistRes::IsInitialized() const {
  return true;
}

void isFileExistRes::InternalSwap(isFileExistRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(isFileExistRes, ret_)
      + sizeof(isFileExistRes::ret_)
      - PROTOBUF_FIELD_OFFSET(isFileExistRes, ex_)>(
          reinterpret_cast<char*>(&ex_),
          reinterpret_cast<char*>(&other->ex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata isFileExistRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void setFileTimeReq::InitAsDefaultInstance() {
  ::InforGuard_::_setFileTimeReq_default_instance_._instance.get_mutable()->call_ = const_cast< ::InforGuard_::netCallData*>(
      ::InforGuard_::netCallData::internal_default_instance());
}
class setFileTimeReq::_Internal {
 public:
  static const ::InforGuard_::netCallData& call(const setFileTimeReq* msg);
};

const ::InforGuard_::netCallData&
setFileTimeReq::_Internal::call(const setFileTimeReq* msg) {
  return *msg->call_;
}
void setFileTimeReq::clear_call() {
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
}
setFileTimeReq::setFileTimeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.setFileTimeReq)
}
setFileTimeReq::setFileTimeReq(const setFileTimeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_filename(),
      GetArena());
  }
  if (from._internal_has_call()) {
    call_ = new ::InforGuard_::netCallData(*from.call_);
  } else {
    call_ = nullptr;
  }
  mtime_ = from.mtime_;
  // @@protoc_insertion_point(copy_constructor:InforGuard_.setFileTimeReq)
}

void setFileTimeReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_setFileTimeReq_FileTran_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&call_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mtime_) -
      reinterpret_cast<char*>(&call_)) + sizeof(mtime_));
}

setFileTimeReq::~setFileTimeReq() {
  // @@protoc_insertion_point(destructor:InforGuard_.setFileTimeReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void setFileTimeReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete call_;
}

void setFileTimeReq::ArenaDtor(void* object) {
  setFileTimeReq* _this = reinterpret_cast< setFileTimeReq* >(object);
  (void)_this;
}
void setFileTimeReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void setFileTimeReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const setFileTimeReq& setFileTimeReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_setFileTimeReq_FileTran_2eproto.base);
  return *internal_default_instance();
}


void setFileTimeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.setFileTimeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
  mtime_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* setFileTimeReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.netCallData call = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes filename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mtime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          mtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* setFileTimeReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.setFileTimeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call(this), target, stream);
  }

  // bytes filename = 2;
  if (this->filename().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_filename(), target);
  }

  // int32 mtime = 3;
  if (this->mtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.setFileTimeReq)
  return target;
}

size_t setFileTimeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.setFileTimeReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes filename = 2;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_filename());
  }

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_);
  }

  // int32 mtime = 3;
  if (this->mtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mtime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void setFileTimeReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.setFileTimeReq)
  GOOGLE_DCHECK_NE(&from, this);
  const setFileTimeReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<setFileTimeReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.setFileTimeReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.setFileTimeReq)
    MergeFrom(*source);
  }
}

void setFileTimeReq::MergeFrom(const setFileTimeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.setFileTimeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {
    _internal_set_filename(from._internal_filename());
  }
  if (from.has_call()) {
    _internal_mutable_call()->::InforGuard_::netCallData::MergeFrom(from._internal_call());
  }
  if (from.mtime() != 0) {
    _internal_set_mtime(from._internal_mtime());
  }
}

void setFileTimeReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.setFileTimeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void setFileTimeReq::CopyFrom(const setFileTimeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.setFileTimeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool setFileTimeReq::IsInitialized() const {
  return true;
}

void setFileTimeReq::InternalSwap(setFileTimeReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(setFileTimeReq, mtime_)
      + sizeof(setFileTimeReq::mtime_)
      - PROTOBUF_FIELD_OFFSET(setFileTimeReq, call_)>(
          reinterpret_cast<char*>(&call_),
          reinterpret_cast<char*>(&other->call_));
}

::PROTOBUF_NAMESPACE_ID::Metadata setFileTimeReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void setFileTimeRes::InitAsDefaultInstance() {
  ::InforGuard_::_setFileTimeRes_default_instance_._instance.get_mutable()->call_ = const_cast< ::InforGuard_::netCallData*>(
      ::InforGuard_::netCallData::internal_default_instance());
  ::InforGuard_::_setFileTimeRes_default_instance_._instance.get_mutable()->ex_ = const_cast< ::InforGuard_::ExceptionError*>(
      ::InforGuard_::ExceptionError::internal_default_instance());
}
class setFileTimeRes::_Internal {
 public:
  static const ::InforGuard_::netCallData& call(const setFileTimeRes* msg);
  static const ::InforGuard_::ExceptionError& ex(const setFileTimeRes* msg);
};

const ::InforGuard_::netCallData&
setFileTimeRes::_Internal::call(const setFileTimeRes* msg) {
  return *msg->call_;
}
const ::InforGuard_::ExceptionError&
setFileTimeRes::_Internal::ex(const setFileTimeRes* msg) {
  return *msg->ex_;
}
void setFileTimeRes::clear_call() {
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
}
void setFileTimeRes::clear_ex() {
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
}
setFileTimeRes::setFileTimeRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.setFileTimeRes)
}
setFileTimeRes::setFileTimeRes(const setFileTimeRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_call()) {
    call_ = new ::InforGuard_::netCallData(*from.call_);
  } else {
    call_ = nullptr;
  }
  if (from._internal_has_ex()) {
    ex_ = new ::InforGuard_::ExceptionError(*from.ex_);
  } else {
    ex_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:InforGuard_.setFileTimeRes)
}

void setFileTimeRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_setFileTimeRes_FileTran_2eproto.base);
  ::memset(&call_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&call_)) + sizeof(ret_));
}

setFileTimeRes::~setFileTimeRes() {
  // @@protoc_insertion_point(destructor:InforGuard_.setFileTimeRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void setFileTimeRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete call_;
  if (this != internal_default_instance()) delete ex_;
}

void setFileTimeRes::ArenaDtor(void* object) {
  setFileTimeRes* _this = reinterpret_cast< setFileTimeRes* >(object);
  (void)_this;
}
void setFileTimeRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void setFileTimeRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const setFileTimeRes& setFileTimeRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_setFileTimeRes_FileTran_2eproto.base);
  return *internal_default_instance();
}


void setFileTimeRes::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.setFileTimeRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
  ret_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* setFileTimeRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.netCallData call = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .InforGuard_.ExceptionError ex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* setFileTimeRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.setFileTimeRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call(this), target, stream);
  }

  // .InforGuard_.ExceptionError ex = 2;
  if (this->has_ex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ex(this), target, stream);
  }

  // int32 ret = 3;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.setFileTimeRes)
  return target;
}

size_t setFileTimeRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.setFileTimeRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_);
  }

  // .InforGuard_.ExceptionError ex = 2;
  if (this->has_ex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ex_);
  }

  // int32 ret = 3;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void setFileTimeRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.setFileTimeRes)
  GOOGLE_DCHECK_NE(&from, this);
  const setFileTimeRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<setFileTimeRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.setFileTimeRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.setFileTimeRes)
    MergeFrom(*source);
  }
}

void setFileTimeRes::MergeFrom(const setFileTimeRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.setFileTimeRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_call()) {
    _internal_mutable_call()->::InforGuard_::netCallData::MergeFrom(from._internal_call());
  }
  if (from.has_ex()) {
    _internal_mutable_ex()->::InforGuard_::ExceptionError::MergeFrom(from._internal_ex());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void setFileTimeRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.setFileTimeRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void setFileTimeRes::CopyFrom(const setFileTimeRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.setFileTimeRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool setFileTimeRes::IsInitialized() const {
  return true;
}

void setFileTimeRes::InternalSwap(setFileTimeRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(setFileTimeRes, ret_)
      + sizeof(setFileTimeRes::ret_)
      - PROTOBUF_FIELD_OFFSET(setFileTimeRes, call_)>(
          reinterpret_cast<char*>(&call_),
          reinterpret_cast<char*>(&other->call_));
}

::PROTOBUF_NAMESPACE_ID::Metadata setFileTimeRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void getFileTimeReq::InitAsDefaultInstance() {
  ::InforGuard_::_getFileTimeReq_default_instance_._instance.get_mutable()->call_ = const_cast< ::InforGuard_::netCallData*>(
      ::InforGuard_::netCallData::internal_default_instance());
}
class getFileTimeReq::_Internal {
 public:
  static const ::InforGuard_::netCallData& call(const getFileTimeReq* msg);
};

const ::InforGuard_::netCallData&
getFileTimeReq::_Internal::call(const getFileTimeReq* msg) {
  return *msg->call_;
}
void getFileTimeReq::clear_call() {
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
}
getFileTimeReq::getFileTimeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.getFileTimeReq)
}
getFileTimeReq::getFileTimeReq(const getFileTimeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_filename(),
      GetArena());
  }
  if (from._internal_has_call()) {
    call_ = new ::InforGuard_::netCallData(*from.call_);
  } else {
    call_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:InforGuard_.getFileTimeReq)
}

void getFileTimeReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_getFileTimeReq_FileTran_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  call_ = nullptr;
}

getFileTimeReq::~getFileTimeReq() {
  // @@protoc_insertion_point(destructor:InforGuard_.getFileTimeReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void getFileTimeReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete call_;
}

void getFileTimeReq::ArenaDtor(void* object) {
  getFileTimeReq* _this = reinterpret_cast< getFileTimeReq* >(object);
  (void)_this;
}
void getFileTimeReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void getFileTimeReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const getFileTimeReq& getFileTimeReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_getFileTimeReq_FileTran_2eproto.base);
  return *internal_default_instance();
}


void getFileTimeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.getFileTimeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getFileTimeReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.netCallData call = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes filename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* getFileTimeReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.getFileTimeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call(this), target, stream);
  }

  // bytes filename = 2;
  if (this->filename().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.getFileTimeReq)
  return target;
}

size_t getFileTimeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.getFileTimeReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes filename = 2;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_filename());
  }

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void getFileTimeReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.getFileTimeReq)
  GOOGLE_DCHECK_NE(&from, this);
  const getFileTimeReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<getFileTimeReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.getFileTimeReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.getFileTimeReq)
    MergeFrom(*source);
  }
}

void getFileTimeReq::MergeFrom(const getFileTimeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.getFileTimeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {
    _internal_set_filename(from._internal_filename());
  }
  if (from.has_call()) {
    _internal_mutable_call()->::InforGuard_::netCallData::MergeFrom(from._internal_call());
  }
}

void getFileTimeReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.getFileTimeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getFileTimeReq::CopyFrom(const getFileTimeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.getFileTimeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getFileTimeReq::IsInitialized() const {
  return true;
}

void getFileTimeReq::InternalSwap(getFileTimeReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(call_, other->call_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getFileTimeReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void getFileTimeRes::InitAsDefaultInstance() {
  ::InforGuard_::_getFileTimeRes_default_instance_._instance.get_mutable()->call_ = const_cast< ::InforGuard_::netCallData*>(
      ::InforGuard_::netCallData::internal_default_instance());
  ::InforGuard_::_getFileTimeRes_default_instance_._instance.get_mutable()->ex_ = const_cast< ::InforGuard_::ExceptionError*>(
      ::InforGuard_::ExceptionError::internal_default_instance());
}
class getFileTimeRes::_Internal {
 public:
  static const ::InforGuard_::netCallData& call(const getFileTimeRes* msg);
  static const ::InforGuard_::ExceptionError& ex(const getFileTimeRes* msg);
};

const ::InforGuard_::netCallData&
getFileTimeRes::_Internal::call(const getFileTimeRes* msg) {
  return *msg->call_;
}
const ::InforGuard_::ExceptionError&
getFileTimeRes::_Internal::ex(const getFileTimeRes* msg) {
  return *msg->ex_;
}
void getFileTimeRes::clear_call() {
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
}
void getFileTimeRes::clear_ex() {
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
}
getFileTimeRes::getFileTimeRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.getFileTimeRes)
}
getFileTimeRes::getFileTimeRes(const getFileTimeRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_call()) {
    call_ = new ::InforGuard_::netCallData(*from.call_);
  } else {
    call_ = nullptr;
  }
  if (from._internal_has_ex()) {
    ex_ = new ::InforGuard_::ExceptionError(*from.ex_);
  } else {
    ex_ = nullptr;
  }
  ::memcpy(&mtime_, &from.mtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&mtime_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:InforGuard_.getFileTimeRes)
}

void getFileTimeRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_getFileTimeRes_FileTran_2eproto.base);
  ::memset(&call_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&call_)) + sizeof(ret_));
}

getFileTimeRes::~getFileTimeRes() {
  // @@protoc_insertion_point(destructor:InforGuard_.getFileTimeRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void getFileTimeRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete call_;
  if (this != internal_default_instance()) delete ex_;
}

void getFileTimeRes::ArenaDtor(void* object) {
  getFileTimeRes* _this = reinterpret_cast< getFileTimeRes* >(object);
  (void)_this;
}
void getFileTimeRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void getFileTimeRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const getFileTimeRes& getFileTimeRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_getFileTimeRes_FileTran_2eproto.base);
  return *internal_default_instance();
}


void getFileTimeRes::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.getFileTimeRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
  ::memset(&mtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&mtime_)) + sizeof(ret_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getFileTimeRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.netCallData call = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .InforGuard_.ExceptionError ex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mtime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          mtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ret = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* getFileTimeRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.getFileTimeRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call(this), target, stream);
  }

  // .InforGuard_.ExceptionError ex = 2;
  if (this->has_ex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ex(this), target, stream);
  }

  // int32 mtime = 3;
  if (this->mtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mtime(), target);
  }

  // int32 ret = 4;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.getFileTimeRes)
  return target;
}

size_t getFileTimeRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.getFileTimeRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_);
  }

  // .InforGuard_.ExceptionError ex = 2;
  if (this->has_ex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ex_);
  }

  // int32 mtime = 3;
  if (this->mtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mtime());
  }

  // int32 ret = 4;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void getFileTimeRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.getFileTimeRes)
  GOOGLE_DCHECK_NE(&from, this);
  const getFileTimeRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<getFileTimeRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.getFileTimeRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.getFileTimeRes)
    MergeFrom(*source);
  }
}

void getFileTimeRes::MergeFrom(const getFileTimeRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.getFileTimeRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_call()) {
    _internal_mutable_call()->::InforGuard_::netCallData::MergeFrom(from._internal_call());
  }
  if (from.has_ex()) {
    _internal_mutable_ex()->::InforGuard_::ExceptionError::MergeFrom(from._internal_ex());
  }
  if (from.mtime() != 0) {
    _internal_set_mtime(from._internal_mtime());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void getFileTimeRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.getFileTimeRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getFileTimeRes::CopyFrom(const getFileTimeRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.getFileTimeRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getFileTimeRes::IsInitialized() const {
  return true;
}

void getFileTimeRes::InternalSwap(getFileTimeRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(getFileTimeRes, ret_)
      + sizeof(getFileTimeRes::ret_)
      - PROTOBUF_FIELD_OFFSET(getFileTimeRes, call_)>(
          reinterpret_cast<char*>(&call_),
          reinterpret_cast<char*>(&other->call_));
}

::PROTOBUF_NAMESPACE_ID::Metadata getFileTimeRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void sendFileListReq::InitAsDefaultInstance() {
}
class sendFileListReq::_Internal {
 public:
};

void sendFileListReq::clear_list() {
  list_.Clear();
}
sendFileListReq::sendFileListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.sendFileListReq)
}
sendFileListReq::sendFileListReq(const sendFileListReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      list_(from.list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:InforGuard_.sendFileListReq)
}

void sendFileListReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_sendFileListReq_FileTran_2eproto.base);
}

sendFileListReq::~sendFileListReq() {
  // @@protoc_insertion_point(destructor:InforGuard_.sendFileListReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void sendFileListReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void sendFileListReq::ArenaDtor(void* object) {
  sendFileListReq* _this = reinterpret_cast< sendFileListReq* >(object);
  (void)_this;
}
void sendFileListReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void sendFileListReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const sendFileListReq& sendFileListReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_sendFileListReq_FileTran_2eproto.base);
  return *internal_default_instance();
}


void sendFileListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.sendFileListReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sendFileListReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .InforGuard_.RemoteDirectory list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* sendFileListReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.sendFileListReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .InforGuard_.RemoteDirectory list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.sendFileListReq)
  return target;
}

size_t sendFileListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.sendFileListReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .InforGuard_.RemoteDirectory list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sendFileListReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.sendFileListReq)
  GOOGLE_DCHECK_NE(&from, this);
  const sendFileListReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<sendFileListReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.sendFileListReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.sendFileListReq)
    MergeFrom(*source);
  }
}

void sendFileListReq::MergeFrom(const sendFileListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.sendFileListReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void sendFileListReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.sendFileListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sendFileListReq::CopyFrom(const sendFileListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.sendFileListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sendFileListReq::IsInitialized() const {
  return true;
}

void sendFileListReq::InternalSwap(sendFileListReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata sendFileListReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void sendFileListRes::InitAsDefaultInstance() {
  ::InforGuard_::_sendFileListRes_default_instance_._instance.get_mutable()->ex_ = const_cast< ::InforGuard_::ExceptionError*>(
      ::InforGuard_::ExceptionError::internal_default_instance());
}
class sendFileListRes::_Internal {
 public:
  static const ::InforGuard_::ExceptionError& ex(const sendFileListRes* msg);
};

const ::InforGuard_::ExceptionError&
sendFileListRes::_Internal::ex(const sendFileListRes* msg) {
  return *msg->ex_;
}
void sendFileListRes::clear_ex() {
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
}
sendFileListRes::sendFileListRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.sendFileListRes)
}
sendFileListRes::sendFileListRes(const sendFileListRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ex()) {
    ex_ = new ::InforGuard_::ExceptionError(*from.ex_);
  } else {
    ex_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:InforGuard_.sendFileListRes)
}

void sendFileListRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_sendFileListRes_FileTran_2eproto.base);
  ::memset(&ex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&ex_)) + sizeof(ret_));
}

sendFileListRes::~sendFileListRes() {
  // @@protoc_insertion_point(destructor:InforGuard_.sendFileListRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void sendFileListRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ex_;
}

void sendFileListRes::ArenaDtor(void* object) {
  sendFileListRes* _this = reinterpret_cast< sendFileListRes* >(object);
  (void)_this;
}
void sendFileListRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void sendFileListRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const sendFileListRes& sendFileListRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_sendFileListRes_FileTran_2eproto.base);
  return *internal_default_instance();
}


void sendFileListRes::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.sendFileListRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
  ret_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sendFileListRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.ExceptionError ex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* sendFileListRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.sendFileListRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.ExceptionError ex = 1;
  if (this->has_ex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ex(this), target, stream);
  }

  // int32 ret = 2;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.sendFileListRes)
  return target;
}

size_t sendFileListRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.sendFileListRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .InforGuard_.ExceptionError ex = 1;
  if (this->has_ex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ex_);
  }

  // int32 ret = 2;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sendFileListRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.sendFileListRes)
  GOOGLE_DCHECK_NE(&from, this);
  const sendFileListRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<sendFileListRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.sendFileListRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.sendFileListRes)
    MergeFrom(*source);
  }
}

void sendFileListRes::MergeFrom(const sendFileListRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.sendFileListRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ex()) {
    _internal_mutable_ex()->::InforGuard_::ExceptionError::MergeFrom(from._internal_ex());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void sendFileListRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.sendFileListRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sendFileListRes::CopyFrom(const sendFileListRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.sendFileListRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sendFileListRes::IsInitialized() const {
  return true;
}

void sendFileListRes::InternalSwap(sendFileListRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(sendFileListRes, ret_)
      + sizeof(sendFileListRes::ret_)
      - PROTOBUF_FIELD_OFFSET(sendFileListRes, ex_)>(
          reinterpret_cast<char*>(&ex_),
          reinterpret_cast<char*>(&other->ex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata sendFileListRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void sendAccessReq::InitAsDefaultInstance() {
}
class sendAccessReq::_Internal {
 public:
};

sendAccessReq::sendAccessReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.sendAccessReq)
}
sendAccessReq::sendAccessReq(const sendAccessReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  req_ = from.req_;
  // @@protoc_insertion_point(copy_constructor:InforGuard_.sendAccessReq)
}

void sendAccessReq::SharedCtor() {
  req_ = false;
}

sendAccessReq::~sendAccessReq() {
  // @@protoc_insertion_point(destructor:InforGuard_.sendAccessReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void sendAccessReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void sendAccessReq::ArenaDtor(void* object) {
  sendAccessReq* _this = reinterpret_cast< sendAccessReq* >(object);
  (void)_this;
}
void sendAccessReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void sendAccessReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const sendAccessReq& sendAccessReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_sendAccessReq_FileTran_2eproto.base);
  return *internal_default_instance();
}


void sendAccessReq::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.sendAccessReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  req_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sendAccessReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          req_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* sendAccessReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.sendAccessReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool req = 1;
  if (this->req() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_req(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.sendAccessReq)
  return target;
}

size_t sendAccessReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.sendAccessReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool req = 1;
  if (this->req() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sendAccessReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.sendAccessReq)
  GOOGLE_DCHECK_NE(&from, this);
  const sendAccessReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<sendAccessReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.sendAccessReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.sendAccessReq)
    MergeFrom(*source);
  }
}

void sendAccessReq::MergeFrom(const sendAccessReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.sendAccessReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.req() != 0) {
    _internal_set_req(from._internal_req());
  }
}

void sendAccessReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.sendAccessReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sendAccessReq::CopyFrom(const sendAccessReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.sendAccessReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sendAccessReq::IsInitialized() const {
  return true;
}

void sendAccessReq::InternalSwap(sendAccessReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(req_, other->req_);
}

::PROTOBUF_NAMESPACE_ID::Metadata sendAccessReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void sendAccessRes::InitAsDefaultInstance() {
  ::InforGuard_::_sendAccessRes_default_instance_._instance.get_mutable()->ex_ = const_cast< ::InforGuard_::ExceptionError*>(
      ::InforGuard_::ExceptionError::internal_default_instance());
}
class sendAccessRes::_Internal {
 public:
  static const ::InforGuard_::ExceptionError& ex(const sendAccessRes* msg);
};

const ::InforGuard_::ExceptionError&
sendAccessRes::_Internal::ex(const sendAccessRes* msg) {
  return *msg->ex_;
}
void sendAccessRes::clear_ex() {
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
}
sendAccessRes::sendAccessRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.sendAccessRes)
}
sendAccessRes::sendAccessRes(const sendAccessRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ex()) {
    ex_ = new ::InforGuard_::ExceptionError(*from.ex_);
  } else {
    ex_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:InforGuard_.sendAccessRes)
}

void sendAccessRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_sendAccessRes_FileTran_2eproto.base);
  ::memset(&ex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&ex_)) + sizeof(ret_));
}

sendAccessRes::~sendAccessRes() {
  // @@protoc_insertion_point(destructor:InforGuard_.sendAccessRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void sendAccessRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ex_;
}

void sendAccessRes::ArenaDtor(void* object) {
  sendAccessRes* _this = reinterpret_cast< sendAccessRes* >(object);
  (void)_this;
}
void sendAccessRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void sendAccessRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const sendAccessRes& sendAccessRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_sendAccessRes_FileTran_2eproto.base);
  return *internal_default_instance();
}


void sendAccessRes::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.sendAccessRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
  ret_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sendAccessRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.ExceptionError ex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* sendAccessRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.sendAccessRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.ExceptionError ex = 1;
  if (this->has_ex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ex(this), target, stream);
  }

  // int32 ret = 2;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.sendAccessRes)
  return target;
}

size_t sendAccessRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.sendAccessRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .InforGuard_.ExceptionError ex = 1;
  if (this->has_ex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ex_);
  }

  // int32 ret = 2;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sendAccessRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.sendAccessRes)
  GOOGLE_DCHECK_NE(&from, this);
  const sendAccessRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<sendAccessRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.sendAccessRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.sendAccessRes)
    MergeFrom(*source);
  }
}

void sendAccessRes::MergeFrom(const sendAccessRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.sendAccessRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ex()) {
    _internal_mutable_ex()->::InforGuard_::ExceptionError::MergeFrom(from._internal_ex());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void sendAccessRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.sendAccessRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sendAccessRes::CopyFrom(const sendAccessRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.sendAccessRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sendAccessRes::IsInitialized() const {
  return true;
}

void sendAccessRes::InternalSwap(sendAccessRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(sendAccessRes, ret_)
      + sizeof(sendAccessRes::ret_)
      - PROTOBUF_FIELD_OFFSET(sendAccessRes, ex_)>(
          reinterpret_cast<char*>(&ex_),
          reinterpret_cast<char*>(&other->ex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata sendAccessRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void checkFileListReq::InitAsDefaultInstance() {
}
class checkFileListReq::_Internal {
 public:
};

void checkFileListReq::clear_inlist() {
  inlist_.Clear();
}
checkFileListReq::checkFileListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  inlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.checkFileListReq)
}
checkFileListReq::checkFileListReq(const checkFileListReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      inlist_(from.inlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:InforGuard_.checkFileListReq)
}

void checkFileListReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_checkFileListReq_FileTran_2eproto.base);
}

checkFileListReq::~checkFileListReq() {
  // @@protoc_insertion_point(destructor:InforGuard_.checkFileListReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void checkFileListReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void checkFileListReq::ArenaDtor(void* object) {
  checkFileListReq* _this = reinterpret_cast< checkFileListReq* >(object);
  (void)_this;
}
void checkFileListReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void checkFileListReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const checkFileListReq& checkFileListReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_checkFileListReq_FileTran_2eproto.base);
  return *internal_default_instance();
}


void checkFileListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.checkFileListReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* checkFileListReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .InforGuard_.NetFileListNode inList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* checkFileListReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.checkFileListReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .InforGuard_.NetFileListNode inList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_inlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.checkFileListReq)
  return target;
}

size_t checkFileListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.checkFileListReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .InforGuard_.NetFileListNode inList = 1;
  total_size += 1UL * this->_internal_inlist_size();
  for (const auto& msg : this->inlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void checkFileListReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.checkFileListReq)
  GOOGLE_DCHECK_NE(&from, this);
  const checkFileListReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<checkFileListReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.checkFileListReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.checkFileListReq)
    MergeFrom(*source);
  }
}

void checkFileListReq::MergeFrom(const checkFileListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.checkFileListReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inlist_.MergeFrom(from.inlist_);
}

void checkFileListReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.checkFileListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void checkFileListReq::CopyFrom(const checkFileListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.checkFileListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool checkFileListReq::IsInitialized() const {
  return true;
}

void checkFileListReq::InternalSwap(checkFileListReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  inlist_.InternalSwap(&other->inlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata checkFileListReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void checkFileListRes::InitAsDefaultInstance() {
  ::InforGuard_::_checkFileListRes_default_instance_._instance.get_mutable()->ex_ = const_cast< ::InforGuard_::ExceptionError*>(
      ::InforGuard_::ExceptionError::internal_default_instance());
}
class checkFileListRes::_Internal {
 public:
  static const ::InforGuard_::ExceptionError& ex(const checkFileListRes* msg);
};

const ::InforGuard_::ExceptionError&
checkFileListRes::_Internal::ex(const checkFileListRes* msg) {
  return *msg->ex_;
}
void checkFileListRes::clear_ex() {
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
}
checkFileListRes::checkFileListRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  notexistlist_(arena),
  difflist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.checkFileListRes)
}
checkFileListRes::checkFileListRes(const checkFileListRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      notexistlist_(from.notexistlist_),
      difflist_(from.difflist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ex()) {
    ex_ = new ::InforGuard_::ExceptionError(*from.ex_);
  } else {
    ex_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:InforGuard_.checkFileListRes)
}

void checkFileListRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_checkFileListRes_FileTran_2eproto.base);
  ::memset(&ex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&ex_)) + sizeof(ret_));
}

checkFileListRes::~checkFileListRes() {
  // @@protoc_insertion_point(destructor:InforGuard_.checkFileListRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void checkFileListRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ex_;
}

void checkFileListRes::ArenaDtor(void* object) {
  checkFileListRes* _this = reinterpret_cast< checkFileListRes* >(object);
  (void)_this;
}
void checkFileListRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void checkFileListRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const checkFileListRes& checkFileListRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_checkFileListRes_FileTran_2eproto.base);
  return *internal_default_instance();
}


void checkFileListRes::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.checkFileListRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notexistlist_.Clear();
  difflist_.Clear();
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
  ret_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* checkFileListRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.ExceptionError ex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes notExistList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_notexistlist();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes diffList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_difflist();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 ret = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* checkFileListRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.checkFileListRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.ExceptionError ex = 1;
  if (this->has_ex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ex(this), target, stream);
  }

  // repeated bytes notExistList = 2;
  for (int i = 0, n = this->_internal_notexistlist_size(); i < n; i++) {
    const auto& s = this->_internal_notexistlist(i);
    target = stream->WriteBytes(2, s, target);
  }

  // repeated bytes diffList = 3;
  for (int i = 0, n = this->_internal_difflist_size(); i < n; i++) {
    const auto& s = this->_internal_difflist(i);
    target = stream->WriteBytes(3, s, target);
  }

  // int32 ret = 4;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.checkFileListRes)
  return target;
}

size_t checkFileListRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.checkFileListRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes notExistList = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(notexistlist_.size());
  for (int i = 0, n = notexistlist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      notexistlist_.Get(i));
  }

  // repeated bytes diffList = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(difflist_.size());
  for (int i = 0, n = difflist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      difflist_.Get(i));
  }

  // .InforGuard_.ExceptionError ex = 1;
  if (this->has_ex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ex_);
  }

  // int32 ret = 4;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void checkFileListRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.checkFileListRes)
  GOOGLE_DCHECK_NE(&from, this);
  const checkFileListRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<checkFileListRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.checkFileListRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.checkFileListRes)
    MergeFrom(*source);
  }
}

void checkFileListRes::MergeFrom(const checkFileListRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.checkFileListRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notexistlist_.MergeFrom(from.notexistlist_);
  difflist_.MergeFrom(from.difflist_);
  if (from.has_ex()) {
    _internal_mutable_ex()->::InforGuard_::ExceptionError::MergeFrom(from._internal_ex());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void checkFileListRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.checkFileListRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void checkFileListRes::CopyFrom(const checkFileListRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.checkFileListRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool checkFileListRes::IsInitialized() const {
  return true;
}

void checkFileListRes::InternalSwap(checkFileListRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  notexistlist_.InternalSwap(&other->notexistlist_);
  difflist_.InternalSwap(&other->difflist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(checkFileListRes, ret_)
      + sizeof(checkFileListRes::ret_)
      - PROTOBUF_FIELD_OFFSET(checkFileListRes, ex_)>(
          reinterpret_cast<char*>(&ex_),
          reinterpret_cast<char*>(&other->ex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata checkFileListRes::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace InforGuard_
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::InforGuard_::GetFileBlockReq* Arena::CreateMaybeMessage< ::InforGuard_::GetFileBlockReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::GetFileBlockReq >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::GetFileBlockRes* Arena::CreateMaybeMessage< ::InforGuard_::GetFileBlockRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::GetFileBlockRes >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::PutFileBlockReq* Arena::CreateMaybeMessage< ::InforGuard_::PutFileBlockReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::PutFileBlockReq >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::PutFileBlockRes* Arena::CreateMaybeMessage< ::InforGuard_::PutFileBlockRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::PutFileBlockRes >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::MakeDirectoryReq* Arena::CreateMaybeMessage< ::InforGuard_::MakeDirectoryReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::MakeDirectoryReq >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::MakeDirectoryRes* Arena::CreateMaybeMessage< ::InforGuard_::MakeDirectoryRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::MakeDirectoryRes >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::MoveFileInReq* Arena::CreateMaybeMessage< ::InforGuard_::MoveFileInReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::MoveFileInReq >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::MoveFileInRes* Arena::CreateMaybeMessage< ::InforGuard_::MoveFileInRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::MoveFileInRes >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::MoveFileOutReq* Arena::CreateMaybeMessage< ::InforGuard_::MoveFileOutReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::MoveFileOutReq >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::MoveFileOutRes* Arena::CreateMaybeMessage< ::InforGuard_::MoveFileOutRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::MoveFileOutRes >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::RenameFileReq* Arena::CreateMaybeMessage< ::InforGuard_::RenameFileReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::RenameFileReq >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::RenameFileRes* Arena::CreateMaybeMessage< ::InforGuard_::RenameFileRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::RenameFileRes >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::QueryBasePathReq* Arena::CreateMaybeMessage< ::InforGuard_::QueryBasePathReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::QueryBasePathReq >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::QueryBasePathRes* Arena::CreateMaybeMessage< ::InforGuard_::QueryBasePathRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::QueryBasePathRes >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::isFileExistReq* Arena::CreateMaybeMessage< ::InforGuard_::isFileExistReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::isFileExistReq >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::isFileExistRes* Arena::CreateMaybeMessage< ::InforGuard_::isFileExistRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::isFileExistRes >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::setFileTimeReq* Arena::CreateMaybeMessage< ::InforGuard_::setFileTimeReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::setFileTimeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::setFileTimeRes* Arena::CreateMaybeMessage< ::InforGuard_::setFileTimeRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::setFileTimeRes >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::getFileTimeReq* Arena::CreateMaybeMessage< ::InforGuard_::getFileTimeReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::getFileTimeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::getFileTimeRes* Arena::CreateMaybeMessage< ::InforGuard_::getFileTimeRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::getFileTimeRes >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::sendFileListReq* Arena::CreateMaybeMessage< ::InforGuard_::sendFileListReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::sendFileListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::sendFileListRes* Arena::CreateMaybeMessage< ::InforGuard_::sendFileListRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::sendFileListRes >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::sendAccessReq* Arena::CreateMaybeMessage< ::InforGuard_::sendAccessReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::sendAccessReq >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::sendAccessRes* Arena::CreateMaybeMessage< ::InforGuard_::sendAccessRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::sendAccessRes >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::checkFileListReq* Arena::CreateMaybeMessage< ::InforGuard_::checkFileListReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::checkFileListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::checkFileListRes* Arena::CreateMaybeMessage< ::InforGuard_::checkFileListRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::checkFileListRes >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
