// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: MsgTran.proto

#include "MsgTran.pb.h"
#include "MsgTran.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace InforGuard_ {

static const char* MsgTran_method_names[] = {
  "/InforGuard_.MsgTran/GetMsg",
  "/InforGuard_.MsgTran/PutMsg",
};

std::unique_ptr< MsgTran::Stub> MsgTran::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MsgTran::Stub> stub(new MsgTran::Stub(channel));
  return stub;
}

MsgTran::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetMsg_(MsgTran_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PutMsg_(MsgTran_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MsgTran::Stub::GetMsg(::grpc::ClientContext* context, const ::InforGuard_::GetMsgReq& request, ::InforGuard_::GetMsgRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMsg_, context, request, response);
}

void MsgTran::Stub::experimental_async::GetMsg(::grpc::ClientContext* context, const ::InforGuard_::GetMsgReq* request, ::InforGuard_::GetMsgRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMsg_, context, request, response, std::move(f));
}

void MsgTran::Stub::experimental_async::GetMsg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetMsgRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMsg_, context, request, response, std::move(f));
}

void MsgTran::Stub::experimental_async::GetMsg(::grpc::ClientContext* context, const ::InforGuard_::GetMsgReq* request, ::InforGuard_::GetMsgRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMsg_, context, request, response, reactor);
}

void MsgTran::Stub::experimental_async::GetMsg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetMsgRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMsg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::GetMsgRes>* MsgTran::Stub::AsyncGetMsgRaw(::grpc::ClientContext* context, const ::InforGuard_::GetMsgReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::GetMsgRes>::Create(channel_.get(), cq, rpcmethod_GetMsg_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::GetMsgRes>* MsgTran::Stub::PrepareAsyncGetMsgRaw(::grpc::ClientContext* context, const ::InforGuard_::GetMsgReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::GetMsgRes>::Create(channel_.get(), cq, rpcmethod_GetMsg_, context, request, false);
}

::grpc::Status MsgTran::Stub::PutMsg(::grpc::ClientContext* context, const ::InforGuard_::PutMsgReq& request, ::InforGuard_::PutMsgRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PutMsg_, context, request, response);
}

void MsgTran::Stub::experimental_async::PutMsg(::grpc::ClientContext* context, const ::InforGuard_::PutMsgReq* request, ::InforGuard_::PutMsgRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PutMsg_, context, request, response, std::move(f));
}

void MsgTran::Stub::experimental_async::PutMsg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::PutMsgRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PutMsg_, context, request, response, std::move(f));
}

void MsgTran::Stub::experimental_async::PutMsg(::grpc::ClientContext* context, const ::InforGuard_::PutMsgReq* request, ::InforGuard_::PutMsgRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PutMsg_, context, request, response, reactor);
}

void MsgTran::Stub::experimental_async::PutMsg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::PutMsgRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PutMsg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::PutMsgRes>* MsgTran::Stub::AsyncPutMsgRaw(::grpc::ClientContext* context, const ::InforGuard_::PutMsgReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::PutMsgRes>::Create(channel_.get(), cq, rpcmethod_PutMsg_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::PutMsgRes>* MsgTran::Stub::PrepareAsyncPutMsgRaw(::grpc::ClientContext* context, const ::InforGuard_::PutMsgReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::PutMsgRes>::Create(channel_.get(), cq, rpcmethod_PutMsg_, context, request, false);
}

MsgTran::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MsgTran_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MsgTran::Service, ::InforGuard_::GetMsgReq, ::InforGuard_::GetMsgRes>(
          [](MsgTran::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::InforGuard_::GetMsgReq* req,
             ::InforGuard_::GetMsgRes* resp) {
               return service->GetMsg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MsgTran_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MsgTran::Service, ::InforGuard_::PutMsgReq, ::InforGuard_::PutMsgRes>(
          [](MsgTran::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::InforGuard_::PutMsgReq* req,
             ::InforGuard_::PutMsgRes* resp) {
               return service->PutMsg(ctx, req, resp);
             }, this)));
}

MsgTran::Service::~Service() {
}

::grpc::Status MsgTran::Service::GetMsg(::grpc::ServerContext* context, const ::InforGuard_::GetMsgReq* request, ::InforGuard_::GetMsgRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MsgTran::Service::PutMsg(::grpc::ServerContext* context, const ::InforGuard_::PutMsgReq* request, ::InforGuard_::PutMsgRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace InforGuard_

