// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: NetDirectory.proto
#ifndef GRPC_NetDirectory_2eproto__INCLUDED
#define GRPC_NetDirectory_2eproto__INCLUDED

#include "NetDirectory.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace InforGuard_ {

class NetDirectory final {
 public:
  static constexpr char const* service_full_name() {
    return "InforGuard_.NetDirectory";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Check(::grpc::ClientContext* context, const ::InforGuard_::CheckReq& request, ::InforGuard_::CheckRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::CheckRes>> AsyncCheck(::grpc::ClientContext* context, const ::InforGuard_::CheckReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::CheckRes>>(AsyncCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::CheckRes>> PrepareAsyncCheck(::grpc::ClientContext* context, const ::InforGuard_::CheckReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::CheckRes>>(PrepareAsyncCheckRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTree(::grpc::ClientContext* context, const ::InforGuard_::GetTreeReq& request, ::InforGuard_::GetTreeRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::GetTreeRes>> AsyncGetTree(::grpc::ClientContext* context, const ::InforGuard_::GetTreeReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::GetTreeRes>>(AsyncGetTreeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::GetTreeRes>> PrepareAsyncGetTree(::grpc::ClientContext* context, const ::InforGuard_::GetTreeReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::GetTreeRes>>(PrepareAsyncGetTreeRaw(context, request, cq));
    }
    virtual ::grpc::Status GetList(::grpc::ClientContext* context, const ::InforGuard_::GetListReq& request, ::InforGuard_::GetListRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::GetListRes>> AsyncGetList(::grpc::ClientContext* context, const ::InforGuard_::GetListReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::GetListRes>>(AsyncGetListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::GetListRes>> PrepareAsyncGetList(::grpc::ClientContext* context, const ::InforGuard_::GetListReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::GetListRes>>(PrepareAsyncGetListRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTreeEx(::grpc::ClientContext* context, const ::InforGuard_::GetTreeExReq& request, ::InforGuard_::GetTreeExRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::GetTreeExRes>> AsyncGetTreeEx(::grpc::ClientContext* context, const ::InforGuard_::GetTreeExReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::GetTreeExRes>>(AsyncGetTreeExRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::GetTreeExRes>> PrepareAsyncGetTreeEx(::grpc::ClientContext* context, const ::InforGuard_::GetTreeExReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::GetTreeExRes>>(PrepareAsyncGetTreeExRaw(context, request, cq));
    }
    virtual ::grpc::Status GetListEx(::grpc::ClientContext* context, const ::InforGuard_::GetListExReq& request, ::InforGuard_::GetListExRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::GetListExRes>> AsyncGetListEx(::grpc::ClientContext* context, const ::InforGuard_::GetListExReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::GetListExRes>>(AsyncGetListExRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::GetListExRes>> PrepareAsyncGetListEx(::grpc::ClientContext* context, const ::InforGuard_::GetListExReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::GetListExRes>>(PrepareAsyncGetListExRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Check(::grpc::ClientContext* context, const ::InforGuard_::CheckReq* request, ::InforGuard_::CheckRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Check(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::CheckRes* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Check(::grpc::ClientContext* context, const ::InforGuard_::CheckReq* request, ::InforGuard_::CheckRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Check(::grpc::ClientContext* context, const ::InforGuard_::CheckReq* request, ::InforGuard_::CheckRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Check(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::CheckRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Check(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::CheckRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetTree(::grpc::ClientContext* context, const ::InforGuard_::GetTreeReq* request, ::InforGuard_::GetTreeRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTree(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetTreeRes* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetTree(::grpc::ClientContext* context, const ::InforGuard_::GetTreeReq* request, ::InforGuard_::GetTreeRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetTree(::grpc::ClientContext* context, const ::InforGuard_::GetTreeReq* request, ::InforGuard_::GetTreeRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetTree(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetTreeRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetTree(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetTreeRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetList(::grpc::ClientContext* context, const ::InforGuard_::GetListReq* request, ::InforGuard_::GetListRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetListRes* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetList(::grpc::ClientContext* context, const ::InforGuard_::GetListReq* request, ::InforGuard_::GetListRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetList(::grpc::ClientContext* context, const ::InforGuard_::GetListReq* request, ::InforGuard_::GetListRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetListRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetListRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetTreeEx(::grpc::ClientContext* context, const ::InforGuard_::GetTreeExReq* request, ::InforGuard_::GetTreeExRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTreeEx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetTreeExRes* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetTreeEx(::grpc::ClientContext* context, const ::InforGuard_::GetTreeExReq* request, ::InforGuard_::GetTreeExRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetTreeEx(::grpc::ClientContext* context, const ::InforGuard_::GetTreeExReq* request, ::InforGuard_::GetTreeExRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetTreeEx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetTreeExRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetTreeEx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetTreeExRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetListEx(::grpc::ClientContext* context, const ::InforGuard_::GetListExReq* request, ::InforGuard_::GetListExRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetListEx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetListExRes* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetListEx(::grpc::ClientContext* context, const ::InforGuard_::GetListExReq* request, ::InforGuard_::GetListExRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetListEx(::grpc::ClientContext* context, const ::InforGuard_::GetListExReq* request, ::InforGuard_::GetListExRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetListEx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetListExRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetListEx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetListExRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::CheckRes>* AsyncCheckRaw(::grpc::ClientContext* context, const ::InforGuard_::CheckReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::CheckRes>* PrepareAsyncCheckRaw(::grpc::ClientContext* context, const ::InforGuard_::CheckReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::GetTreeRes>* AsyncGetTreeRaw(::grpc::ClientContext* context, const ::InforGuard_::GetTreeReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::GetTreeRes>* PrepareAsyncGetTreeRaw(::grpc::ClientContext* context, const ::InforGuard_::GetTreeReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::GetListRes>* AsyncGetListRaw(::grpc::ClientContext* context, const ::InforGuard_::GetListReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::GetListRes>* PrepareAsyncGetListRaw(::grpc::ClientContext* context, const ::InforGuard_::GetListReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::GetTreeExRes>* AsyncGetTreeExRaw(::grpc::ClientContext* context, const ::InforGuard_::GetTreeExReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::GetTreeExRes>* PrepareAsyncGetTreeExRaw(::grpc::ClientContext* context, const ::InforGuard_::GetTreeExReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::GetListExRes>* AsyncGetListExRaw(::grpc::ClientContext* context, const ::InforGuard_::GetListExReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::GetListExRes>* PrepareAsyncGetListExRaw(::grpc::ClientContext* context, const ::InforGuard_::GetListExReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Check(::grpc::ClientContext* context, const ::InforGuard_::CheckReq& request, ::InforGuard_::CheckRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::CheckRes>> AsyncCheck(::grpc::ClientContext* context, const ::InforGuard_::CheckReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::CheckRes>>(AsyncCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::CheckRes>> PrepareAsyncCheck(::grpc::ClientContext* context, const ::InforGuard_::CheckReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::CheckRes>>(PrepareAsyncCheckRaw(context, request, cq));
    }
    ::grpc::Status GetTree(::grpc::ClientContext* context, const ::InforGuard_::GetTreeReq& request, ::InforGuard_::GetTreeRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::GetTreeRes>> AsyncGetTree(::grpc::ClientContext* context, const ::InforGuard_::GetTreeReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::GetTreeRes>>(AsyncGetTreeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::GetTreeRes>> PrepareAsyncGetTree(::grpc::ClientContext* context, const ::InforGuard_::GetTreeReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::GetTreeRes>>(PrepareAsyncGetTreeRaw(context, request, cq));
    }
    ::grpc::Status GetList(::grpc::ClientContext* context, const ::InforGuard_::GetListReq& request, ::InforGuard_::GetListRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::GetListRes>> AsyncGetList(::grpc::ClientContext* context, const ::InforGuard_::GetListReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::GetListRes>>(AsyncGetListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::GetListRes>> PrepareAsyncGetList(::grpc::ClientContext* context, const ::InforGuard_::GetListReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::GetListRes>>(PrepareAsyncGetListRaw(context, request, cq));
    }
    ::grpc::Status GetTreeEx(::grpc::ClientContext* context, const ::InforGuard_::GetTreeExReq& request, ::InforGuard_::GetTreeExRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::GetTreeExRes>> AsyncGetTreeEx(::grpc::ClientContext* context, const ::InforGuard_::GetTreeExReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::GetTreeExRes>>(AsyncGetTreeExRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::GetTreeExRes>> PrepareAsyncGetTreeEx(::grpc::ClientContext* context, const ::InforGuard_::GetTreeExReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::GetTreeExRes>>(PrepareAsyncGetTreeExRaw(context, request, cq));
    }
    ::grpc::Status GetListEx(::grpc::ClientContext* context, const ::InforGuard_::GetListExReq& request, ::InforGuard_::GetListExRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::GetListExRes>> AsyncGetListEx(::grpc::ClientContext* context, const ::InforGuard_::GetListExReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::GetListExRes>>(AsyncGetListExRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::GetListExRes>> PrepareAsyncGetListEx(::grpc::ClientContext* context, const ::InforGuard_::GetListExReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::GetListExRes>>(PrepareAsyncGetListExRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Check(::grpc::ClientContext* context, const ::InforGuard_::CheckReq* request, ::InforGuard_::CheckRes* response, std::function<void(::grpc::Status)>) override;
      void Check(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::CheckRes* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Check(::grpc::ClientContext* context, const ::InforGuard_::CheckReq* request, ::InforGuard_::CheckRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Check(::grpc::ClientContext* context, const ::InforGuard_::CheckReq* request, ::InforGuard_::CheckRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Check(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::CheckRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Check(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::CheckRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetTree(::grpc::ClientContext* context, const ::InforGuard_::GetTreeReq* request, ::InforGuard_::GetTreeRes* response, std::function<void(::grpc::Status)>) override;
      void GetTree(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetTreeRes* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetTree(::grpc::ClientContext* context, const ::InforGuard_::GetTreeReq* request, ::InforGuard_::GetTreeRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetTree(::grpc::ClientContext* context, const ::InforGuard_::GetTreeReq* request, ::InforGuard_::GetTreeRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetTree(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetTreeRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetTree(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetTreeRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetList(::grpc::ClientContext* context, const ::InforGuard_::GetListReq* request, ::InforGuard_::GetListRes* response, std::function<void(::grpc::Status)>) override;
      void GetList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetListRes* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetList(::grpc::ClientContext* context, const ::InforGuard_::GetListReq* request, ::InforGuard_::GetListRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetList(::grpc::ClientContext* context, const ::InforGuard_::GetListReq* request, ::InforGuard_::GetListRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetListRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetListRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetTreeEx(::grpc::ClientContext* context, const ::InforGuard_::GetTreeExReq* request, ::InforGuard_::GetTreeExRes* response, std::function<void(::grpc::Status)>) override;
      void GetTreeEx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetTreeExRes* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetTreeEx(::grpc::ClientContext* context, const ::InforGuard_::GetTreeExReq* request, ::InforGuard_::GetTreeExRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetTreeEx(::grpc::ClientContext* context, const ::InforGuard_::GetTreeExReq* request, ::InforGuard_::GetTreeExRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetTreeEx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetTreeExRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetTreeEx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetTreeExRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetListEx(::grpc::ClientContext* context, const ::InforGuard_::GetListExReq* request, ::InforGuard_::GetListExRes* response, std::function<void(::grpc::Status)>) override;
      void GetListEx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetListExRes* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetListEx(::grpc::ClientContext* context, const ::InforGuard_::GetListExReq* request, ::InforGuard_::GetListExRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetListEx(::grpc::ClientContext* context, const ::InforGuard_::GetListExReq* request, ::InforGuard_::GetListExRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetListEx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetListExRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetListEx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetListExRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::InforGuard_::CheckRes>* AsyncCheckRaw(::grpc::ClientContext* context, const ::InforGuard_::CheckReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::InforGuard_::CheckRes>* PrepareAsyncCheckRaw(::grpc::ClientContext* context, const ::InforGuard_::CheckReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::InforGuard_::GetTreeRes>* AsyncGetTreeRaw(::grpc::ClientContext* context, const ::InforGuard_::GetTreeReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::InforGuard_::GetTreeRes>* PrepareAsyncGetTreeRaw(::grpc::ClientContext* context, const ::InforGuard_::GetTreeReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::InforGuard_::GetListRes>* AsyncGetListRaw(::grpc::ClientContext* context, const ::InforGuard_::GetListReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::InforGuard_::GetListRes>* PrepareAsyncGetListRaw(::grpc::ClientContext* context, const ::InforGuard_::GetListReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::InforGuard_::GetTreeExRes>* AsyncGetTreeExRaw(::grpc::ClientContext* context, const ::InforGuard_::GetTreeExReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::InforGuard_::GetTreeExRes>* PrepareAsyncGetTreeExRaw(::grpc::ClientContext* context, const ::InforGuard_::GetTreeExReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::InforGuard_::GetListExRes>* AsyncGetListExRaw(::grpc::ClientContext* context, const ::InforGuard_::GetListExReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::InforGuard_::GetListExRes>* PrepareAsyncGetListExRaw(::grpc::ClientContext* context, const ::InforGuard_::GetListExReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Check_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTree_;
    const ::grpc::internal::RpcMethod rpcmethod_GetList_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTreeEx_;
    const ::grpc::internal::RpcMethod rpcmethod_GetListEx_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Check(::grpc::ServerContext* context, const ::InforGuard_::CheckReq* request, ::InforGuard_::CheckRes* response);
    virtual ::grpc::Status GetTree(::grpc::ServerContext* context, const ::InforGuard_::GetTreeReq* request, ::InforGuard_::GetTreeRes* response);
    virtual ::grpc::Status GetList(::grpc::ServerContext* context, const ::InforGuard_::GetListReq* request, ::InforGuard_::GetListRes* response);
    virtual ::grpc::Status GetTreeEx(::grpc::ServerContext* context, const ::InforGuard_::GetTreeExReq* request, ::InforGuard_::GetTreeExRes* response);
    virtual ::grpc::Status GetListEx(::grpc::ServerContext* context, const ::InforGuard_::GetListExReq* request, ::InforGuard_::GetListExRes* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Check() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Check(::grpc::ServerContext* /*context*/, const ::InforGuard_::CheckReq* /*request*/, ::InforGuard_::CheckRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheck(::grpc::ServerContext* context, ::InforGuard_::CheckReq* request, ::grpc::ServerAsyncResponseWriter< ::InforGuard_::CheckRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTree : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTree() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetTree() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTree(::grpc::ServerContext* /*context*/, const ::InforGuard_::GetTreeReq* /*request*/, ::InforGuard_::GetTreeRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTree(::grpc::ServerContext* context, ::InforGuard_::GetTreeReq* request, ::grpc::ServerAsyncResponseWriter< ::InforGuard_::GetTreeRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetList() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetList(::grpc::ServerContext* /*context*/, const ::InforGuard_::GetListReq* /*request*/, ::InforGuard_::GetListRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetList(::grpc::ServerContext* context, ::InforGuard_::GetListReq* request, ::grpc::ServerAsyncResponseWriter< ::InforGuard_::GetListRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTreeEx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTreeEx() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetTreeEx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTreeEx(::grpc::ServerContext* /*context*/, const ::InforGuard_::GetTreeExReq* /*request*/, ::InforGuard_::GetTreeExRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTreeEx(::grpc::ServerContext* context, ::InforGuard_::GetTreeExReq* request, ::grpc::ServerAsyncResponseWriter< ::InforGuard_::GetTreeExRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetListEx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetListEx() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetListEx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetListEx(::grpc::ServerContext* /*context*/, const ::InforGuard_::GetListExReq* /*request*/, ::InforGuard_::GetListExRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetListEx(::grpc::ServerContext* context, ::InforGuard_::GetListExReq* request, ::grpc::ServerAsyncResponseWriter< ::InforGuard_::GetListExRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Check<WithAsyncMethod_GetTree<WithAsyncMethod_GetList<WithAsyncMethod_GetTreeEx<WithAsyncMethod_GetListEx<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Check() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::InforGuard_::CheckReq, ::InforGuard_::CheckRes>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::InforGuard_::CheckReq* request, ::InforGuard_::CheckRes* response) { return this->Check(context, request, response); }));}
    void SetMessageAllocatorFor_Check(
        ::grpc::experimental::MessageAllocator< ::InforGuard_::CheckReq, ::InforGuard_::CheckRes>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::InforGuard_::CheckReq, ::InforGuard_::CheckRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Check(::grpc::ServerContext* /*context*/, const ::InforGuard_::CheckReq* /*request*/, ::InforGuard_::CheckRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Check(
      ::grpc::CallbackServerContext* /*context*/, const ::InforGuard_::CheckReq* /*request*/, ::InforGuard_::CheckRes* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Check(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::InforGuard_::CheckReq* /*request*/, ::InforGuard_::CheckRes* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetTree : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetTree() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::InforGuard_::GetTreeReq, ::InforGuard_::GetTreeRes>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::InforGuard_::GetTreeReq* request, ::InforGuard_::GetTreeRes* response) { return this->GetTree(context, request, response); }));}
    void SetMessageAllocatorFor_GetTree(
        ::grpc::experimental::MessageAllocator< ::InforGuard_::GetTreeReq, ::InforGuard_::GetTreeRes>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::InforGuard_::GetTreeReq, ::InforGuard_::GetTreeRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetTree() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTree(::grpc::ServerContext* /*context*/, const ::InforGuard_::GetTreeReq* /*request*/, ::InforGuard_::GetTreeRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetTree(
      ::grpc::CallbackServerContext* /*context*/, const ::InforGuard_::GetTreeReq* /*request*/, ::InforGuard_::GetTreeRes* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetTree(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::InforGuard_::GetTreeReq* /*request*/, ::InforGuard_::GetTreeRes* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetList() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::InforGuard_::GetListReq, ::InforGuard_::GetListRes>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::InforGuard_::GetListReq* request, ::InforGuard_::GetListRes* response) { return this->GetList(context, request, response); }));}
    void SetMessageAllocatorFor_GetList(
        ::grpc::experimental::MessageAllocator< ::InforGuard_::GetListReq, ::InforGuard_::GetListRes>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::InforGuard_::GetListReq, ::InforGuard_::GetListRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetList(::grpc::ServerContext* /*context*/, const ::InforGuard_::GetListReq* /*request*/, ::InforGuard_::GetListRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetList(
      ::grpc::CallbackServerContext* /*context*/, const ::InforGuard_::GetListReq* /*request*/, ::InforGuard_::GetListRes* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetList(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::InforGuard_::GetListReq* /*request*/, ::InforGuard_::GetListRes* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetTreeEx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetTreeEx() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::InforGuard_::GetTreeExReq, ::InforGuard_::GetTreeExRes>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::InforGuard_::GetTreeExReq* request, ::InforGuard_::GetTreeExRes* response) { return this->GetTreeEx(context, request, response); }));}
    void SetMessageAllocatorFor_GetTreeEx(
        ::grpc::experimental::MessageAllocator< ::InforGuard_::GetTreeExReq, ::InforGuard_::GetTreeExRes>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::InforGuard_::GetTreeExReq, ::InforGuard_::GetTreeExRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetTreeEx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTreeEx(::grpc::ServerContext* /*context*/, const ::InforGuard_::GetTreeExReq* /*request*/, ::InforGuard_::GetTreeExRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetTreeEx(
      ::grpc::CallbackServerContext* /*context*/, const ::InforGuard_::GetTreeExReq* /*request*/, ::InforGuard_::GetTreeExRes* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetTreeEx(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::InforGuard_::GetTreeExReq* /*request*/, ::InforGuard_::GetTreeExRes* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetListEx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetListEx() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::InforGuard_::GetListExReq, ::InforGuard_::GetListExRes>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::InforGuard_::GetListExReq* request, ::InforGuard_::GetListExRes* response) { return this->GetListEx(context, request, response); }));}
    void SetMessageAllocatorFor_GetListEx(
        ::grpc::experimental::MessageAllocator< ::InforGuard_::GetListExReq, ::InforGuard_::GetListExRes>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::InforGuard_::GetListExReq, ::InforGuard_::GetListExRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetListEx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetListEx(::grpc::ServerContext* /*context*/, const ::InforGuard_::GetListExReq* /*request*/, ::InforGuard_::GetListExRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetListEx(
      ::grpc::CallbackServerContext* /*context*/, const ::InforGuard_::GetListExReq* /*request*/, ::InforGuard_::GetListExRes* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetListEx(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::InforGuard_::GetListExReq* /*request*/, ::InforGuard_::GetListExRes* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Check<ExperimentalWithCallbackMethod_GetTree<ExperimentalWithCallbackMethod_GetList<ExperimentalWithCallbackMethod_GetTreeEx<ExperimentalWithCallbackMethod_GetListEx<Service > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Check<ExperimentalWithCallbackMethod_GetTree<ExperimentalWithCallbackMethod_GetList<ExperimentalWithCallbackMethod_GetTreeEx<ExperimentalWithCallbackMethod_GetListEx<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Check() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Check(::grpc::ServerContext* /*context*/, const ::InforGuard_::CheckReq* /*request*/, ::InforGuard_::CheckRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTree : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTree() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetTree() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTree(::grpc::ServerContext* /*context*/, const ::InforGuard_::GetTreeReq* /*request*/, ::InforGuard_::GetTreeRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetList() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetList(::grpc::ServerContext* /*context*/, const ::InforGuard_::GetListReq* /*request*/, ::InforGuard_::GetListRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTreeEx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTreeEx() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetTreeEx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTreeEx(::grpc::ServerContext* /*context*/, const ::InforGuard_::GetTreeExReq* /*request*/, ::InforGuard_::GetTreeExRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetListEx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetListEx() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetListEx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetListEx(::grpc::ServerContext* /*context*/, const ::InforGuard_::GetListExReq* /*request*/, ::InforGuard_::GetListExRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Check() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Check(::grpc::ServerContext* /*context*/, const ::InforGuard_::CheckReq* /*request*/, ::InforGuard_::CheckRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheck(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTree : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTree() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetTree() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTree(::grpc::ServerContext* /*context*/, const ::InforGuard_::GetTreeReq* /*request*/, ::InforGuard_::GetTreeRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTree(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetList() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetList(::grpc::ServerContext* /*context*/, const ::InforGuard_::GetListReq* /*request*/, ::InforGuard_::GetListRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTreeEx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTreeEx() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetTreeEx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTreeEx(::grpc::ServerContext* /*context*/, const ::InforGuard_::GetTreeExReq* /*request*/, ::InforGuard_::GetTreeExRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTreeEx(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetListEx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetListEx() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetListEx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetListEx(::grpc::ServerContext* /*context*/, const ::InforGuard_::GetListExReq* /*request*/, ::InforGuard_::GetListExRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetListEx(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Check() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Check(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Check(::grpc::ServerContext* /*context*/, const ::InforGuard_::CheckReq* /*request*/, ::InforGuard_::CheckRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Check(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Check(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetTree : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetTree() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTree(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetTree() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTree(::grpc::ServerContext* /*context*/, const ::InforGuard_::GetTreeReq* /*request*/, ::InforGuard_::GetTreeRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetTree(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetTree(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetList() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetList(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetList(::grpc::ServerContext* /*context*/, const ::InforGuard_::GetListReq* /*request*/, ::InforGuard_::GetListRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetList(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetTreeEx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetTreeEx() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTreeEx(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetTreeEx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTreeEx(::grpc::ServerContext* /*context*/, const ::InforGuard_::GetTreeExReq* /*request*/, ::InforGuard_::GetTreeExRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetTreeEx(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetTreeEx(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetListEx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetListEx() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetListEx(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetListEx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetListEx(::grpc::ServerContext* /*context*/, const ::InforGuard_::GetListExReq* /*request*/, ::InforGuard_::GetListExRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetListEx(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetListEx(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Check() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::InforGuard_::CheckReq, ::InforGuard_::CheckRes>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::InforGuard_::CheckReq, ::InforGuard_::CheckRes>* streamer) {
                       return this->StreamedCheck(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Check(::grpc::ServerContext* /*context*/, const ::InforGuard_::CheckReq* /*request*/, ::InforGuard_::CheckRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheck(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::InforGuard_::CheckReq,::InforGuard_::CheckRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTree : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTree() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::InforGuard_::GetTreeReq, ::InforGuard_::GetTreeRes>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::InforGuard_::GetTreeReq, ::InforGuard_::GetTreeRes>* streamer) {
                       return this->StreamedGetTree(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTree() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTree(::grpc::ServerContext* /*context*/, const ::InforGuard_::GetTreeReq* /*request*/, ::InforGuard_::GetTreeRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTree(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::InforGuard_::GetTreeReq,::InforGuard_::GetTreeRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetList() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::InforGuard_::GetListReq, ::InforGuard_::GetListRes>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::InforGuard_::GetListReq, ::InforGuard_::GetListRes>* streamer) {
                       return this->StreamedGetList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetList(::grpc::ServerContext* /*context*/, const ::InforGuard_::GetListReq* /*request*/, ::InforGuard_::GetListRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::InforGuard_::GetListReq,::InforGuard_::GetListRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTreeEx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTreeEx() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::InforGuard_::GetTreeExReq, ::InforGuard_::GetTreeExRes>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::InforGuard_::GetTreeExReq, ::InforGuard_::GetTreeExRes>* streamer) {
                       return this->StreamedGetTreeEx(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTreeEx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTreeEx(::grpc::ServerContext* /*context*/, const ::InforGuard_::GetTreeExReq* /*request*/, ::InforGuard_::GetTreeExRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTreeEx(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::InforGuard_::GetTreeExReq,::InforGuard_::GetTreeExRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetListEx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetListEx() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::InforGuard_::GetListExReq, ::InforGuard_::GetListExRes>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::InforGuard_::GetListExReq, ::InforGuard_::GetListExRes>* streamer) {
                       return this->StreamedGetListEx(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetListEx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetListEx(::grpc::ServerContext* /*context*/, const ::InforGuard_::GetListExReq* /*request*/, ::InforGuard_::GetListExRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetListEx(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::InforGuard_::GetListExReq,::InforGuard_::GetListExRes>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Check<WithStreamedUnaryMethod_GetTree<WithStreamedUnaryMethod_GetList<WithStreamedUnaryMethod_GetTreeEx<WithStreamedUnaryMethod_GetListEx<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Check<WithStreamedUnaryMethod_GetTree<WithStreamedUnaryMethod_GetList<WithStreamedUnaryMethod_GetTreeEx<WithStreamedUnaryMethod_GetListEx<Service > > > > > StreamedService;
};

}  // namespace InforGuard_


#endif  // GRPC_NetDirectory_2eproto__INCLUDED
