// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: NetWaterMark.proto
#ifndef GRPC_NetWaterMark_2eproto__INCLUDED
#define GRPC_NetWaterMark_2eproto__INCLUDED

#include "NetWaterMark.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace InforGuard_ {

class NetWaterMark final {
 public:
  static constexpr char const* service_full_name() {
    return "InforGuard_.NetWaterMark";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Check(::grpc::ClientContext* context, const ::InforGuard_::CheckReq& request, ::InforGuard_::CheckRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::CheckRes>> AsyncCheck(::grpc::ClientContext* context, const ::InforGuard_::CheckReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::CheckRes>>(AsyncCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::CheckRes>> PrepareAsyncCheck(::grpc::ClientContext* context, const ::InforGuard_::CheckReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::CheckRes>>(PrepareAsyncCheckRaw(context, request, cq));
    }
    virtual ::grpc::Status Set(::grpc::ClientContext* context, const ::InforGuard_::SetReq& request, ::InforGuard_::SetRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::SetRes>> AsyncSet(::grpc::ClientContext* context, const ::InforGuard_::SetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::SetRes>>(AsyncSetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::SetRes>> PrepareAsyncSet(::grpc::ClientContext* context, const ::InforGuard_::SetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::SetRes>>(PrepareAsyncSetRaw(context, request, cq));
    }
    virtual ::grpc::Status Get(::grpc::ClientContext* context, const ::InforGuard_::GetReq& request, ::InforGuard_::GetRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::GetRes>> AsyncGet(::grpc::ClientContext* context, const ::InforGuard_::GetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::GetRes>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::GetRes>> PrepareAsyncGet(::grpc::ClientContext* context, const ::InforGuard_::GetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::GetRes>>(PrepareAsyncGetRaw(context, request, cq));
    }
    virtual ::grpc::Status Add(::grpc::ClientContext* context, const ::InforGuard_::AddReq& request, ::InforGuard_::AddRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::AddRes>> AsyncAdd(::grpc::ClientContext* context, const ::InforGuard_::AddReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::AddRes>>(AsyncAddRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::AddRes>> PrepareAsyncAdd(::grpc::ClientContext* context, const ::InforGuard_::AddReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::AddRes>>(PrepareAsyncAddRaw(context, request, cq));
    }
    virtual ::grpc::Status Remove(::grpc::ClientContext* context, const ::InforGuard_::RemoveReq& request, ::InforGuard_::RemoveRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::RemoveRes>> AsyncRemove(::grpc::ClientContext* context, const ::InforGuard_::RemoveReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::RemoveRes>>(AsyncRemoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::RemoveRes>> PrepareAsyncRemove(::grpc::ClientContext* context, const ::InforGuard_::RemoveReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::RemoveRes>>(PrepareAsyncRemoveRaw(context, request, cq));
    }
    virtual ::grpc::Status Rename(::grpc::ClientContext* context, const ::InforGuard_::RenameReq& request, ::InforGuard_::RenameRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::RenameRes>> AsyncRename(::grpc::ClientContext* context, const ::InforGuard_::RenameReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::RenameRes>>(AsyncRenameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::RenameRes>> PrepareAsyncRename(::grpc::ClientContext* context, const ::InforGuard_::RenameReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::RenameRes>>(PrepareAsyncRenameRaw(context, request, cq));
    }
    virtual ::grpc::Status Verify(::grpc::ClientContext* context, const ::InforGuard_::VerifyReq& request, ::InforGuard_::VerifyRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::VerifyRes>> AsyncVerify(::grpc::ClientContext* context, const ::InforGuard_::VerifyReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::VerifyRes>>(AsyncVerifyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::VerifyRes>> PrepareAsyncVerify(::grpc::ClientContext* context, const ::InforGuard_::VerifyReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::VerifyRes>>(PrepareAsyncVerifyRaw(context, request, cq));
    }
    virtual ::grpc::Status VerifyForFilter(::grpc::ClientContext* context, const ::InforGuard_::VerifyForFilterReq& request, ::InforGuard_::VerifyForFilterRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::VerifyForFilterRes>> AsyncVerifyForFilter(::grpc::ClientContext* context, const ::InforGuard_::VerifyForFilterReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::VerifyForFilterRes>>(AsyncVerifyForFilterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::VerifyForFilterRes>> PrepareAsyncVerifyForFilter(::grpc::ClientContext* context, const ::InforGuard_::VerifyForFilterReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::VerifyForFilterRes>>(PrepareAsyncVerifyForFilterRaw(context, request, cq));
    }
    virtual ::grpc::Status RequestResume(::grpc::ClientContext* context, const ::InforGuard_::RequestResumeReq& request, ::InforGuard_::RequestResumeRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::RequestResumeRes>> AsyncRequestResume(::grpc::ClientContext* context, const ::InforGuard_::RequestResumeReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::RequestResumeRes>>(AsyncRequestResumeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::RequestResumeRes>> PrepareAsyncRequestResume(::grpc::ClientContext* context, const ::InforGuard_::RequestResumeReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::RequestResumeRes>>(PrepareAsyncRequestResumeRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Check(::grpc::ClientContext* context, const ::InforGuard_::CheckReq* request, ::InforGuard_::CheckRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Check(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::CheckRes* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Check(::grpc::ClientContext* context, const ::InforGuard_::CheckReq* request, ::InforGuard_::CheckRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Check(::grpc::ClientContext* context, const ::InforGuard_::CheckReq* request, ::InforGuard_::CheckRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Check(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::CheckRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Check(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::CheckRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Set(::grpc::ClientContext* context, const ::InforGuard_::SetReq* request, ::InforGuard_::SetRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Set(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::SetRes* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Set(::grpc::ClientContext* context, const ::InforGuard_::SetReq* request, ::InforGuard_::SetRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Set(::grpc::ClientContext* context, const ::InforGuard_::SetReq* request, ::InforGuard_::SetRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Set(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::SetRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Set(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::SetRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Get(::grpc::ClientContext* context, const ::InforGuard_::GetReq* request, ::InforGuard_::GetRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetRes* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Get(::grpc::ClientContext* context, const ::InforGuard_::GetReq* request, ::InforGuard_::GetRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Get(::grpc::ClientContext* context, const ::InforGuard_::GetReq* request, ::InforGuard_::GetRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Add(::grpc::ClientContext* context, const ::InforGuard_::AddReq* request, ::InforGuard_::AddRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Add(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::AddRes* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Add(::grpc::ClientContext* context, const ::InforGuard_::AddReq* request, ::InforGuard_::AddRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Add(::grpc::ClientContext* context, const ::InforGuard_::AddReq* request, ::InforGuard_::AddRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Add(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::AddRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Add(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::AddRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Remove(::grpc::ClientContext* context, const ::InforGuard_::RemoveReq* request, ::InforGuard_::RemoveRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Remove(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::RemoveRes* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Remove(::grpc::ClientContext* context, const ::InforGuard_::RemoveReq* request, ::InforGuard_::RemoveRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Remove(::grpc::ClientContext* context, const ::InforGuard_::RemoveReq* request, ::InforGuard_::RemoveRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Remove(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::RemoveRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Remove(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::RemoveRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Rename(::grpc::ClientContext* context, const ::InforGuard_::RenameReq* request, ::InforGuard_::RenameRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Rename(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::RenameRes* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Rename(::grpc::ClientContext* context, const ::InforGuard_::RenameReq* request, ::InforGuard_::RenameRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Rename(::grpc::ClientContext* context, const ::InforGuard_::RenameReq* request, ::InforGuard_::RenameRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Rename(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::RenameRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Rename(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::RenameRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Verify(::grpc::ClientContext* context, const ::InforGuard_::VerifyReq* request, ::InforGuard_::VerifyRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Verify(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::VerifyRes* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Verify(::grpc::ClientContext* context, const ::InforGuard_::VerifyReq* request, ::InforGuard_::VerifyRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Verify(::grpc::ClientContext* context, const ::InforGuard_::VerifyReq* request, ::InforGuard_::VerifyRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Verify(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::VerifyRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Verify(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::VerifyRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void VerifyForFilter(::grpc::ClientContext* context, const ::InforGuard_::VerifyForFilterReq* request, ::InforGuard_::VerifyForFilterRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VerifyForFilter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::VerifyForFilterRes* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void VerifyForFilter(::grpc::ClientContext* context, const ::InforGuard_::VerifyForFilterReq* request, ::InforGuard_::VerifyForFilterRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void VerifyForFilter(::grpc::ClientContext* context, const ::InforGuard_::VerifyForFilterReq* request, ::InforGuard_::VerifyForFilterRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void VerifyForFilter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::VerifyForFilterRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void VerifyForFilter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::VerifyForFilterRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void RequestResume(::grpc::ClientContext* context, const ::InforGuard_::RequestResumeReq* request, ::InforGuard_::RequestResumeRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestResume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::RequestResumeRes* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RequestResume(::grpc::ClientContext* context, const ::InforGuard_::RequestResumeReq* request, ::InforGuard_::RequestResumeRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RequestResume(::grpc::ClientContext* context, const ::InforGuard_::RequestResumeReq* request, ::InforGuard_::RequestResumeRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RequestResume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::RequestResumeRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RequestResume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::RequestResumeRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::CheckRes>* AsyncCheckRaw(::grpc::ClientContext* context, const ::InforGuard_::CheckReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::CheckRes>* PrepareAsyncCheckRaw(::grpc::ClientContext* context, const ::InforGuard_::CheckReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::SetRes>* AsyncSetRaw(::grpc::ClientContext* context, const ::InforGuard_::SetReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::SetRes>* PrepareAsyncSetRaw(::grpc::ClientContext* context, const ::InforGuard_::SetReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::GetRes>* AsyncGetRaw(::grpc::ClientContext* context, const ::InforGuard_::GetReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::GetRes>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::InforGuard_::GetReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::AddRes>* AsyncAddRaw(::grpc::ClientContext* context, const ::InforGuard_::AddReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::AddRes>* PrepareAsyncAddRaw(::grpc::ClientContext* context, const ::InforGuard_::AddReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::RemoveRes>* AsyncRemoveRaw(::grpc::ClientContext* context, const ::InforGuard_::RemoveReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::RemoveRes>* PrepareAsyncRemoveRaw(::grpc::ClientContext* context, const ::InforGuard_::RemoveReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::RenameRes>* AsyncRenameRaw(::grpc::ClientContext* context, const ::InforGuard_::RenameReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::RenameRes>* PrepareAsyncRenameRaw(::grpc::ClientContext* context, const ::InforGuard_::RenameReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::VerifyRes>* AsyncVerifyRaw(::grpc::ClientContext* context, const ::InforGuard_::VerifyReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::VerifyRes>* PrepareAsyncVerifyRaw(::grpc::ClientContext* context, const ::InforGuard_::VerifyReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::VerifyForFilterRes>* AsyncVerifyForFilterRaw(::grpc::ClientContext* context, const ::InforGuard_::VerifyForFilterReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::VerifyForFilterRes>* PrepareAsyncVerifyForFilterRaw(::grpc::ClientContext* context, const ::InforGuard_::VerifyForFilterReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::RequestResumeRes>* AsyncRequestResumeRaw(::grpc::ClientContext* context, const ::InforGuard_::RequestResumeReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::InforGuard_::RequestResumeRes>* PrepareAsyncRequestResumeRaw(::grpc::ClientContext* context, const ::InforGuard_::RequestResumeReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Check(::grpc::ClientContext* context, const ::InforGuard_::CheckReq& request, ::InforGuard_::CheckRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::CheckRes>> AsyncCheck(::grpc::ClientContext* context, const ::InforGuard_::CheckReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::CheckRes>>(AsyncCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::CheckRes>> PrepareAsyncCheck(::grpc::ClientContext* context, const ::InforGuard_::CheckReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::CheckRes>>(PrepareAsyncCheckRaw(context, request, cq));
    }
    ::grpc::Status Set(::grpc::ClientContext* context, const ::InforGuard_::SetReq& request, ::InforGuard_::SetRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::SetRes>> AsyncSet(::grpc::ClientContext* context, const ::InforGuard_::SetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::SetRes>>(AsyncSetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::SetRes>> PrepareAsyncSet(::grpc::ClientContext* context, const ::InforGuard_::SetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::SetRes>>(PrepareAsyncSetRaw(context, request, cq));
    }
    ::grpc::Status Get(::grpc::ClientContext* context, const ::InforGuard_::GetReq& request, ::InforGuard_::GetRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::GetRes>> AsyncGet(::grpc::ClientContext* context, const ::InforGuard_::GetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::GetRes>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::GetRes>> PrepareAsyncGet(::grpc::ClientContext* context, const ::InforGuard_::GetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::GetRes>>(PrepareAsyncGetRaw(context, request, cq));
    }
    ::grpc::Status Add(::grpc::ClientContext* context, const ::InforGuard_::AddReq& request, ::InforGuard_::AddRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::AddRes>> AsyncAdd(::grpc::ClientContext* context, const ::InforGuard_::AddReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::AddRes>>(AsyncAddRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::AddRes>> PrepareAsyncAdd(::grpc::ClientContext* context, const ::InforGuard_::AddReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::AddRes>>(PrepareAsyncAddRaw(context, request, cq));
    }
    ::grpc::Status Remove(::grpc::ClientContext* context, const ::InforGuard_::RemoveReq& request, ::InforGuard_::RemoveRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::RemoveRes>> AsyncRemove(::grpc::ClientContext* context, const ::InforGuard_::RemoveReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::RemoveRes>>(AsyncRemoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::RemoveRes>> PrepareAsyncRemove(::grpc::ClientContext* context, const ::InforGuard_::RemoveReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::RemoveRes>>(PrepareAsyncRemoveRaw(context, request, cq));
    }
    ::grpc::Status Rename(::grpc::ClientContext* context, const ::InforGuard_::RenameReq& request, ::InforGuard_::RenameRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::RenameRes>> AsyncRename(::grpc::ClientContext* context, const ::InforGuard_::RenameReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::RenameRes>>(AsyncRenameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::RenameRes>> PrepareAsyncRename(::grpc::ClientContext* context, const ::InforGuard_::RenameReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::RenameRes>>(PrepareAsyncRenameRaw(context, request, cq));
    }
    ::grpc::Status Verify(::grpc::ClientContext* context, const ::InforGuard_::VerifyReq& request, ::InforGuard_::VerifyRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::VerifyRes>> AsyncVerify(::grpc::ClientContext* context, const ::InforGuard_::VerifyReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::VerifyRes>>(AsyncVerifyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::VerifyRes>> PrepareAsyncVerify(::grpc::ClientContext* context, const ::InforGuard_::VerifyReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::VerifyRes>>(PrepareAsyncVerifyRaw(context, request, cq));
    }
    ::grpc::Status VerifyForFilter(::grpc::ClientContext* context, const ::InforGuard_::VerifyForFilterReq& request, ::InforGuard_::VerifyForFilterRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::VerifyForFilterRes>> AsyncVerifyForFilter(::grpc::ClientContext* context, const ::InforGuard_::VerifyForFilterReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::VerifyForFilterRes>>(AsyncVerifyForFilterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::VerifyForFilterRes>> PrepareAsyncVerifyForFilter(::grpc::ClientContext* context, const ::InforGuard_::VerifyForFilterReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::VerifyForFilterRes>>(PrepareAsyncVerifyForFilterRaw(context, request, cq));
    }
    ::grpc::Status RequestResume(::grpc::ClientContext* context, const ::InforGuard_::RequestResumeReq& request, ::InforGuard_::RequestResumeRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::RequestResumeRes>> AsyncRequestResume(::grpc::ClientContext* context, const ::InforGuard_::RequestResumeReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::RequestResumeRes>>(AsyncRequestResumeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::RequestResumeRes>> PrepareAsyncRequestResume(::grpc::ClientContext* context, const ::InforGuard_::RequestResumeReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InforGuard_::RequestResumeRes>>(PrepareAsyncRequestResumeRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Check(::grpc::ClientContext* context, const ::InforGuard_::CheckReq* request, ::InforGuard_::CheckRes* response, std::function<void(::grpc::Status)>) override;
      void Check(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::CheckRes* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Check(::grpc::ClientContext* context, const ::InforGuard_::CheckReq* request, ::InforGuard_::CheckRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Check(::grpc::ClientContext* context, const ::InforGuard_::CheckReq* request, ::InforGuard_::CheckRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Check(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::CheckRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Check(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::CheckRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Set(::grpc::ClientContext* context, const ::InforGuard_::SetReq* request, ::InforGuard_::SetRes* response, std::function<void(::grpc::Status)>) override;
      void Set(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::SetRes* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Set(::grpc::ClientContext* context, const ::InforGuard_::SetReq* request, ::InforGuard_::SetRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Set(::grpc::ClientContext* context, const ::InforGuard_::SetReq* request, ::InforGuard_::SetRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Set(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::SetRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Set(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::SetRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Get(::grpc::ClientContext* context, const ::InforGuard_::GetReq* request, ::InforGuard_::GetRes* response, std::function<void(::grpc::Status)>) override;
      void Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetRes* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Get(::grpc::ClientContext* context, const ::InforGuard_::GetReq* request, ::InforGuard_::GetRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Get(::grpc::ClientContext* context, const ::InforGuard_::GetReq* request, ::InforGuard_::GetRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Add(::grpc::ClientContext* context, const ::InforGuard_::AddReq* request, ::InforGuard_::AddRes* response, std::function<void(::grpc::Status)>) override;
      void Add(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::AddRes* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Add(::grpc::ClientContext* context, const ::InforGuard_::AddReq* request, ::InforGuard_::AddRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Add(::grpc::ClientContext* context, const ::InforGuard_::AddReq* request, ::InforGuard_::AddRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Add(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::AddRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Add(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::AddRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Remove(::grpc::ClientContext* context, const ::InforGuard_::RemoveReq* request, ::InforGuard_::RemoveRes* response, std::function<void(::grpc::Status)>) override;
      void Remove(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::RemoveRes* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Remove(::grpc::ClientContext* context, const ::InforGuard_::RemoveReq* request, ::InforGuard_::RemoveRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Remove(::grpc::ClientContext* context, const ::InforGuard_::RemoveReq* request, ::InforGuard_::RemoveRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Remove(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::RemoveRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Remove(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::RemoveRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Rename(::grpc::ClientContext* context, const ::InforGuard_::RenameReq* request, ::InforGuard_::RenameRes* response, std::function<void(::grpc::Status)>) override;
      void Rename(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::RenameRes* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Rename(::grpc::ClientContext* context, const ::InforGuard_::RenameReq* request, ::InforGuard_::RenameRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Rename(::grpc::ClientContext* context, const ::InforGuard_::RenameReq* request, ::InforGuard_::RenameRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Rename(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::RenameRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Rename(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::RenameRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Verify(::grpc::ClientContext* context, const ::InforGuard_::VerifyReq* request, ::InforGuard_::VerifyRes* response, std::function<void(::grpc::Status)>) override;
      void Verify(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::VerifyRes* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Verify(::grpc::ClientContext* context, const ::InforGuard_::VerifyReq* request, ::InforGuard_::VerifyRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Verify(::grpc::ClientContext* context, const ::InforGuard_::VerifyReq* request, ::InforGuard_::VerifyRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Verify(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::VerifyRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Verify(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::VerifyRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void VerifyForFilter(::grpc::ClientContext* context, const ::InforGuard_::VerifyForFilterReq* request, ::InforGuard_::VerifyForFilterRes* response, std::function<void(::grpc::Status)>) override;
      void VerifyForFilter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::VerifyForFilterRes* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void VerifyForFilter(::grpc::ClientContext* context, const ::InforGuard_::VerifyForFilterReq* request, ::InforGuard_::VerifyForFilterRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void VerifyForFilter(::grpc::ClientContext* context, const ::InforGuard_::VerifyForFilterReq* request, ::InforGuard_::VerifyForFilterRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void VerifyForFilter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::VerifyForFilterRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void VerifyForFilter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::VerifyForFilterRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RequestResume(::grpc::ClientContext* context, const ::InforGuard_::RequestResumeReq* request, ::InforGuard_::RequestResumeRes* response, std::function<void(::grpc::Status)>) override;
      void RequestResume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::RequestResumeRes* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RequestResume(::grpc::ClientContext* context, const ::InforGuard_::RequestResumeReq* request, ::InforGuard_::RequestResumeRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RequestResume(::grpc::ClientContext* context, const ::InforGuard_::RequestResumeReq* request, ::InforGuard_::RequestResumeRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RequestResume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::RequestResumeRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RequestResume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::RequestResumeRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::InforGuard_::CheckRes>* AsyncCheckRaw(::grpc::ClientContext* context, const ::InforGuard_::CheckReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::InforGuard_::CheckRes>* PrepareAsyncCheckRaw(::grpc::ClientContext* context, const ::InforGuard_::CheckReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::InforGuard_::SetRes>* AsyncSetRaw(::grpc::ClientContext* context, const ::InforGuard_::SetReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::InforGuard_::SetRes>* PrepareAsyncSetRaw(::grpc::ClientContext* context, const ::InforGuard_::SetReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::InforGuard_::GetRes>* AsyncGetRaw(::grpc::ClientContext* context, const ::InforGuard_::GetReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::InforGuard_::GetRes>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::InforGuard_::GetReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::InforGuard_::AddRes>* AsyncAddRaw(::grpc::ClientContext* context, const ::InforGuard_::AddReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::InforGuard_::AddRes>* PrepareAsyncAddRaw(::grpc::ClientContext* context, const ::InforGuard_::AddReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::InforGuard_::RemoveRes>* AsyncRemoveRaw(::grpc::ClientContext* context, const ::InforGuard_::RemoveReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::InforGuard_::RemoveRes>* PrepareAsyncRemoveRaw(::grpc::ClientContext* context, const ::InforGuard_::RemoveReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::InforGuard_::RenameRes>* AsyncRenameRaw(::grpc::ClientContext* context, const ::InforGuard_::RenameReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::InforGuard_::RenameRes>* PrepareAsyncRenameRaw(::grpc::ClientContext* context, const ::InforGuard_::RenameReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::InforGuard_::VerifyRes>* AsyncVerifyRaw(::grpc::ClientContext* context, const ::InforGuard_::VerifyReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::InforGuard_::VerifyRes>* PrepareAsyncVerifyRaw(::grpc::ClientContext* context, const ::InforGuard_::VerifyReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::InforGuard_::VerifyForFilterRes>* AsyncVerifyForFilterRaw(::grpc::ClientContext* context, const ::InforGuard_::VerifyForFilterReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::InforGuard_::VerifyForFilterRes>* PrepareAsyncVerifyForFilterRaw(::grpc::ClientContext* context, const ::InforGuard_::VerifyForFilterReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::InforGuard_::RequestResumeRes>* AsyncRequestResumeRaw(::grpc::ClientContext* context, const ::InforGuard_::RequestResumeReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::InforGuard_::RequestResumeRes>* PrepareAsyncRequestResumeRaw(::grpc::ClientContext* context, const ::InforGuard_::RequestResumeReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Check_;
    const ::grpc::internal::RpcMethod rpcmethod_Set_;
    const ::grpc::internal::RpcMethod rpcmethod_Get_;
    const ::grpc::internal::RpcMethod rpcmethod_Add_;
    const ::grpc::internal::RpcMethod rpcmethod_Remove_;
    const ::grpc::internal::RpcMethod rpcmethod_Rename_;
    const ::grpc::internal::RpcMethod rpcmethod_Verify_;
    const ::grpc::internal::RpcMethod rpcmethod_VerifyForFilter_;
    const ::grpc::internal::RpcMethod rpcmethod_RequestResume_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Check(::grpc::ServerContext* context, const ::InforGuard_::CheckReq* request, ::InforGuard_::CheckRes* response);
    virtual ::grpc::Status Set(::grpc::ServerContext* context, const ::InforGuard_::SetReq* request, ::InforGuard_::SetRes* response);
    virtual ::grpc::Status Get(::grpc::ServerContext* context, const ::InforGuard_::GetReq* request, ::InforGuard_::GetRes* response);
    virtual ::grpc::Status Add(::grpc::ServerContext* context, const ::InforGuard_::AddReq* request, ::InforGuard_::AddRes* response);
    virtual ::grpc::Status Remove(::grpc::ServerContext* context, const ::InforGuard_::RemoveReq* request, ::InforGuard_::RemoveRes* response);
    virtual ::grpc::Status Rename(::grpc::ServerContext* context, const ::InforGuard_::RenameReq* request, ::InforGuard_::RenameRes* response);
    virtual ::grpc::Status Verify(::grpc::ServerContext* context, const ::InforGuard_::VerifyReq* request, ::InforGuard_::VerifyRes* response);
    virtual ::grpc::Status VerifyForFilter(::grpc::ServerContext* context, const ::InforGuard_::VerifyForFilterReq* request, ::InforGuard_::VerifyForFilterRes* response);
    virtual ::grpc::Status RequestResume(::grpc::ServerContext* context, const ::InforGuard_::RequestResumeReq* request, ::InforGuard_::RequestResumeRes* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Check() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Check(::grpc::ServerContext* /*context*/, const ::InforGuard_::CheckReq* /*request*/, ::InforGuard_::CheckRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheck(::grpc::ServerContext* context, ::InforGuard_::CheckReq* request, ::grpc::ServerAsyncResponseWriter< ::InforGuard_::CheckRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Set() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Set(::grpc::ServerContext* /*context*/, const ::InforGuard_::SetReq* /*request*/, ::InforGuard_::SetRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSet(::grpc::ServerContext* context, ::InforGuard_::SetReq* request, ::grpc::ServerAsyncResponseWriter< ::InforGuard_::SetRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Get() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::InforGuard_::GetReq* /*request*/, ::InforGuard_::GetRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::InforGuard_::GetReq* request, ::grpc::ServerAsyncResponseWriter< ::InforGuard_::GetRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Add() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::InforGuard_::AddReq* /*request*/, ::InforGuard_::AddRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAdd(::grpc::ServerContext* context, ::InforGuard_::AddReq* request, ::grpc::ServerAsyncResponseWriter< ::InforGuard_::AddRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Remove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Remove() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Remove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Remove(::grpc::ServerContext* /*context*/, const ::InforGuard_::RemoveReq* /*request*/, ::InforGuard_::RemoveRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemove(::grpc::ServerContext* context, ::InforGuard_::RemoveReq* request, ::grpc::ServerAsyncResponseWriter< ::InforGuard_::RemoveRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Rename() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rename(::grpc::ServerContext* /*context*/, const ::InforGuard_::RenameReq* /*request*/, ::InforGuard_::RenameRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRename(::grpc::ServerContext* context, ::InforGuard_::RenameReq* request, ::grpc::ServerAsyncResponseWriter< ::InforGuard_::RenameRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Verify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Verify() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Verify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Verify(::grpc::ServerContext* /*context*/, const ::InforGuard_::VerifyReq* /*request*/, ::InforGuard_::VerifyRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerify(::grpc::ServerContext* context, ::InforGuard_::VerifyReq* request, ::grpc::ServerAsyncResponseWriter< ::InforGuard_::VerifyRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VerifyForFilter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_VerifyForFilter() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_VerifyForFilter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyForFilter(::grpc::ServerContext* /*context*/, const ::InforGuard_::VerifyForFilterReq* /*request*/, ::InforGuard_::VerifyForFilterRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifyForFilter(::grpc::ServerContext* context, ::InforGuard_::VerifyForFilterReq* request, ::grpc::ServerAsyncResponseWriter< ::InforGuard_::VerifyForFilterRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestResume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestResume() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_RequestResume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestResume(::grpc::ServerContext* /*context*/, const ::InforGuard_::RequestResumeReq* /*request*/, ::InforGuard_::RequestResumeRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestResume(::grpc::ServerContext* context, ::InforGuard_::RequestResumeReq* request, ::grpc::ServerAsyncResponseWriter< ::InforGuard_::RequestResumeRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Check<WithAsyncMethod_Set<WithAsyncMethod_Get<WithAsyncMethod_Add<WithAsyncMethod_Remove<WithAsyncMethod_Rename<WithAsyncMethod_Verify<WithAsyncMethod_VerifyForFilter<WithAsyncMethod_RequestResume<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Check() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::InforGuard_::CheckReq, ::InforGuard_::CheckRes>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::InforGuard_::CheckReq* request, ::InforGuard_::CheckRes* response) { return this->Check(context, request, response); }));}
    void SetMessageAllocatorFor_Check(
        ::grpc::experimental::MessageAllocator< ::InforGuard_::CheckReq, ::InforGuard_::CheckRes>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::InforGuard_::CheckReq, ::InforGuard_::CheckRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Check(::grpc::ServerContext* /*context*/, const ::InforGuard_::CheckReq* /*request*/, ::InforGuard_::CheckRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Check(
      ::grpc::CallbackServerContext* /*context*/, const ::InforGuard_::CheckReq* /*request*/, ::InforGuard_::CheckRes* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Check(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::InforGuard_::CheckReq* /*request*/, ::InforGuard_::CheckRes* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Set() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::InforGuard_::SetReq, ::InforGuard_::SetRes>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::InforGuard_::SetReq* request, ::InforGuard_::SetRes* response) { return this->Set(context, request, response); }));}
    void SetMessageAllocatorFor_Set(
        ::grpc::experimental::MessageAllocator< ::InforGuard_::SetReq, ::InforGuard_::SetRes>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::InforGuard_::SetReq, ::InforGuard_::SetRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Set(::grpc::ServerContext* /*context*/, const ::InforGuard_::SetReq* /*request*/, ::InforGuard_::SetRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Set(
      ::grpc::CallbackServerContext* /*context*/, const ::InforGuard_::SetReq* /*request*/, ::InforGuard_::SetRes* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Set(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::InforGuard_::SetReq* /*request*/, ::InforGuard_::SetRes* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Get() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::InforGuard_::GetReq, ::InforGuard_::GetRes>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::InforGuard_::GetReq* request, ::InforGuard_::GetRes* response) { return this->Get(context, request, response); }));}
    void SetMessageAllocatorFor_Get(
        ::grpc::experimental::MessageAllocator< ::InforGuard_::GetReq, ::InforGuard_::GetRes>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::InforGuard_::GetReq, ::InforGuard_::GetRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::InforGuard_::GetReq* /*request*/, ::InforGuard_::GetRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::InforGuard_::GetReq* /*request*/, ::InforGuard_::GetRes* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Get(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::InforGuard_::GetReq* /*request*/, ::InforGuard_::GetRes* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Add() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::InforGuard_::AddReq, ::InforGuard_::AddRes>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::InforGuard_::AddReq* request, ::InforGuard_::AddRes* response) { return this->Add(context, request, response); }));}
    void SetMessageAllocatorFor_Add(
        ::grpc::experimental::MessageAllocator< ::InforGuard_::AddReq, ::InforGuard_::AddRes>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::InforGuard_::AddReq, ::InforGuard_::AddRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::InforGuard_::AddReq* /*request*/, ::InforGuard_::AddRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Add(
      ::grpc::CallbackServerContext* /*context*/, const ::InforGuard_::AddReq* /*request*/, ::InforGuard_::AddRes* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Add(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::InforGuard_::AddReq* /*request*/, ::InforGuard_::AddRes* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Remove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Remove() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::InforGuard_::RemoveReq, ::InforGuard_::RemoveRes>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::InforGuard_::RemoveReq* request, ::InforGuard_::RemoveRes* response) { return this->Remove(context, request, response); }));}
    void SetMessageAllocatorFor_Remove(
        ::grpc::experimental::MessageAllocator< ::InforGuard_::RemoveReq, ::InforGuard_::RemoveRes>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::InforGuard_::RemoveReq, ::InforGuard_::RemoveRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Remove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Remove(::grpc::ServerContext* /*context*/, const ::InforGuard_::RemoveReq* /*request*/, ::InforGuard_::RemoveRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Remove(
      ::grpc::CallbackServerContext* /*context*/, const ::InforGuard_::RemoveReq* /*request*/, ::InforGuard_::RemoveRes* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Remove(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::InforGuard_::RemoveReq* /*request*/, ::InforGuard_::RemoveRes* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Rename() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::InforGuard_::RenameReq, ::InforGuard_::RenameRes>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::InforGuard_::RenameReq* request, ::InforGuard_::RenameRes* response) { return this->Rename(context, request, response); }));}
    void SetMessageAllocatorFor_Rename(
        ::grpc::experimental::MessageAllocator< ::InforGuard_::RenameReq, ::InforGuard_::RenameRes>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::InforGuard_::RenameReq, ::InforGuard_::RenameRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rename(::grpc::ServerContext* /*context*/, const ::InforGuard_::RenameReq* /*request*/, ::InforGuard_::RenameRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Rename(
      ::grpc::CallbackServerContext* /*context*/, const ::InforGuard_::RenameReq* /*request*/, ::InforGuard_::RenameRes* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Rename(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::InforGuard_::RenameReq* /*request*/, ::InforGuard_::RenameRes* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Verify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Verify() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::InforGuard_::VerifyReq, ::InforGuard_::VerifyRes>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::InforGuard_::VerifyReq* request, ::InforGuard_::VerifyRes* response) { return this->Verify(context, request, response); }));}
    void SetMessageAllocatorFor_Verify(
        ::grpc::experimental::MessageAllocator< ::InforGuard_::VerifyReq, ::InforGuard_::VerifyRes>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::InforGuard_::VerifyReq, ::InforGuard_::VerifyRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Verify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Verify(::grpc::ServerContext* /*context*/, const ::InforGuard_::VerifyReq* /*request*/, ::InforGuard_::VerifyRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Verify(
      ::grpc::CallbackServerContext* /*context*/, const ::InforGuard_::VerifyReq* /*request*/, ::InforGuard_::VerifyRes* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Verify(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::InforGuard_::VerifyReq* /*request*/, ::InforGuard_::VerifyRes* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_VerifyForFilter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_VerifyForFilter() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::InforGuard_::VerifyForFilterReq, ::InforGuard_::VerifyForFilterRes>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::InforGuard_::VerifyForFilterReq* request, ::InforGuard_::VerifyForFilterRes* response) { return this->VerifyForFilter(context, request, response); }));}
    void SetMessageAllocatorFor_VerifyForFilter(
        ::grpc::experimental::MessageAllocator< ::InforGuard_::VerifyForFilterReq, ::InforGuard_::VerifyForFilterRes>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::InforGuard_::VerifyForFilterReq, ::InforGuard_::VerifyForFilterRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_VerifyForFilter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyForFilter(::grpc::ServerContext* /*context*/, const ::InforGuard_::VerifyForFilterReq* /*request*/, ::InforGuard_::VerifyForFilterRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* VerifyForFilter(
      ::grpc::CallbackServerContext* /*context*/, const ::InforGuard_::VerifyForFilterReq* /*request*/, ::InforGuard_::VerifyForFilterRes* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* VerifyForFilter(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::InforGuard_::VerifyForFilterReq* /*request*/, ::InforGuard_::VerifyForFilterRes* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RequestResume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RequestResume() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::InforGuard_::RequestResumeReq, ::InforGuard_::RequestResumeRes>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::InforGuard_::RequestResumeReq* request, ::InforGuard_::RequestResumeRes* response) { return this->RequestResume(context, request, response); }));}
    void SetMessageAllocatorFor_RequestResume(
        ::grpc::experimental::MessageAllocator< ::InforGuard_::RequestResumeReq, ::InforGuard_::RequestResumeRes>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::InforGuard_::RequestResumeReq, ::InforGuard_::RequestResumeRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RequestResume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestResume(::grpc::ServerContext* /*context*/, const ::InforGuard_::RequestResumeReq* /*request*/, ::InforGuard_::RequestResumeRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RequestResume(
      ::grpc::CallbackServerContext* /*context*/, const ::InforGuard_::RequestResumeReq* /*request*/, ::InforGuard_::RequestResumeRes* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RequestResume(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::InforGuard_::RequestResumeReq* /*request*/, ::InforGuard_::RequestResumeRes* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Check<ExperimentalWithCallbackMethod_Set<ExperimentalWithCallbackMethod_Get<ExperimentalWithCallbackMethod_Add<ExperimentalWithCallbackMethod_Remove<ExperimentalWithCallbackMethod_Rename<ExperimentalWithCallbackMethod_Verify<ExperimentalWithCallbackMethod_VerifyForFilter<ExperimentalWithCallbackMethod_RequestResume<Service > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Check<ExperimentalWithCallbackMethod_Set<ExperimentalWithCallbackMethod_Get<ExperimentalWithCallbackMethod_Add<ExperimentalWithCallbackMethod_Remove<ExperimentalWithCallbackMethod_Rename<ExperimentalWithCallbackMethod_Verify<ExperimentalWithCallbackMethod_VerifyForFilter<ExperimentalWithCallbackMethod_RequestResume<Service > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Check() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Check(::grpc::ServerContext* /*context*/, const ::InforGuard_::CheckReq* /*request*/, ::InforGuard_::CheckRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Set() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Set(::grpc::ServerContext* /*context*/, const ::InforGuard_::SetReq* /*request*/, ::InforGuard_::SetRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Get() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::InforGuard_::GetReq* /*request*/, ::InforGuard_::GetRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Add() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::InforGuard_::AddReq* /*request*/, ::InforGuard_::AddRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Remove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Remove() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Remove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Remove(::grpc::ServerContext* /*context*/, const ::InforGuard_::RemoveReq* /*request*/, ::InforGuard_::RemoveRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Rename() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rename(::grpc::ServerContext* /*context*/, const ::InforGuard_::RenameReq* /*request*/, ::InforGuard_::RenameRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Verify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Verify() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Verify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Verify(::grpc::ServerContext* /*context*/, const ::InforGuard_::VerifyReq* /*request*/, ::InforGuard_::VerifyRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VerifyForFilter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_VerifyForFilter() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_VerifyForFilter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyForFilter(::grpc::ServerContext* /*context*/, const ::InforGuard_::VerifyForFilterReq* /*request*/, ::InforGuard_::VerifyForFilterRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RequestResume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestResume() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_RequestResume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestResume(::grpc::ServerContext* /*context*/, const ::InforGuard_::RequestResumeReq* /*request*/, ::InforGuard_::RequestResumeRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Check() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Check(::grpc::ServerContext* /*context*/, const ::InforGuard_::CheckReq* /*request*/, ::InforGuard_::CheckRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheck(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Set() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Set(::grpc::ServerContext* /*context*/, const ::InforGuard_::SetReq* /*request*/, ::InforGuard_::SetRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Get() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::InforGuard_::GetReq* /*request*/, ::InforGuard_::GetRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Add() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::InforGuard_::AddReq* /*request*/, ::InforGuard_::AddRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAdd(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Remove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Remove() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Remove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Remove(::grpc::ServerContext* /*context*/, const ::InforGuard_::RemoveReq* /*request*/, ::InforGuard_::RemoveRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemove(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Rename() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rename(::grpc::ServerContext* /*context*/, const ::InforGuard_::RenameReq* /*request*/, ::InforGuard_::RenameRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRename(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Verify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Verify() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_Verify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Verify(::grpc::ServerContext* /*context*/, const ::InforGuard_::VerifyReq* /*request*/, ::InforGuard_::VerifyRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerify(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VerifyForFilter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_VerifyForFilter() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_VerifyForFilter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyForFilter(::grpc::ServerContext* /*context*/, const ::InforGuard_::VerifyForFilterReq* /*request*/, ::InforGuard_::VerifyForFilterRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifyForFilter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestResume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestResume() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_RequestResume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestResume(::grpc::ServerContext* /*context*/, const ::InforGuard_::RequestResumeReq* /*request*/, ::InforGuard_::RequestResumeRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestResume(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Check() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Check(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Check(::grpc::ServerContext* /*context*/, const ::InforGuard_::CheckReq* /*request*/, ::InforGuard_::CheckRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Check(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Check(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Set() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Set(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Set(::grpc::ServerContext* /*context*/, const ::InforGuard_::SetReq* /*request*/, ::InforGuard_::SetRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Set(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Set(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Get() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Get(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::InforGuard_::GetReq* /*request*/, ::InforGuard_::GetRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Get(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Add() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Add(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::InforGuard_::AddReq* /*request*/, ::InforGuard_::AddRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Add(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Add(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Remove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Remove() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Remove(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Remove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Remove(::grpc::ServerContext* /*context*/, const ::InforGuard_::RemoveReq* /*request*/, ::InforGuard_::RemoveRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Remove(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Remove(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Rename() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Rename(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rename(::grpc::ServerContext* /*context*/, const ::InforGuard_::RenameReq* /*request*/, ::InforGuard_::RenameRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Rename(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Rename(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Verify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Verify() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Verify(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Verify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Verify(::grpc::ServerContext* /*context*/, const ::InforGuard_::VerifyReq* /*request*/, ::InforGuard_::VerifyRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Verify(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Verify(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_VerifyForFilter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_VerifyForFilter() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->VerifyForFilter(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_VerifyForFilter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyForFilter(::grpc::ServerContext* /*context*/, const ::InforGuard_::VerifyForFilterReq* /*request*/, ::InforGuard_::VerifyForFilterRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* VerifyForFilter(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* VerifyForFilter(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RequestResume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RequestResume() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestResume(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RequestResume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestResume(::grpc::ServerContext* /*context*/, const ::InforGuard_::RequestResumeReq* /*request*/, ::InforGuard_::RequestResumeRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RequestResume(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RequestResume(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Check() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::InforGuard_::CheckReq, ::InforGuard_::CheckRes>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::InforGuard_::CheckReq, ::InforGuard_::CheckRes>* streamer) {
                       return this->StreamedCheck(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Check(::grpc::ServerContext* /*context*/, const ::InforGuard_::CheckReq* /*request*/, ::InforGuard_::CheckRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheck(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::InforGuard_::CheckReq,::InforGuard_::CheckRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Set() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::InforGuard_::SetReq, ::InforGuard_::SetRes>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::InforGuard_::SetReq, ::InforGuard_::SetRes>* streamer) {
                       return this->StreamedSet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Set(::grpc::ServerContext* /*context*/, const ::InforGuard_::SetReq* /*request*/, ::InforGuard_::SetRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::InforGuard_::SetReq,::InforGuard_::SetRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Get() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::InforGuard_::GetReq, ::InforGuard_::GetRes>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::InforGuard_::GetReq, ::InforGuard_::GetRes>* streamer) {
                       return this->StreamedGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::InforGuard_::GetReq* /*request*/, ::InforGuard_::GetRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::InforGuard_::GetReq,::InforGuard_::GetRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Add() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::InforGuard_::AddReq, ::InforGuard_::AddRes>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::InforGuard_::AddReq, ::InforGuard_::AddRes>* streamer) {
                       return this->StreamedAdd(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::InforGuard_::AddReq* /*request*/, ::InforGuard_::AddRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAdd(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::InforGuard_::AddReq,::InforGuard_::AddRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Remove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Remove() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::InforGuard_::RemoveReq, ::InforGuard_::RemoveRes>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::InforGuard_::RemoveReq, ::InforGuard_::RemoveRes>* streamer) {
                       return this->StreamedRemove(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Remove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Remove(::grpc::ServerContext* /*context*/, const ::InforGuard_::RemoveReq* /*request*/, ::InforGuard_::RemoveRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemove(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::InforGuard_::RemoveReq,::InforGuard_::RemoveRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Rename() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::InforGuard_::RenameReq, ::InforGuard_::RenameRes>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::InforGuard_::RenameReq, ::InforGuard_::RenameRes>* streamer) {
                       return this->StreamedRename(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Rename(::grpc::ServerContext* /*context*/, const ::InforGuard_::RenameReq* /*request*/, ::InforGuard_::RenameRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRename(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::InforGuard_::RenameReq,::InforGuard_::RenameRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Verify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Verify() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::InforGuard_::VerifyReq, ::InforGuard_::VerifyRes>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::InforGuard_::VerifyReq, ::InforGuard_::VerifyRes>* streamer) {
                       return this->StreamedVerify(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Verify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Verify(::grpc::ServerContext* /*context*/, const ::InforGuard_::VerifyReq* /*request*/, ::InforGuard_::VerifyRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVerify(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::InforGuard_::VerifyReq,::InforGuard_::VerifyRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VerifyForFilter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_VerifyForFilter() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::InforGuard_::VerifyForFilterReq, ::InforGuard_::VerifyForFilterRes>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::InforGuard_::VerifyForFilterReq, ::InforGuard_::VerifyForFilterRes>* streamer) {
                       return this->StreamedVerifyForFilter(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_VerifyForFilter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VerifyForFilter(::grpc::ServerContext* /*context*/, const ::InforGuard_::VerifyForFilterReq* /*request*/, ::InforGuard_::VerifyForFilterRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVerifyForFilter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::InforGuard_::VerifyForFilterReq,::InforGuard_::VerifyForFilterRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestResume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestResume() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::InforGuard_::RequestResumeReq, ::InforGuard_::RequestResumeRes>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::InforGuard_::RequestResumeReq, ::InforGuard_::RequestResumeRes>* streamer) {
                       return this->StreamedRequestResume(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestResume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestResume(::grpc::ServerContext* /*context*/, const ::InforGuard_::RequestResumeReq* /*request*/, ::InforGuard_::RequestResumeRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestResume(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::InforGuard_::RequestResumeReq,::InforGuard_::RequestResumeRes>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Check<WithStreamedUnaryMethod_Set<WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Add<WithStreamedUnaryMethod_Remove<WithStreamedUnaryMethod_Rename<WithStreamedUnaryMethod_Verify<WithStreamedUnaryMethod_VerifyForFilter<WithStreamedUnaryMethod_RequestResume<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Check<WithStreamedUnaryMethod_Set<WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Add<WithStreamedUnaryMethod_Remove<WithStreamedUnaryMethod_Rename<WithStreamedUnaryMethod_Verify<WithStreamedUnaryMethod_VerifyForFilter<WithStreamedUnaryMethod_RequestResume<Service > > > > > > > > > StreamedService;
};

}  // namespace InforGuard_


#endif  // GRPC_NetWaterMark_2eproto__INCLUDED
