// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NetWaterMark.proto

#include "NetWaterMark.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Metadata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExceptionError_Metadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Metadata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_netCallData_Metadata_2eproto;
namespace InforGuard_ {
class SetReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetReq> _instance;
} _SetReq_default_instance_;
class SetResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRes> _instance;
} _SetRes_default_instance_;
class GetReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetReq> _instance;
} _GetReq_default_instance_;
class GetResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRes> _instance;
} _GetRes_default_instance_;
class AddReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddReq> _instance;
} _AddReq_default_instance_;
class AddResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddRes> _instance;
} _AddRes_default_instance_;
class RemoveReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveReq> _instance;
} _RemoveReq_default_instance_;
class RemoveResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveRes> _instance;
} _RemoveRes_default_instance_;
class RenameReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RenameReq> _instance;
} _RenameReq_default_instance_;
class RenameResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RenameRes> _instance;
} _RenameRes_default_instance_;
class VerifyReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VerifyReq> _instance;
} _VerifyReq_default_instance_;
class VerifyResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VerifyRes> _instance;
} _VerifyRes_default_instance_;
class VerifyForFilterReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VerifyForFilterReq> _instance;
} _VerifyForFilterReq_default_instance_;
class VerifyForFilterResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VerifyForFilterRes> _instance;
} _VerifyForFilterRes_default_instance_;
class RequestResumeReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestResumeReq> _instance;
} _RequestResumeReq_default_instance_;
class RequestResumeResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestResumeRes> _instance;
} _RequestResumeRes_default_instance_;
}  // namespace InforGuard_
static void InitDefaultsscc_info_AddReq_NetWaterMark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_AddReq_default_instance_;
    new (ptr) ::InforGuard_::AddReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::AddReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddReq_NetWaterMark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddReq_NetWaterMark_2eproto}, {
      &scc_info_netCallData_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_AddRes_NetWaterMark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_AddRes_default_instance_;
    new (ptr) ::InforGuard_::AddRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::AddRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddRes_NetWaterMark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AddRes_NetWaterMark_2eproto}, {
      &scc_info_netCallData_Metadata_2eproto.base,
      &scc_info_ExceptionError_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_GetReq_NetWaterMark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_GetReq_default_instance_;
    new (ptr) ::InforGuard_::GetReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::GetReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetReq_NetWaterMark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetReq_NetWaterMark_2eproto}, {
      &scc_info_netCallData_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_GetRes_NetWaterMark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_GetRes_default_instance_;
    new (ptr) ::InforGuard_::GetRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::GetRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetRes_NetWaterMark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetRes_NetWaterMark_2eproto}, {
      &scc_info_netCallData_Metadata_2eproto.base,
      &scc_info_ExceptionError_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_RemoveReq_NetWaterMark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_RemoveReq_default_instance_;
    new (ptr) ::InforGuard_::RemoveReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::RemoveReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RemoveReq_NetWaterMark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RemoveReq_NetWaterMark_2eproto}, {
      &scc_info_netCallData_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_RemoveRes_NetWaterMark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_RemoveRes_default_instance_;
    new (ptr) ::InforGuard_::RemoveRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::RemoveRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RemoveRes_NetWaterMark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RemoveRes_NetWaterMark_2eproto}, {
      &scc_info_netCallData_Metadata_2eproto.base,
      &scc_info_ExceptionError_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_RenameReq_NetWaterMark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_RenameReq_default_instance_;
    new (ptr) ::InforGuard_::RenameReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::RenameReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RenameReq_NetWaterMark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RenameReq_NetWaterMark_2eproto}, {
      &scc_info_netCallData_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_RenameRes_NetWaterMark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_RenameRes_default_instance_;
    new (ptr) ::InforGuard_::RenameRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::RenameRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RenameRes_NetWaterMark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RenameRes_NetWaterMark_2eproto}, {
      &scc_info_netCallData_Metadata_2eproto.base,
      &scc_info_ExceptionError_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_RequestResumeReq_NetWaterMark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_RequestResumeReq_default_instance_;
    new (ptr) ::InforGuard_::RequestResumeReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::RequestResumeReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestResumeReq_NetWaterMark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestResumeReq_NetWaterMark_2eproto}, {}};

static void InitDefaultsscc_info_RequestResumeRes_NetWaterMark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_RequestResumeRes_default_instance_;
    new (ptr) ::InforGuard_::RequestResumeRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::RequestResumeRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestResumeRes_NetWaterMark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RequestResumeRes_NetWaterMark_2eproto}, {
      &scc_info_ExceptionError_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_SetReq_NetWaterMark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_SetReq_default_instance_;
    new (ptr) ::InforGuard_::SetReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::SetReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetReq_NetWaterMark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetReq_NetWaterMark_2eproto}, {
      &scc_info_netCallData_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_SetRes_NetWaterMark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_SetRes_default_instance_;
    new (ptr) ::InforGuard_::SetRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::SetRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SetRes_NetWaterMark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SetRes_NetWaterMark_2eproto}, {
      &scc_info_netCallData_Metadata_2eproto.base,
      &scc_info_ExceptionError_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_VerifyForFilterReq_NetWaterMark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_VerifyForFilterReq_default_instance_;
    new (ptr) ::InforGuard_::VerifyForFilterReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::VerifyForFilterReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VerifyForFilterReq_NetWaterMark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VerifyForFilterReq_NetWaterMark_2eproto}, {}};

static void InitDefaultsscc_info_VerifyForFilterRes_NetWaterMark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_VerifyForFilterRes_default_instance_;
    new (ptr) ::InforGuard_::VerifyForFilterRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::VerifyForFilterRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VerifyForFilterRes_NetWaterMark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VerifyForFilterRes_NetWaterMark_2eproto}, {
      &scc_info_ExceptionError_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_VerifyReq_NetWaterMark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_VerifyReq_default_instance_;
    new (ptr) ::InforGuard_::VerifyReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::VerifyReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VerifyReq_NetWaterMark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VerifyReq_NetWaterMark_2eproto}, {
      &scc_info_netCallData_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_VerifyRes_NetWaterMark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_VerifyRes_default_instance_;
    new (ptr) ::InforGuard_::VerifyRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::VerifyRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VerifyRes_NetWaterMark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_VerifyRes_NetWaterMark_2eproto}, {
      &scc_info_netCallData_Metadata_2eproto.base,
      &scc_info_ExceptionError_Metadata_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_NetWaterMark_2eproto[16];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_NetWaterMark_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_NetWaterMark_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_NetWaterMark_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::SetReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::SetReq, call_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::SetReq, file_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::SetReq, wm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::SetRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::SetRes, call_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::SetRes, ex_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::SetRes, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetReq, call_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetReq, file_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetRes, call_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetRes, ex_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetRes, wm_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::GetRes, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::AddReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::AddReq, call_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::AddReq, filepath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::AddRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::AddRes, call_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::AddRes, ex_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::AddRes, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::RemoveReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::RemoveReq, call_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::RemoveReq, filepath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::RemoveRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::RemoveRes, call_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::RemoveRes, ex_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::RemoveRes, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::RenameReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::RenameReq, call_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::RenameReq, oldfilename_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::RenameReq, newfilename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::RenameRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::RenameRes, call_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::RenameRes, ex_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::RenameRes, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::VerifyReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::VerifyReq, call_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::VerifyReq, sfilename_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::VerifyReq, nfilesize_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::VerifyReq, swm_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::VerifyReq, bsimplesync_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::VerifyRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::VerifyRes, call_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::VerifyRes, ex_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::VerifyRes, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::VerifyForFilterReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::VerifyForFilterReq, files_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::VerifyForFilterRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::VerifyForFilterRes, ex_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::VerifyForFilterRes, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::RequestResumeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::RequestResumeReq, filename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::RequestResumeRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::RequestResumeRes, ex_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::RequestResumeRes, ret_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::InforGuard_::SetReq)},
  { 8, -1, sizeof(::InforGuard_::SetRes)},
  { 16, -1, sizeof(::InforGuard_::GetReq)},
  { 23, -1, sizeof(::InforGuard_::GetRes)},
  { 32, -1, sizeof(::InforGuard_::AddReq)},
  { 39, -1, sizeof(::InforGuard_::AddRes)},
  { 47, -1, sizeof(::InforGuard_::RemoveReq)},
  { 54, -1, sizeof(::InforGuard_::RemoveRes)},
  { 62, -1, sizeof(::InforGuard_::RenameReq)},
  { 70, -1, sizeof(::InforGuard_::RenameRes)},
  { 78, -1, sizeof(::InforGuard_::VerifyReq)},
  { 88, -1, sizeof(::InforGuard_::VerifyRes)},
  { 96, -1, sizeof(::InforGuard_::VerifyForFilterReq)},
  { 102, -1, sizeof(::InforGuard_::VerifyForFilterRes)},
  { 109, -1, sizeof(::InforGuard_::RequestResumeReq)},
  { 115, -1, sizeof(::InforGuard_::RequestResumeRes)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_SetReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_SetRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_GetReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_GetRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_AddReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_AddRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_RemoveReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_RemoveRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_RenameReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_RenameRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_VerifyReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_VerifyRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_VerifyForFilterReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_VerifyForFilterRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_RequestResumeReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_RequestResumeRes_default_instance_),
};

const char descriptor_table_protodef_NetWaterMark_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022NetWaterMark.proto\022\013InforGuard_\032\016Metad"
  "ata.proto\"J\n\006SetReq\022&\n\004call\030\001 \001(\0132\030.Info"
  "rGuard_.netCallData\022\014\n\004file\030\002 \001(\014\022\n\n\002wm\030"
  "\003 \001(\014\"f\n\006SetRes\022&\n\004call\030\001 \001(\0132\030.InforGua"
  "rd_.netCallData\022\'\n\002ex\030\002 \001(\0132\033.InforGuard"
  "_.ExceptionError\022\013\n\003ret\030\003 \001(\005\">\n\006GetReq\022"
  "&\n\004call\030\001 \001(\0132\030.InforGuard_.netCallData\022"
  "\014\n\004file\030\002 \001(\014\"r\n\006GetRes\022&\n\004call\030\001 \001(\0132\030."
  "InforGuard_.netCallData\022\'\n\002ex\030\002 \001(\0132\033.In"
  "forGuard_.ExceptionError\022\n\n\002wm\030\003 \001(\014\022\013\n\003"
  "ret\030\004 \001(\005\"B\n\006AddReq\022&\n\004call\030\001 \001(\0132\030.Info"
  "rGuard_.netCallData\022\020\n\010filepath\030\002 \001(\014\"f\n"
  "\006AddRes\022&\n\004call\030\001 \001(\0132\030.InforGuard_.netC"
  "allData\022\'\n\002ex\030\002 \001(\0132\033.InforGuard_.Except"
  "ionError\022\013\n\003ret\030\003 \001(\005\"E\n\tRemoveReq\022&\n\004ca"
  "ll\030\001 \001(\0132\030.InforGuard_.netCallData\022\020\n\010fi"
  "lepath\030\002 \001(\014\"i\n\tRemoveRes\022&\n\004call\030\001 \001(\0132"
  "\030.InforGuard_.netCallData\022\'\n\002ex\030\002 \001(\0132\033."
  "InforGuard_.ExceptionError\022\013\n\003ret\030\003 \001(\005\""
  "]\n\tRenameReq\022&\n\004call\030\001 \001(\0132\030.InforGuard_"
  ".netCallData\022\023\n\013oldfilename\030\002 \001(\014\022\023\n\013new"
  "filename\030\003 \001(\014\"i\n\tRenameRes\022&\n\004call\030\001 \001("
  "\0132\030.InforGuard_.netCallData\022\'\n\002ex\030\002 \001(\0132"
  "\033.InforGuard_.ExceptionError\022\013\n\003ret\030\003 \001("
  "\005\"{\n\tVerifyReq\022&\n\004call\030\001 \001(\0132\030.InforGuar"
  "d_.netCallData\022\021\n\tsFileName\030\002 \001(\014\022\021\n\tnFi"
  "leSize\030\003 \001(\005\022\013\n\003sWm\030\004 \001(\014\022\023\n\013bSimpleSync"
  "\030\005 \001(\010\"i\n\tVerifyRes\022&\n\004call\030\001 \001(\0132\030.Info"
  "rGuard_.netCallData\022\'\n\002ex\030\002 \001(\0132\033.InforG"
  "uard_.ExceptionError\022\013\n\003ret\030\003 \001(\005\"#\n\022Ver"
  "ifyForFilterReq\022\r\n\005files\030\001 \001(\014\"J\n\022Verify"
  "ForFilterRes\022\'\n\002ex\030\001 \001(\0132\033.InforGuard_.E"
  "xceptionError\022\013\n\003ret\030\002 \001(\005\"$\n\020RequestRes"
  "umeReq\022\020\n\010filename\030\001 \001(\014\"H\n\020RequestResum"
  "eRes\022\'\n\002ex\030\001 \001(\0132\033.InforGuard_.Exception"
  "Error\022\013\n\003ret\030\002 \001(\0052\252\004\n\014NetWaterMark\0225\n\005C"
  "heck\022\025.InforGuard_.CheckReq\032\025.InforGuard"
  "_.CheckRes\022/\n\003Set\022\023.InforGuard_.SetReq\032\023"
  ".InforGuard_.SetRes\022/\n\003Get\022\023.InforGuard_"
  ".GetReq\032\023.InforGuard_.GetRes\022/\n\003Add\022\023.In"
  "forGuard_.AddReq\032\023.InforGuard_.AddRes\0228\n"
  "\006Remove\022\026.InforGuard_.RemoveReq\032\026.InforG"
  "uard_.RemoveRes\0228\n\006Rename\022\026.InforGuard_."
  "RenameReq\032\026.InforGuard_.RenameRes\0228\n\006Ver"
  "ify\022\026.InforGuard_.VerifyReq\032\026.InforGuard"
  "_.VerifyRes\022S\n\017VerifyForFilter\022\037.InforGu"
  "ard_.VerifyForFilterReq\032\037.InforGuard_.Ve"
  "rifyForFilterRes\022M\n\rRequestResume\022\035.Info"
  "rGuard_.RequestResumeReq\032\035.InforGuard_.R"
  "equestResumeResb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_NetWaterMark_2eproto_deps[1] = {
  &::descriptor_table_Metadata_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_NetWaterMark_2eproto_sccs[16] = {
  &scc_info_AddReq_NetWaterMark_2eproto.base,
  &scc_info_AddRes_NetWaterMark_2eproto.base,
  &scc_info_GetReq_NetWaterMark_2eproto.base,
  &scc_info_GetRes_NetWaterMark_2eproto.base,
  &scc_info_RemoveReq_NetWaterMark_2eproto.base,
  &scc_info_RemoveRes_NetWaterMark_2eproto.base,
  &scc_info_RenameReq_NetWaterMark_2eproto.base,
  &scc_info_RenameRes_NetWaterMark_2eproto.base,
  &scc_info_RequestResumeReq_NetWaterMark_2eproto.base,
  &scc_info_RequestResumeRes_NetWaterMark_2eproto.base,
  &scc_info_SetReq_NetWaterMark_2eproto.base,
  &scc_info_SetRes_NetWaterMark_2eproto.base,
  &scc_info_VerifyForFilterReq_NetWaterMark_2eproto.base,
  &scc_info_VerifyForFilterRes_NetWaterMark_2eproto.base,
  &scc_info_VerifyReq_NetWaterMark_2eproto.base,
  &scc_info_VerifyRes_NetWaterMark_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_NetWaterMark_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NetWaterMark_2eproto = {
  false, false, descriptor_table_protodef_NetWaterMark_2eproto, "NetWaterMark.proto", 1983,
  &descriptor_table_NetWaterMark_2eproto_once, descriptor_table_NetWaterMark_2eproto_sccs, descriptor_table_NetWaterMark_2eproto_deps, 16, 1,
  schemas, file_default_instances, TableStruct_NetWaterMark_2eproto::offsets,
  file_level_metadata_NetWaterMark_2eproto, 16, file_level_enum_descriptors_NetWaterMark_2eproto, file_level_service_descriptors_NetWaterMark_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_NetWaterMark_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_NetWaterMark_2eproto)), true);
namespace InforGuard_ {

// ===================================================================

void SetReq::InitAsDefaultInstance() {
  ::InforGuard_::_SetReq_default_instance_._instance.get_mutable()->call_ = const_cast< ::InforGuard_::netCallData*>(
      ::InforGuard_::netCallData::internal_default_instance());
}
class SetReq::_Internal {
 public:
  static const ::InforGuard_::netCallData& call(const SetReq* msg);
};

const ::InforGuard_::netCallData&
SetReq::_Internal::call(const SetReq* msg) {
  return *msg->call_;
}
void SetReq::clear_call() {
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
}
SetReq::SetReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.SetReq)
}
SetReq::SetReq(const SetReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file().empty()) {
    file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_file(),
      GetArena());
  }
  wm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_wm().empty()) {
    wm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_wm(),
      GetArena());
  }
  if (from._internal_has_call()) {
    call_ = new ::InforGuard_::netCallData(*from.call_);
  } else {
    call_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:InforGuard_.SetReq)
}

void SetReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetReq_NetWaterMark_2eproto.base);
  file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  call_ = nullptr;
}

SetReq::~SetReq() {
  // @@protoc_insertion_point(destructor:InforGuard_.SetReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete call_;
}

void SetReq::ArenaDtor(void* object) {
  SetReq* _this = reinterpret_cast< SetReq* >(object);
  (void)_this;
}
void SetReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetReq& SetReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetReq_NetWaterMark_2eproto.base);
  return *internal_default_instance();
}


void SetReq::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.SetReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  wm_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.netCallData call = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes file = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes wm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_wm();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.SetReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call(this), target, stream);
  }

  // bytes file = 2;
  if (this->file().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_file(), target);
  }

  // bytes wm = 3;
  if (this->wm().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_wm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.SetReq)
  return target;
}

size_t SetReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.SetReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes file = 2;
  if (this->file().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_file());
  }

  // bytes wm = 3;
  if (this->wm().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_wm());
  }

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.SetReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.SetReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.SetReq)
    MergeFrom(*source);
  }
}

void SetReq::MergeFrom(const SetReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.SetReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file().size() > 0) {
    _internal_set_file(from._internal_file());
  }
  if (from.wm().size() > 0) {
    _internal_set_wm(from._internal_wm());
  }
  if (from.has_call()) {
    _internal_mutable_call()->::InforGuard_::netCallData::MergeFrom(from._internal_call());
  }
}

void SetReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.SetReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetReq::CopyFrom(const SetReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.SetReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetReq::IsInitialized() const {
  return true;
}

void SetReq::InternalSwap(SetReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  file_.Swap(&other->file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  wm_.Swap(&other->wm_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(call_, other->call_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRes::InitAsDefaultInstance() {
  ::InforGuard_::_SetRes_default_instance_._instance.get_mutable()->call_ = const_cast< ::InforGuard_::netCallData*>(
      ::InforGuard_::netCallData::internal_default_instance());
  ::InforGuard_::_SetRes_default_instance_._instance.get_mutable()->ex_ = const_cast< ::InforGuard_::ExceptionError*>(
      ::InforGuard_::ExceptionError::internal_default_instance());
}
class SetRes::_Internal {
 public:
  static const ::InforGuard_::netCallData& call(const SetRes* msg);
  static const ::InforGuard_::ExceptionError& ex(const SetRes* msg);
};

const ::InforGuard_::netCallData&
SetRes::_Internal::call(const SetRes* msg) {
  return *msg->call_;
}
const ::InforGuard_::ExceptionError&
SetRes::_Internal::ex(const SetRes* msg) {
  return *msg->ex_;
}
void SetRes::clear_call() {
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
}
void SetRes::clear_ex() {
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
}
SetRes::SetRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.SetRes)
}
SetRes::SetRes(const SetRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_call()) {
    call_ = new ::InforGuard_::netCallData(*from.call_);
  } else {
    call_ = nullptr;
  }
  if (from._internal_has_ex()) {
    ex_ = new ::InforGuard_::ExceptionError(*from.ex_);
  } else {
    ex_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:InforGuard_.SetRes)
}

void SetRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetRes_NetWaterMark_2eproto.base);
  ::memset(&call_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&call_)) + sizeof(ret_));
}

SetRes::~SetRes() {
  // @@protoc_insertion_point(destructor:InforGuard_.SetRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete call_;
  if (this != internal_default_instance()) delete ex_;
}

void SetRes::ArenaDtor(void* object) {
  SetRes* _this = reinterpret_cast< SetRes* >(object);
  (void)_this;
}
void SetRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRes& SetRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRes_NetWaterMark_2eproto.base);
  return *internal_default_instance();
}


void SetRes::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.SetRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
  ret_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.netCallData call = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .InforGuard_.ExceptionError ex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.SetRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call(this), target, stream);
  }

  // .InforGuard_.ExceptionError ex = 2;
  if (this->has_ex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ex(this), target, stream);
  }

  // int32 ret = 3;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.SetRes)
  return target;
}

size_t SetRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.SetRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_);
  }

  // .InforGuard_.ExceptionError ex = 2;
  if (this->has_ex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ex_);
  }

  // int32 ret = 3;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.SetRes)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.SetRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.SetRes)
    MergeFrom(*source);
  }
}

void SetRes::MergeFrom(const SetRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.SetRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_call()) {
    _internal_mutable_call()->::InforGuard_::netCallData::MergeFrom(from._internal_call());
  }
  if (from.has_ex()) {
    _internal_mutable_ex()->::InforGuard_::ExceptionError::MergeFrom(from._internal_ex());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void SetRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.SetRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRes::CopyFrom(const SetRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.SetRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRes::IsInitialized() const {
  return true;
}

void SetRes::InternalSwap(SetRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetRes, ret_)
      + sizeof(SetRes::ret_)
      - PROTOBUF_FIELD_OFFSET(SetRes, call_)>(
          reinterpret_cast<char*>(&call_),
          reinterpret_cast<char*>(&other->call_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetReq::InitAsDefaultInstance() {
  ::InforGuard_::_GetReq_default_instance_._instance.get_mutable()->call_ = const_cast< ::InforGuard_::netCallData*>(
      ::InforGuard_::netCallData::internal_default_instance());
}
class GetReq::_Internal {
 public:
  static const ::InforGuard_::netCallData& call(const GetReq* msg);
};

const ::InforGuard_::netCallData&
GetReq::_Internal::call(const GetReq* msg) {
  return *msg->call_;
}
void GetReq::clear_call() {
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
}
GetReq::GetReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.GetReq)
}
GetReq::GetReq(const GetReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file().empty()) {
    file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_file(),
      GetArena());
  }
  if (from._internal_has_call()) {
    call_ = new ::InforGuard_::netCallData(*from.call_);
  } else {
    call_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:InforGuard_.GetReq)
}

void GetReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetReq_NetWaterMark_2eproto.base);
  file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  call_ = nullptr;
}

GetReq::~GetReq() {
  // @@protoc_insertion_point(destructor:InforGuard_.GetReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete call_;
}

void GetReq::ArenaDtor(void* object) {
  GetReq* _this = reinterpret_cast< GetReq* >(object);
  (void)_this;
}
void GetReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetReq& GetReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetReq_NetWaterMark_2eproto.base);
  return *internal_default_instance();
}


void GetReq::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.GetReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.netCallData call = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes file = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.GetReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call(this), target, stream);
  }

  // bytes file = 2;
  if (this->file().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_file(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.GetReq)
  return target;
}

size_t GetReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.GetReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes file = 2;
  if (this->file().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_file());
  }

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.GetReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.GetReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.GetReq)
    MergeFrom(*source);
  }
}

void GetReq::MergeFrom(const GetReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.GetReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file().size() > 0) {
    _internal_set_file(from._internal_file());
  }
  if (from.has_call()) {
    _internal_mutable_call()->::InforGuard_::netCallData::MergeFrom(from._internal_call());
  }
}

void GetReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.GetReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetReq::CopyFrom(const GetReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.GetReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetReq::IsInitialized() const {
  return true;
}

void GetReq::InternalSwap(GetReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  file_.Swap(&other->file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(call_, other->call_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRes::InitAsDefaultInstance() {
  ::InforGuard_::_GetRes_default_instance_._instance.get_mutable()->call_ = const_cast< ::InforGuard_::netCallData*>(
      ::InforGuard_::netCallData::internal_default_instance());
  ::InforGuard_::_GetRes_default_instance_._instance.get_mutable()->ex_ = const_cast< ::InforGuard_::ExceptionError*>(
      ::InforGuard_::ExceptionError::internal_default_instance());
}
class GetRes::_Internal {
 public:
  static const ::InforGuard_::netCallData& call(const GetRes* msg);
  static const ::InforGuard_::ExceptionError& ex(const GetRes* msg);
};

const ::InforGuard_::netCallData&
GetRes::_Internal::call(const GetRes* msg) {
  return *msg->call_;
}
const ::InforGuard_::ExceptionError&
GetRes::_Internal::ex(const GetRes* msg) {
  return *msg->ex_;
}
void GetRes::clear_call() {
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
}
void GetRes::clear_ex() {
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
}
GetRes::GetRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.GetRes)
}
GetRes::GetRes(const GetRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  wm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_wm().empty()) {
    wm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_wm(),
      GetArena());
  }
  if (from._internal_has_call()) {
    call_ = new ::InforGuard_::netCallData(*from.call_);
  } else {
    call_ = nullptr;
  }
  if (from._internal_has_ex()) {
    ex_ = new ::InforGuard_::ExceptionError(*from.ex_);
  } else {
    ex_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:InforGuard_.GetRes)
}

void GetRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRes_NetWaterMark_2eproto.base);
  wm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&call_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&call_)) + sizeof(ret_));
}

GetRes::~GetRes() {
  // @@protoc_insertion_point(destructor:InforGuard_.GetRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  wm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete call_;
  if (this != internal_default_instance()) delete ex_;
}

void GetRes::ArenaDtor(void* object) {
  GetRes* _this = reinterpret_cast< GetRes* >(object);
  (void)_this;
}
void GetRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRes& GetRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRes_NetWaterMark_2eproto.base);
  return *internal_default_instance();
}


void GetRes::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.GetRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wm_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
  ret_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.netCallData call = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .InforGuard_.ExceptionError ex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes wm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_wm();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ret = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.GetRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call(this), target, stream);
  }

  // .InforGuard_.ExceptionError ex = 2;
  if (this->has_ex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ex(this), target, stream);
  }

  // bytes wm = 3;
  if (this->wm().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_wm(), target);
  }

  // int32 ret = 4;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.GetRes)
  return target;
}

size_t GetRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.GetRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes wm = 3;
  if (this->wm().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_wm());
  }

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_);
  }

  // .InforGuard_.ExceptionError ex = 2;
  if (this->has_ex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ex_);
  }

  // int32 ret = 4;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.GetRes)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.GetRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.GetRes)
    MergeFrom(*source);
  }
}

void GetRes::MergeFrom(const GetRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.GetRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.wm().size() > 0) {
    _internal_set_wm(from._internal_wm());
  }
  if (from.has_call()) {
    _internal_mutable_call()->::InforGuard_::netCallData::MergeFrom(from._internal_call());
  }
  if (from.has_ex()) {
    _internal_mutable_ex()->::InforGuard_::ExceptionError::MergeFrom(from._internal_ex());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void GetRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.GetRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRes::CopyFrom(const GetRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.GetRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRes::IsInitialized() const {
  return true;
}

void GetRes::InternalSwap(GetRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  wm_.Swap(&other->wm_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetRes, ret_)
      + sizeof(GetRes::ret_)
      - PROTOBUF_FIELD_OFFSET(GetRes, call_)>(
          reinterpret_cast<char*>(&call_),
          reinterpret_cast<char*>(&other->call_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddReq::InitAsDefaultInstance() {
  ::InforGuard_::_AddReq_default_instance_._instance.get_mutable()->call_ = const_cast< ::InforGuard_::netCallData*>(
      ::InforGuard_::netCallData::internal_default_instance());
}
class AddReq::_Internal {
 public:
  static const ::InforGuard_::netCallData& call(const AddReq* msg);
};

const ::InforGuard_::netCallData&
AddReq::_Internal::call(const AddReq* msg) {
  return *msg->call_;
}
void AddReq::clear_call() {
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
}
AddReq::AddReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.AddReq)
}
AddReq::AddReq(const AddReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filepath().empty()) {
    filepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_filepath(),
      GetArena());
  }
  if (from._internal_has_call()) {
    call_ = new ::InforGuard_::netCallData(*from.call_);
  } else {
    call_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:InforGuard_.AddReq)
}

void AddReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddReq_NetWaterMark_2eproto.base);
  filepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  call_ = nullptr;
}

AddReq::~AddReq() {
  // @@protoc_insertion_point(destructor:InforGuard_.AddReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete call_;
}

void AddReq::ArenaDtor(void* object) {
  AddReq* _this = reinterpret_cast< AddReq* >(object);
  (void)_this;
}
void AddReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddReq& AddReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddReq_NetWaterMark_2eproto.base);
  return *internal_default_instance();
}


void AddReq::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.AddReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filepath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.netCallData call = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes filepath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_filepath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.AddReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call(this), target, stream);
  }

  // bytes filepath = 2;
  if (this->filepath().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_filepath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.AddReq)
  return target;
}

size_t AddReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.AddReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes filepath = 2;
  if (this->filepath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_filepath());
  }

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.AddReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AddReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.AddReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.AddReq)
    MergeFrom(*source);
  }
}

void AddReq::MergeFrom(const AddReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.AddReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filepath().size() > 0) {
    _internal_set_filepath(from._internal_filepath());
  }
  if (from.has_call()) {
    _internal_mutable_call()->::InforGuard_::netCallData::MergeFrom(from._internal_call());
  }
}

void AddReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.AddReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddReq::CopyFrom(const AddReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.AddReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddReq::IsInitialized() const {
  return true;
}

void AddReq::InternalSwap(AddReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filepath_.Swap(&other->filepath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(call_, other->call_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddRes::InitAsDefaultInstance() {
  ::InforGuard_::_AddRes_default_instance_._instance.get_mutable()->call_ = const_cast< ::InforGuard_::netCallData*>(
      ::InforGuard_::netCallData::internal_default_instance());
  ::InforGuard_::_AddRes_default_instance_._instance.get_mutable()->ex_ = const_cast< ::InforGuard_::ExceptionError*>(
      ::InforGuard_::ExceptionError::internal_default_instance());
}
class AddRes::_Internal {
 public:
  static const ::InforGuard_::netCallData& call(const AddRes* msg);
  static const ::InforGuard_::ExceptionError& ex(const AddRes* msg);
};

const ::InforGuard_::netCallData&
AddRes::_Internal::call(const AddRes* msg) {
  return *msg->call_;
}
const ::InforGuard_::ExceptionError&
AddRes::_Internal::ex(const AddRes* msg) {
  return *msg->ex_;
}
void AddRes::clear_call() {
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
}
void AddRes::clear_ex() {
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
}
AddRes::AddRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.AddRes)
}
AddRes::AddRes(const AddRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_call()) {
    call_ = new ::InforGuard_::netCallData(*from.call_);
  } else {
    call_ = nullptr;
  }
  if (from._internal_has_ex()) {
    ex_ = new ::InforGuard_::ExceptionError(*from.ex_);
  } else {
    ex_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:InforGuard_.AddRes)
}

void AddRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddRes_NetWaterMark_2eproto.base);
  ::memset(&call_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&call_)) + sizeof(ret_));
}

AddRes::~AddRes() {
  // @@protoc_insertion_point(destructor:InforGuard_.AddRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete call_;
  if (this != internal_default_instance()) delete ex_;
}

void AddRes::ArenaDtor(void* object) {
  AddRes* _this = reinterpret_cast< AddRes* >(object);
  (void)_this;
}
void AddRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddRes& AddRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddRes_NetWaterMark_2eproto.base);
  return *internal_default_instance();
}


void AddRes::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.AddRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
  ret_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.netCallData call = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .InforGuard_.ExceptionError ex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.AddRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call(this), target, stream);
  }

  // .InforGuard_.ExceptionError ex = 2;
  if (this->has_ex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ex(this), target, stream);
  }

  // int32 ret = 3;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.AddRes)
  return target;
}

size_t AddRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.AddRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_);
  }

  // .InforGuard_.ExceptionError ex = 2;
  if (this->has_ex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ex_);
  }

  // int32 ret = 3;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.AddRes)
  GOOGLE_DCHECK_NE(&from, this);
  const AddRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.AddRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.AddRes)
    MergeFrom(*source);
  }
}

void AddRes::MergeFrom(const AddRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.AddRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_call()) {
    _internal_mutable_call()->::InforGuard_::netCallData::MergeFrom(from._internal_call());
  }
  if (from.has_ex()) {
    _internal_mutable_ex()->::InforGuard_::ExceptionError::MergeFrom(from._internal_ex());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void AddRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.AddRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRes::CopyFrom(const AddRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.AddRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRes::IsInitialized() const {
  return true;
}

void AddRes::InternalSwap(AddRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddRes, ret_)
      + sizeof(AddRes::ret_)
      - PROTOBUF_FIELD_OFFSET(AddRes, call_)>(
          reinterpret_cast<char*>(&call_),
          reinterpret_cast<char*>(&other->call_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveReq::InitAsDefaultInstance() {
  ::InforGuard_::_RemoveReq_default_instance_._instance.get_mutable()->call_ = const_cast< ::InforGuard_::netCallData*>(
      ::InforGuard_::netCallData::internal_default_instance());
}
class RemoveReq::_Internal {
 public:
  static const ::InforGuard_::netCallData& call(const RemoveReq* msg);
};

const ::InforGuard_::netCallData&
RemoveReq::_Internal::call(const RemoveReq* msg) {
  return *msg->call_;
}
void RemoveReq::clear_call() {
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
}
RemoveReq::RemoveReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.RemoveReq)
}
RemoveReq::RemoveReq(const RemoveReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filepath().empty()) {
    filepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_filepath(),
      GetArena());
  }
  if (from._internal_has_call()) {
    call_ = new ::InforGuard_::netCallData(*from.call_);
  } else {
    call_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:InforGuard_.RemoveReq)
}

void RemoveReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoveReq_NetWaterMark_2eproto.base);
  filepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  call_ = nullptr;
}

RemoveReq::~RemoveReq() {
  // @@protoc_insertion_point(destructor:InforGuard_.RemoveReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoveReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete call_;
}

void RemoveReq::ArenaDtor(void* object) {
  RemoveReq* _this = reinterpret_cast< RemoveReq* >(object);
  (void)_this;
}
void RemoveReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveReq& RemoveReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveReq_NetWaterMark_2eproto.base);
  return *internal_default_instance();
}


void RemoveReq::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.RemoveReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filepath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.netCallData call = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes filepath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_filepath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.RemoveReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call(this), target, stream);
  }

  // bytes filepath = 2;
  if (this->filepath().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_filepath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.RemoveReq)
  return target;
}

size_t RemoveReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.RemoveReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes filepath = 2;
  if (this->filepath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_filepath());
  }

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.RemoveReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.RemoveReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.RemoveReq)
    MergeFrom(*source);
  }
}

void RemoveReq::MergeFrom(const RemoveReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.RemoveReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filepath().size() > 0) {
    _internal_set_filepath(from._internal_filepath());
  }
  if (from.has_call()) {
    _internal_mutable_call()->::InforGuard_::netCallData::MergeFrom(from._internal_call());
  }
}

void RemoveReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.RemoveReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveReq::CopyFrom(const RemoveReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.RemoveReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveReq::IsInitialized() const {
  return true;
}

void RemoveReq::InternalSwap(RemoveReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filepath_.Swap(&other->filepath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(call_, other->call_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveRes::InitAsDefaultInstance() {
  ::InforGuard_::_RemoveRes_default_instance_._instance.get_mutable()->call_ = const_cast< ::InforGuard_::netCallData*>(
      ::InforGuard_::netCallData::internal_default_instance());
  ::InforGuard_::_RemoveRes_default_instance_._instance.get_mutable()->ex_ = const_cast< ::InforGuard_::ExceptionError*>(
      ::InforGuard_::ExceptionError::internal_default_instance());
}
class RemoveRes::_Internal {
 public:
  static const ::InforGuard_::netCallData& call(const RemoveRes* msg);
  static const ::InforGuard_::ExceptionError& ex(const RemoveRes* msg);
};

const ::InforGuard_::netCallData&
RemoveRes::_Internal::call(const RemoveRes* msg) {
  return *msg->call_;
}
const ::InforGuard_::ExceptionError&
RemoveRes::_Internal::ex(const RemoveRes* msg) {
  return *msg->ex_;
}
void RemoveRes::clear_call() {
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
}
void RemoveRes::clear_ex() {
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
}
RemoveRes::RemoveRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.RemoveRes)
}
RemoveRes::RemoveRes(const RemoveRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_call()) {
    call_ = new ::InforGuard_::netCallData(*from.call_);
  } else {
    call_ = nullptr;
  }
  if (from._internal_has_ex()) {
    ex_ = new ::InforGuard_::ExceptionError(*from.ex_);
  } else {
    ex_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:InforGuard_.RemoveRes)
}

void RemoveRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoveRes_NetWaterMark_2eproto.base);
  ::memset(&call_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&call_)) + sizeof(ret_));
}

RemoveRes::~RemoveRes() {
  // @@protoc_insertion_point(destructor:InforGuard_.RemoveRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoveRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete call_;
  if (this != internal_default_instance()) delete ex_;
}

void RemoveRes::ArenaDtor(void* object) {
  RemoveRes* _this = reinterpret_cast< RemoveRes* >(object);
  (void)_this;
}
void RemoveRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveRes& RemoveRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveRes_NetWaterMark_2eproto.base);
  return *internal_default_instance();
}


void RemoveRes::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.RemoveRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
  ret_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.netCallData call = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .InforGuard_.ExceptionError ex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.RemoveRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call(this), target, stream);
  }

  // .InforGuard_.ExceptionError ex = 2;
  if (this->has_ex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ex(this), target, stream);
  }

  // int32 ret = 3;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.RemoveRes)
  return target;
}

size_t RemoveRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.RemoveRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_);
  }

  // .InforGuard_.ExceptionError ex = 2;
  if (this->has_ex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ex_);
  }

  // int32 ret = 3;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.RemoveRes)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.RemoveRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.RemoveRes)
    MergeFrom(*source);
  }
}

void RemoveRes::MergeFrom(const RemoveRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.RemoveRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_call()) {
    _internal_mutable_call()->::InforGuard_::netCallData::MergeFrom(from._internal_call());
  }
  if (from.has_ex()) {
    _internal_mutable_ex()->::InforGuard_::ExceptionError::MergeFrom(from._internal_ex());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void RemoveRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.RemoveRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveRes::CopyFrom(const RemoveRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.RemoveRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveRes::IsInitialized() const {
  return true;
}

void RemoveRes::InternalSwap(RemoveRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoveRes, ret_)
      + sizeof(RemoveRes::ret_)
      - PROTOBUF_FIELD_OFFSET(RemoveRes, call_)>(
          reinterpret_cast<char*>(&call_),
          reinterpret_cast<char*>(&other->call_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RenameReq::InitAsDefaultInstance() {
  ::InforGuard_::_RenameReq_default_instance_._instance.get_mutable()->call_ = const_cast< ::InforGuard_::netCallData*>(
      ::InforGuard_::netCallData::internal_default_instance());
}
class RenameReq::_Internal {
 public:
  static const ::InforGuard_::netCallData& call(const RenameReq* msg);
};

const ::InforGuard_::netCallData&
RenameReq::_Internal::call(const RenameReq* msg) {
  return *msg->call_;
}
void RenameReq::clear_call() {
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
}
RenameReq::RenameReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.RenameReq)
}
RenameReq::RenameReq(const RenameReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  oldfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_oldfilename().empty()) {
    oldfilename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_oldfilename(),
      GetArena());
  }
  newfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_newfilename().empty()) {
    newfilename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_newfilename(),
      GetArena());
  }
  if (from._internal_has_call()) {
    call_ = new ::InforGuard_::netCallData(*from.call_);
  } else {
    call_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:InforGuard_.RenameReq)
}

void RenameReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RenameReq_NetWaterMark_2eproto.base);
  oldfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  call_ = nullptr;
}

RenameReq::~RenameReq() {
  // @@protoc_insertion_point(destructor:InforGuard_.RenameReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RenameReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  oldfilename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newfilename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete call_;
}

void RenameReq::ArenaDtor(void* object) {
  RenameReq* _this = reinterpret_cast< RenameReq* >(object);
  (void)_this;
}
void RenameReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RenameReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RenameReq& RenameReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RenameReq_NetWaterMark_2eproto.base);
  return *internal_default_instance();
}


void RenameReq::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.RenameReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  oldfilename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  newfilename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RenameReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.netCallData call = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes oldfilename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_oldfilename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes newfilename = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_newfilename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RenameReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.RenameReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call(this), target, stream);
  }

  // bytes oldfilename = 2;
  if (this->oldfilename().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_oldfilename(), target);
  }

  // bytes newfilename = 3;
  if (this->newfilename().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_newfilename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.RenameReq)
  return target;
}

size_t RenameReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.RenameReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes oldfilename = 2;
  if (this->oldfilename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_oldfilename());
  }

  // bytes newfilename = 3;
  if (this->newfilename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_newfilename());
  }

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RenameReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.RenameReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RenameReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RenameReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.RenameReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.RenameReq)
    MergeFrom(*source);
  }
}

void RenameReq::MergeFrom(const RenameReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.RenameReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.oldfilename().size() > 0) {
    _internal_set_oldfilename(from._internal_oldfilename());
  }
  if (from.newfilename().size() > 0) {
    _internal_set_newfilename(from._internal_newfilename());
  }
  if (from.has_call()) {
    _internal_mutable_call()->::InforGuard_::netCallData::MergeFrom(from._internal_call());
  }
}

void RenameReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.RenameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenameReq::CopyFrom(const RenameReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.RenameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameReq::IsInitialized() const {
  return true;
}

void RenameReq::InternalSwap(RenameReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  oldfilename_.Swap(&other->oldfilename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  newfilename_.Swap(&other->newfilename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(call_, other->call_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RenameReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RenameRes::InitAsDefaultInstance() {
  ::InforGuard_::_RenameRes_default_instance_._instance.get_mutable()->call_ = const_cast< ::InforGuard_::netCallData*>(
      ::InforGuard_::netCallData::internal_default_instance());
  ::InforGuard_::_RenameRes_default_instance_._instance.get_mutable()->ex_ = const_cast< ::InforGuard_::ExceptionError*>(
      ::InforGuard_::ExceptionError::internal_default_instance());
}
class RenameRes::_Internal {
 public:
  static const ::InforGuard_::netCallData& call(const RenameRes* msg);
  static const ::InforGuard_::ExceptionError& ex(const RenameRes* msg);
};

const ::InforGuard_::netCallData&
RenameRes::_Internal::call(const RenameRes* msg) {
  return *msg->call_;
}
const ::InforGuard_::ExceptionError&
RenameRes::_Internal::ex(const RenameRes* msg) {
  return *msg->ex_;
}
void RenameRes::clear_call() {
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
}
void RenameRes::clear_ex() {
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
}
RenameRes::RenameRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.RenameRes)
}
RenameRes::RenameRes(const RenameRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_call()) {
    call_ = new ::InforGuard_::netCallData(*from.call_);
  } else {
    call_ = nullptr;
  }
  if (from._internal_has_ex()) {
    ex_ = new ::InforGuard_::ExceptionError(*from.ex_);
  } else {
    ex_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:InforGuard_.RenameRes)
}

void RenameRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RenameRes_NetWaterMark_2eproto.base);
  ::memset(&call_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&call_)) + sizeof(ret_));
}

RenameRes::~RenameRes() {
  // @@protoc_insertion_point(destructor:InforGuard_.RenameRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RenameRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete call_;
  if (this != internal_default_instance()) delete ex_;
}

void RenameRes::ArenaDtor(void* object) {
  RenameRes* _this = reinterpret_cast< RenameRes* >(object);
  (void)_this;
}
void RenameRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RenameRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RenameRes& RenameRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RenameRes_NetWaterMark_2eproto.base);
  return *internal_default_instance();
}


void RenameRes::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.RenameRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
  ret_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RenameRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.netCallData call = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .InforGuard_.ExceptionError ex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RenameRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.RenameRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call(this), target, stream);
  }

  // .InforGuard_.ExceptionError ex = 2;
  if (this->has_ex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ex(this), target, stream);
  }

  // int32 ret = 3;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.RenameRes)
  return target;
}

size_t RenameRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.RenameRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_);
  }

  // .InforGuard_.ExceptionError ex = 2;
  if (this->has_ex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ex_);
  }

  // int32 ret = 3;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RenameRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.RenameRes)
  GOOGLE_DCHECK_NE(&from, this);
  const RenameRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RenameRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.RenameRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.RenameRes)
    MergeFrom(*source);
  }
}

void RenameRes::MergeFrom(const RenameRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.RenameRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_call()) {
    _internal_mutable_call()->::InforGuard_::netCallData::MergeFrom(from._internal_call());
  }
  if (from.has_ex()) {
    _internal_mutable_ex()->::InforGuard_::ExceptionError::MergeFrom(from._internal_ex());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void RenameRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.RenameRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenameRes::CopyFrom(const RenameRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.RenameRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameRes::IsInitialized() const {
  return true;
}

void RenameRes::InternalSwap(RenameRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RenameRes, ret_)
      + sizeof(RenameRes::ret_)
      - PROTOBUF_FIELD_OFFSET(RenameRes, call_)>(
          reinterpret_cast<char*>(&call_),
          reinterpret_cast<char*>(&other->call_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RenameRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VerifyReq::InitAsDefaultInstance() {
  ::InforGuard_::_VerifyReq_default_instance_._instance.get_mutable()->call_ = const_cast< ::InforGuard_::netCallData*>(
      ::InforGuard_::netCallData::internal_default_instance());
}
class VerifyReq::_Internal {
 public:
  static const ::InforGuard_::netCallData& call(const VerifyReq* msg);
};

const ::InforGuard_::netCallData&
VerifyReq::_Internal::call(const VerifyReq* msg) {
  return *msg->call_;
}
void VerifyReq::clear_call() {
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
}
VerifyReq::VerifyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.VerifyReq)
}
VerifyReq::VerifyReq(const VerifyReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sfilename().empty()) {
    sfilename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sfilename(),
      GetArena());
  }
  swm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_swm().empty()) {
    swm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_swm(),
      GetArena());
  }
  if (from._internal_has_call()) {
    call_ = new ::InforGuard_::netCallData(*from.call_);
  } else {
    call_ = nullptr;
  }
  ::memcpy(&nfilesize_, &from.nfilesize_,
    static_cast<size_t>(reinterpret_cast<char*>(&bsimplesync_) -
    reinterpret_cast<char*>(&nfilesize_)) + sizeof(bsimplesync_));
  // @@protoc_insertion_point(copy_constructor:InforGuard_.VerifyReq)
}

void VerifyReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VerifyReq_NetWaterMark_2eproto.base);
  sfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  swm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&call_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bsimplesync_) -
      reinterpret_cast<char*>(&call_)) + sizeof(bsimplesync_));
}

VerifyReq::~VerifyReq() {
  // @@protoc_insertion_point(destructor:InforGuard_.VerifyReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VerifyReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sfilename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  swm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete call_;
}

void VerifyReq::ArenaDtor(void* object) {
  VerifyReq* _this = reinterpret_cast< VerifyReq* >(object);
  (void)_this;
}
void VerifyReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VerifyReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VerifyReq& VerifyReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VerifyReq_NetWaterMark_2eproto.base);
  return *internal_default_instance();
}


void VerifyReq::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.VerifyReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sfilename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swm_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
  ::memset(&nfilesize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bsimplesync_) -
      reinterpret_cast<char*>(&nfilesize_)) + sizeof(bsimplesync_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VerifyReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.netCallData call = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sFileName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sfilename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nFileSize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          nfilesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sWm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_swm();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bSimpleSync = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          bsimplesync_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VerifyReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.VerifyReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call(this), target, stream);
  }

  // bytes sFileName = 2;
  if (this->sfilename().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sfilename(), target);
  }

  // int32 nFileSize = 3;
  if (this->nfilesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_nfilesize(), target);
  }

  // bytes sWm = 4;
  if (this->swm().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_swm(), target);
  }

  // bool bSimpleSync = 5;
  if (this->bsimplesync() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_bsimplesync(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.VerifyReq)
  return target;
}

size_t VerifyReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.VerifyReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sFileName = 2;
  if (this->sfilename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sfilename());
  }

  // bytes sWm = 4;
  if (this->swm().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_swm());
  }

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_);
  }

  // int32 nFileSize = 3;
  if (this->nfilesize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nfilesize());
  }

  // bool bSimpleSync = 5;
  if (this->bsimplesync() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VerifyReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.VerifyReq)
  GOOGLE_DCHECK_NE(&from, this);
  const VerifyReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VerifyReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.VerifyReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.VerifyReq)
    MergeFrom(*source);
  }
}

void VerifyReq::MergeFrom(const VerifyReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.VerifyReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sfilename().size() > 0) {
    _internal_set_sfilename(from._internal_sfilename());
  }
  if (from.swm().size() > 0) {
    _internal_set_swm(from._internal_swm());
  }
  if (from.has_call()) {
    _internal_mutable_call()->::InforGuard_::netCallData::MergeFrom(from._internal_call());
  }
  if (from.nfilesize() != 0) {
    _internal_set_nfilesize(from._internal_nfilesize());
  }
  if (from.bsimplesync() != 0) {
    _internal_set_bsimplesync(from._internal_bsimplesync());
  }
}

void VerifyReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.VerifyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyReq::CopyFrom(const VerifyReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.VerifyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyReq::IsInitialized() const {
  return true;
}

void VerifyReq::InternalSwap(VerifyReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sfilename_.Swap(&other->sfilename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swm_.Swap(&other->swm_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VerifyReq, bsimplesync_)
      + sizeof(VerifyReq::bsimplesync_)
      - PROTOBUF_FIELD_OFFSET(VerifyReq, call_)>(
          reinterpret_cast<char*>(&call_),
          reinterpret_cast<char*>(&other->call_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VerifyReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VerifyRes::InitAsDefaultInstance() {
  ::InforGuard_::_VerifyRes_default_instance_._instance.get_mutable()->call_ = const_cast< ::InforGuard_::netCallData*>(
      ::InforGuard_::netCallData::internal_default_instance());
  ::InforGuard_::_VerifyRes_default_instance_._instance.get_mutable()->ex_ = const_cast< ::InforGuard_::ExceptionError*>(
      ::InforGuard_::ExceptionError::internal_default_instance());
}
class VerifyRes::_Internal {
 public:
  static const ::InforGuard_::netCallData& call(const VerifyRes* msg);
  static const ::InforGuard_::ExceptionError& ex(const VerifyRes* msg);
};

const ::InforGuard_::netCallData&
VerifyRes::_Internal::call(const VerifyRes* msg) {
  return *msg->call_;
}
const ::InforGuard_::ExceptionError&
VerifyRes::_Internal::ex(const VerifyRes* msg) {
  return *msg->ex_;
}
void VerifyRes::clear_call() {
  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
}
void VerifyRes::clear_ex() {
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
}
VerifyRes::VerifyRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.VerifyRes)
}
VerifyRes::VerifyRes(const VerifyRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_call()) {
    call_ = new ::InforGuard_::netCallData(*from.call_);
  } else {
    call_ = nullptr;
  }
  if (from._internal_has_ex()) {
    ex_ = new ::InforGuard_::ExceptionError(*from.ex_);
  } else {
    ex_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:InforGuard_.VerifyRes)
}

void VerifyRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VerifyRes_NetWaterMark_2eproto.base);
  ::memset(&call_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&call_)) + sizeof(ret_));
}

VerifyRes::~VerifyRes() {
  // @@protoc_insertion_point(destructor:InforGuard_.VerifyRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VerifyRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete call_;
  if (this != internal_default_instance()) delete ex_;
}

void VerifyRes::ArenaDtor(void* object) {
  VerifyRes* _this = reinterpret_cast< VerifyRes* >(object);
  (void)_this;
}
void VerifyRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VerifyRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VerifyRes& VerifyRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VerifyRes_NetWaterMark_2eproto.base);
  return *internal_default_instance();
}


void VerifyRes::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.VerifyRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
  ret_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VerifyRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.netCallData call = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .InforGuard_.ExceptionError ex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VerifyRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.VerifyRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call(this), target, stream);
  }

  // .InforGuard_.ExceptionError ex = 2;
  if (this->has_ex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ex(this), target, stream);
  }

  // int32 ret = 3;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.VerifyRes)
  return target;
}

size_t VerifyRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.VerifyRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .InforGuard_.netCallData call = 1;
  if (this->has_call()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_);
  }

  // .InforGuard_.ExceptionError ex = 2;
  if (this->has_ex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ex_);
  }

  // int32 ret = 3;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VerifyRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.VerifyRes)
  GOOGLE_DCHECK_NE(&from, this);
  const VerifyRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VerifyRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.VerifyRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.VerifyRes)
    MergeFrom(*source);
  }
}

void VerifyRes::MergeFrom(const VerifyRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.VerifyRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_call()) {
    _internal_mutable_call()->::InforGuard_::netCallData::MergeFrom(from._internal_call());
  }
  if (from.has_ex()) {
    _internal_mutable_ex()->::InforGuard_::ExceptionError::MergeFrom(from._internal_ex());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void VerifyRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.VerifyRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyRes::CopyFrom(const VerifyRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.VerifyRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyRes::IsInitialized() const {
  return true;
}

void VerifyRes::InternalSwap(VerifyRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VerifyRes, ret_)
      + sizeof(VerifyRes::ret_)
      - PROTOBUF_FIELD_OFFSET(VerifyRes, call_)>(
          reinterpret_cast<char*>(&call_),
          reinterpret_cast<char*>(&other->call_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VerifyRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VerifyForFilterReq::InitAsDefaultInstance() {
}
class VerifyForFilterReq::_Internal {
 public:
};

VerifyForFilterReq::VerifyForFilterReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.VerifyForFilterReq)
}
VerifyForFilterReq::VerifyForFilterReq(const VerifyForFilterReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  files_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_files().empty()) {
    files_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_files(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:InforGuard_.VerifyForFilterReq)
}

void VerifyForFilterReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VerifyForFilterReq_NetWaterMark_2eproto.base);
  files_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VerifyForFilterReq::~VerifyForFilterReq() {
  // @@protoc_insertion_point(destructor:InforGuard_.VerifyForFilterReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VerifyForFilterReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  files_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VerifyForFilterReq::ArenaDtor(void* object) {
  VerifyForFilterReq* _this = reinterpret_cast< VerifyForFilterReq* >(object);
  (void)_this;
}
void VerifyForFilterReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VerifyForFilterReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VerifyForFilterReq& VerifyForFilterReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VerifyForFilterReq_NetWaterMark_2eproto.base);
  return *internal_default_instance();
}


void VerifyForFilterReq::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.VerifyForFilterReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  files_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VerifyForFilterReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes files = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_files();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VerifyForFilterReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.VerifyForFilterReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes files = 1;
  if (this->files().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_files(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.VerifyForFilterReq)
  return target;
}

size_t VerifyForFilterReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.VerifyForFilterReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes files = 1;
  if (this->files().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_files());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VerifyForFilterReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.VerifyForFilterReq)
  GOOGLE_DCHECK_NE(&from, this);
  const VerifyForFilterReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VerifyForFilterReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.VerifyForFilterReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.VerifyForFilterReq)
    MergeFrom(*source);
  }
}

void VerifyForFilterReq::MergeFrom(const VerifyForFilterReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.VerifyForFilterReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.files().size() > 0) {
    _internal_set_files(from._internal_files());
  }
}

void VerifyForFilterReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.VerifyForFilterReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyForFilterReq::CopyFrom(const VerifyForFilterReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.VerifyForFilterReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyForFilterReq::IsInitialized() const {
  return true;
}

void VerifyForFilterReq::InternalSwap(VerifyForFilterReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  files_.Swap(&other->files_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata VerifyForFilterReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VerifyForFilterRes::InitAsDefaultInstance() {
  ::InforGuard_::_VerifyForFilterRes_default_instance_._instance.get_mutable()->ex_ = const_cast< ::InforGuard_::ExceptionError*>(
      ::InforGuard_::ExceptionError::internal_default_instance());
}
class VerifyForFilterRes::_Internal {
 public:
  static const ::InforGuard_::ExceptionError& ex(const VerifyForFilterRes* msg);
};

const ::InforGuard_::ExceptionError&
VerifyForFilterRes::_Internal::ex(const VerifyForFilterRes* msg) {
  return *msg->ex_;
}
void VerifyForFilterRes::clear_ex() {
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
}
VerifyForFilterRes::VerifyForFilterRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.VerifyForFilterRes)
}
VerifyForFilterRes::VerifyForFilterRes(const VerifyForFilterRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ex()) {
    ex_ = new ::InforGuard_::ExceptionError(*from.ex_);
  } else {
    ex_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:InforGuard_.VerifyForFilterRes)
}

void VerifyForFilterRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VerifyForFilterRes_NetWaterMark_2eproto.base);
  ::memset(&ex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&ex_)) + sizeof(ret_));
}

VerifyForFilterRes::~VerifyForFilterRes() {
  // @@protoc_insertion_point(destructor:InforGuard_.VerifyForFilterRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VerifyForFilterRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ex_;
}

void VerifyForFilterRes::ArenaDtor(void* object) {
  VerifyForFilterRes* _this = reinterpret_cast< VerifyForFilterRes* >(object);
  (void)_this;
}
void VerifyForFilterRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VerifyForFilterRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VerifyForFilterRes& VerifyForFilterRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VerifyForFilterRes_NetWaterMark_2eproto.base);
  return *internal_default_instance();
}


void VerifyForFilterRes::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.VerifyForFilterRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
  ret_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VerifyForFilterRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.ExceptionError ex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VerifyForFilterRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.VerifyForFilterRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.ExceptionError ex = 1;
  if (this->has_ex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ex(this), target, stream);
  }

  // int32 ret = 2;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.VerifyForFilterRes)
  return target;
}

size_t VerifyForFilterRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.VerifyForFilterRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .InforGuard_.ExceptionError ex = 1;
  if (this->has_ex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ex_);
  }

  // int32 ret = 2;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VerifyForFilterRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.VerifyForFilterRes)
  GOOGLE_DCHECK_NE(&from, this);
  const VerifyForFilterRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VerifyForFilterRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.VerifyForFilterRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.VerifyForFilterRes)
    MergeFrom(*source);
  }
}

void VerifyForFilterRes::MergeFrom(const VerifyForFilterRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.VerifyForFilterRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ex()) {
    _internal_mutable_ex()->::InforGuard_::ExceptionError::MergeFrom(from._internal_ex());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void VerifyForFilterRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.VerifyForFilterRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyForFilterRes::CopyFrom(const VerifyForFilterRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.VerifyForFilterRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyForFilterRes::IsInitialized() const {
  return true;
}

void VerifyForFilterRes::InternalSwap(VerifyForFilterRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VerifyForFilterRes, ret_)
      + sizeof(VerifyForFilterRes::ret_)
      - PROTOBUF_FIELD_OFFSET(VerifyForFilterRes, ex_)>(
          reinterpret_cast<char*>(&ex_),
          reinterpret_cast<char*>(&other->ex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VerifyForFilterRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestResumeReq::InitAsDefaultInstance() {
}
class RequestResumeReq::_Internal {
 public:
};

RequestResumeReq::RequestResumeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.RequestResumeReq)
}
RequestResumeReq::RequestResumeReq(const RequestResumeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_filename(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:InforGuard_.RequestResumeReq)
}

void RequestResumeReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestResumeReq_NetWaterMark_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RequestResumeReq::~RequestResumeReq() {
  // @@protoc_insertion_point(destructor:InforGuard_.RequestResumeReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestResumeReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestResumeReq::ArenaDtor(void* object) {
  RequestResumeReq* _this = reinterpret_cast< RequestResumeReq* >(object);
  (void)_this;
}
void RequestResumeReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestResumeReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestResumeReq& RequestResumeReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestResumeReq_NetWaterMark_2eproto.base);
  return *internal_default_instance();
}


void RequestResumeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.RequestResumeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestResumeReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestResumeReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.RequestResumeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes filename = 1;
  if (this->filename().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.RequestResumeReq)
  return target;
}

size_t RequestResumeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.RequestResumeReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes filename = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_filename());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestResumeReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.RequestResumeReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestResumeReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestResumeReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.RequestResumeReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.RequestResumeReq)
    MergeFrom(*source);
  }
}

void RequestResumeReq::MergeFrom(const RequestResumeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.RequestResumeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {
    _internal_set_filename(from._internal_filename());
  }
}

void RequestResumeReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.RequestResumeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestResumeReq::CopyFrom(const RequestResumeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.RequestResumeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestResumeReq::IsInitialized() const {
  return true;
}

void RequestResumeReq::InternalSwap(RequestResumeReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestResumeReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestResumeRes::InitAsDefaultInstance() {
  ::InforGuard_::_RequestResumeRes_default_instance_._instance.get_mutable()->ex_ = const_cast< ::InforGuard_::ExceptionError*>(
      ::InforGuard_::ExceptionError::internal_default_instance());
}
class RequestResumeRes::_Internal {
 public:
  static const ::InforGuard_::ExceptionError& ex(const RequestResumeRes* msg);
};

const ::InforGuard_::ExceptionError&
RequestResumeRes::_Internal::ex(const RequestResumeRes* msg) {
  return *msg->ex_;
}
void RequestResumeRes::clear_ex() {
  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
}
RequestResumeRes::RequestResumeRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.RequestResumeRes)
}
RequestResumeRes::RequestResumeRes(const RequestResumeRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ex()) {
    ex_ = new ::InforGuard_::ExceptionError(*from.ex_);
  } else {
    ex_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:InforGuard_.RequestResumeRes)
}

void RequestResumeRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestResumeRes_NetWaterMark_2eproto.base);
  ::memset(&ex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&ex_)) + sizeof(ret_));
}

RequestResumeRes::~RequestResumeRes() {
  // @@protoc_insertion_point(destructor:InforGuard_.RequestResumeRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestResumeRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ex_;
}

void RequestResumeRes::ArenaDtor(void* object) {
  RequestResumeRes* _this = reinterpret_cast< RequestResumeRes* >(object);
  (void)_this;
}
void RequestResumeRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestResumeRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestResumeRes& RequestResumeRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestResumeRes_NetWaterMark_2eproto.base);
  return *internal_default_instance();
}


void RequestResumeRes::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.RequestResumeRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
  ret_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestResumeRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.ExceptionError ex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestResumeRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.RequestResumeRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.ExceptionError ex = 1;
  if (this->has_ex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ex(this), target, stream);
  }

  // int32 ret = 2;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.RequestResumeRes)
  return target;
}

size_t RequestResumeRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.RequestResumeRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .InforGuard_.ExceptionError ex = 1;
  if (this->has_ex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ex_);
  }

  // int32 ret = 2;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestResumeRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.RequestResumeRes)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestResumeRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestResumeRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.RequestResumeRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.RequestResumeRes)
    MergeFrom(*source);
  }
}

void RequestResumeRes::MergeFrom(const RequestResumeRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.RequestResumeRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ex()) {
    _internal_mutable_ex()->::InforGuard_::ExceptionError::MergeFrom(from._internal_ex());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void RequestResumeRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.RequestResumeRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestResumeRes::CopyFrom(const RequestResumeRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.RequestResumeRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestResumeRes::IsInitialized() const {
  return true;
}

void RequestResumeRes::InternalSwap(RequestResumeRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestResumeRes, ret_)
      + sizeof(RequestResumeRes::ret_)
      - PROTOBUF_FIELD_OFFSET(RequestResumeRes, ex_)>(
          reinterpret_cast<char*>(&ex_),
          reinterpret_cast<char*>(&other->ex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestResumeRes::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace InforGuard_
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::InforGuard_::SetReq* Arena::CreateMaybeMessage< ::InforGuard_::SetReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::SetReq >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::SetRes* Arena::CreateMaybeMessage< ::InforGuard_::SetRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::SetRes >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::GetReq* Arena::CreateMaybeMessage< ::InforGuard_::GetReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::GetReq >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::GetRes* Arena::CreateMaybeMessage< ::InforGuard_::GetRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::GetRes >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::AddReq* Arena::CreateMaybeMessage< ::InforGuard_::AddReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::AddReq >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::AddRes* Arena::CreateMaybeMessage< ::InforGuard_::AddRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::AddRes >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::RemoveReq* Arena::CreateMaybeMessage< ::InforGuard_::RemoveReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::RemoveReq >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::RemoveRes* Arena::CreateMaybeMessage< ::InforGuard_::RemoveRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::RemoveRes >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::RenameReq* Arena::CreateMaybeMessage< ::InforGuard_::RenameReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::RenameReq >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::RenameRes* Arena::CreateMaybeMessage< ::InforGuard_::RenameRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::RenameRes >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::VerifyReq* Arena::CreateMaybeMessage< ::InforGuard_::VerifyReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::VerifyReq >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::VerifyRes* Arena::CreateMaybeMessage< ::InforGuard_::VerifyRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::VerifyRes >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::VerifyForFilterReq* Arena::CreateMaybeMessage< ::InforGuard_::VerifyForFilterReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::VerifyForFilterReq >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::VerifyForFilterRes* Arena::CreateMaybeMessage< ::InforGuard_::VerifyForFilterRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::VerifyForFilterRes >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::RequestResumeReq* Arena::CreateMaybeMessage< ::InforGuard_::RequestResumeReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::RequestResumeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::RequestResumeRes* Arena::CreateMaybeMessage< ::InforGuard_::RequestResumeRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::RequestResumeRes >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
