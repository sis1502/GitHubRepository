// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NetWaterMark.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_NetWaterMark_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_NetWaterMark_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Metadata.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_NetWaterMark_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_NetWaterMark_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NetWaterMark_2eproto;
namespace InforGuard_ {
class AddReq;
class AddReqDefaultTypeInternal;
extern AddReqDefaultTypeInternal _AddReq_default_instance_;
class AddRes;
class AddResDefaultTypeInternal;
extern AddResDefaultTypeInternal _AddRes_default_instance_;
class GetReq;
class GetReqDefaultTypeInternal;
extern GetReqDefaultTypeInternal _GetReq_default_instance_;
class GetRes;
class GetResDefaultTypeInternal;
extern GetResDefaultTypeInternal _GetRes_default_instance_;
class RemoveReq;
class RemoveReqDefaultTypeInternal;
extern RemoveReqDefaultTypeInternal _RemoveReq_default_instance_;
class RemoveRes;
class RemoveResDefaultTypeInternal;
extern RemoveResDefaultTypeInternal _RemoveRes_default_instance_;
class RenameReq;
class RenameReqDefaultTypeInternal;
extern RenameReqDefaultTypeInternal _RenameReq_default_instance_;
class RenameRes;
class RenameResDefaultTypeInternal;
extern RenameResDefaultTypeInternal _RenameRes_default_instance_;
class RequestResumeReq;
class RequestResumeReqDefaultTypeInternal;
extern RequestResumeReqDefaultTypeInternal _RequestResumeReq_default_instance_;
class RequestResumeRes;
class RequestResumeResDefaultTypeInternal;
extern RequestResumeResDefaultTypeInternal _RequestResumeRes_default_instance_;
class SetReq;
class SetReqDefaultTypeInternal;
extern SetReqDefaultTypeInternal _SetReq_default_instance_;
class SetRes;
class SetResDefaultTypeInternal;
extern SetResDefaultTypeInternal _SetRes_default_instance_;
class VerifyForFilterReq;
class VerifyForFilterReqDefaultTypeInternal;
extern VerifyForFilterReqDefaultTypeInternal _VerifyForFilterReq_default_instance_;
class VerifyForFilterRes;
class VerifyForFilterResDefaultTypeInternal;
extern VerifyForFilterResDefaultTypeInternal _VerifyForFilterRes_default_instance_;
class VerifyReq;
class VerifyReqDefaultTypeInternal;
extern VerifyReqDefaultTypeInternal _VerifyReq_default_instance_;
class VerifyRes;
class VerifyResDefaultTypeInternal;
extern VerifyResDefaultTypeInternal _VerifyRes_default_instance_;
}  // namespace InforGuard_
PROTOBUF_NAMESPACE_OPEN
template<> ::InforGuard_::AddReq* Arena::CreateMaybeMessage<::InforGuard_::AddReq>(Arena*);
template<> ::InforGuard_::AddRes* Arena::CreateMaybeMessage<::InforGuard_::AddRes>(Arena*);
template<> ::InforGuard_::GetReq* Arena::CreateMaybeMessage<::InforGuard_::GetReq>(Arena*);
template<> ::InforGuard_::GetRes* Arena::CreateMaybeMessage<::InforGuard_::GetRes>(Arena*);
template<> ::InforGuard_::RemoveReq* Arena::CreateMaybeMessage<::InforGuard_::RemoveReq>(Arena*);
template<> ::InforGuard_::RemoveRes* Arena::CreateMaybeMessage<::InforGuard_::RemoveRes>(Arena*);
template<> ::InforGuard_::RenameReq* Arena::CreateMaybeMessage<::InforGuard_::RenameReq>(Arena*);
template<> ::InforGuard_::RenameRes* Arena::CreateMaybeMessage<::InforGuard_::RenameRes>(Arena*);
template<> ::InforGuard_::RequestResumeReq* Arena::CreateMaybeMessage<::InforGuard_::RequestResumeReq>(Arena*);
template<> ::InforGuard_::RequestResumeRes* Arena::CreateMaybeMessage<::InforGuard_::RequestResumeRes>(Arena*);
template<> ::InforGuard_::SetReq* Arena::CreateMaybeMessage<::InforGuard_::SetReq>(Arena*);
template<> ::InforGuard_::SetRes* Arena::CreateMaybeMessage<::InforGuard_::SetRes>(Arena*);
template<> ::InforGuard_::VerifyForFilterReq* Arena::CreateMaybeMessage<::InforGuard_::VerifyForFilterReq>(Arena*);
template<> ::InforGuard_::VerifyForFilterRes* Arena::CreateMaybeMessage<::InforGuard_::VerifyForFilterRes>(Arena*);
template<> ::InforGuard_::VerifyReq* Arena::CreateMaybeMessage<::InforGuard_::VerifyReq>(Arena*);
template<> ::InforGuard_::VerifyRes* Arena::CreateMaybeMessage<::InforGuard_::VerifyRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace InforGuard_ {

// ===================================================================

class SetReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.SetReq) */ {
 public:
  inline SetReq() : SetReq(nullptr) {};
  virtual ~SetReq();

  SetReq(const SetReq& from);
  SetReq(SetReq&& from) noexcept
    : SetReq() {
    *this = ::std::move(from);
  }

  inline SetReq& operator=(const SetReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetReq& operator=(SetReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetReq* internal_default_instance() {
    return reinterpret_cast<const SetReq*>(
               &_SetReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SetReq& a, SetReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SetReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetReq* New() const final {
    return CreateMaybeMessage<SetReq>(nullptr);
  }

  SetReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetReq& from);
  void MergeFrom(const SetReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.SetReq";
  }
  protected:
  explicit SetReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NetWaterMark_2eproto);
    return ::descriptor_table_NetWaterMark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 2,
    kWmFieldNumber = 3,
    kCallFieldNumber = 1,
  };
  // bytes file = 2;
  void clear_file();
  const std::string& file() const;
  void set_file(const std::string& value);
  void set_file(std::string&& value);
  void set_file(const char* value);
  void set_file(const void* value, size_t size);
  std::string* mutable_file();
  std::string* release_file();
  void set_allocated_file(std::string* file);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_file();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_file(
      std::string* file);
  private:
  const std::string& _internal_file() const;
  void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // bytes wm = 3;
  void clear_wm();
  const std::string& wm() const;
  void set_wm(const std::string& value);
  void set_wm(std::string&& value);
  void set_wm(const char* value);
  void set_wm(const void* value, size_t size);
  std::string* mutable_wm();
  std::string* release_wm();
  void set_allocated_wm(std::string* wm);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_wm();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_wm(
      std::string* wm);
  private:
  const std::string& _internal_wm() const;
  void _internal_set_wm(const std::string& value);
  std::string* _internal_mutable_wm();
  public:

  // .InforGuard_.netCallData call = 1;
  bool has_call() const;
  private:
  bool _internal_has_call() const;
  public:
  void clear_call();
  const ::InforGuard_::netCallData& call() const;
  ::InforGuard_::netCallData* release_call();
  ::InforGuard_::netCallData* mutable_call();
  void set_allocated_call(::InforGuard_::netCallData* call);
  private:
  const ::InforGuard_::netCallData& _internal_call() const;
  ::InforGuard_::netCallData* _internal_mutable_call();
  public:
  void unsafe_arena_set_allocated_call(
      ::InforGuard_::netCallData* call);
  ::InforGuard_::netCallData* unsafe_arena_release_call();

  // @@protoc_insertion_point(class_scope:InforGuard_.SetReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wm_;
  ::InforGuard_::netCallData* call_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NetWaterMark_2eproto;
};
// -------------------------------------------------------------------

class SetRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.SetRes) */ {
 public:
  inline SetRes() : SetRes(nullptr) {};
  virtual ~SetRes();

  SetRes(const SetRes& from);
  SetRes(SetRes&& from) noexcept
    : SetRes() {
    *this = ::std::move(from);
  }

  inline SetRes& operator=(const SetRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRes& operator=(SetRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetRes* internal_default_instance() {
    return reinterpret_cast<const SetRes*>(
               &_SetRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SetRes& a, SetRes& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetRes* New() const final {
    return CreateMaybeMessage<SetRes>(nullptr);
  }

  SetRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetRes& from);
  void MergeFrom(const SetRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.SetRes";
  }
  protected:
  explicit SetRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NetWaterMark_2eproto);
    return ::descriptor_table_NetWaterMark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallFieldNumber = 1,
    kExFieldNumber = 2,
    kRetFieldNumber = 3,
  };
  // .InforGuard_.netCallData call = 1;
  bool has_call() const;
  private:
  bool _internal_has_call() const;
  public:
  void clear_call();
  const ::InforGuard_::netCallData& call() const;
  ::InforGuard_::netCallData* release_call();
  ::InforGuard_::netCallData* mutable_call();
  void set_allocated_call(::InforGuard_::netCallData* call);
  private:
  const ::InforGuard_::netCallData& _internal_call() const;
  ::InforGuard_::netCallData* _internal_mutable_call();
  public:
  void unsafe_arena_set_allocated_call(
      ::InforGuard_::netCallData* call);
  ::InforGuard_::netCallData* unsafe_arena_release_call();

  // .InforGuard_.ExceptionError ex = 2;
  bool has_ex() const;
  private:
  bool _internal_has_ex() const;
  public:
  void clear_ex();
  const ::InforGuard_::ExceptionError& ex() const;
  ::InforGuard_::ExceptionError* release_ex();
  ::InforGuard_::ExceptionError* mutable_ex();
  void set_allocated_ex(::InforGuard_::ExceptionError* ex);
  private:
  const ::InforGuard_::ExceptionError& _internal_ex() const;
  ::InforGuard_::ExceptionError* _internal_mutable_ex();
  public:
  void unsafe_arena_set_allocated_ex(
      ::InforGuard_::ExceptionError* ex);
  ::InforGuard_::ExceptionError* unsafe_arena_release_ex();

  // int32 ret = 3;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.SetRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::InforGuard_::netCallData* call_;
  ::InforGuard_::ExceptionError* ex_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NetWaterMark_2eproto;
};
// -------------------------------------------------------------------

class GetReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.GetReq) */ {
 public:
  inline GetReq() : GetReq(nullptr) {};
  virtual ~GetReq();

  GetReq(const GetReq& from);
  GetReq(GetReq&& from) noexcept
    : GetReq() {
    *this = ::std::move(from);
  }

  inline GetReq& operator=(const GetReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetReq& operator=(GetReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetReq* internal_default_instance() {
    return reinterpret_cast<const GetReq*>(
               &_GetReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetReq& a, GetReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetReq* New() const final {
    return CreateMaybeMessage<GetReq>(nullptr);
  }

  GetReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetReq& from);
  void MergeFrom(const GetReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.GetReq";
  }
  protected:
  explicit GetReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NetWaterMark_2eproto);
    return ::descriptor_table_NetWaterMark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 2,
    kCallFieldNumber = 1,
  };
  // bytes file = 2;
  void clear_file();
  const std::string& file() const;
  void set_file(const std::string& value);
  void set_file(std::string&& value);
  void set_file(const char* value);
  void set_file(const void* value, size_t size);
  std::string* mutable_file();
  std::string* release_file();
  void set_allocated_file(std::string* file);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_file();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_file(
      std::string* file);
  private:
  const std::string& _internal_file() const;
  void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // .InforGuard_.netCallData call = 1;
  bool has_call() const;
  private:
  bool _internal_has_call() const;
  public:
  void clear_call();
  const ::InforGuard_::netCallData& call() const;
  ::InforGuard_::netCallData* release_call();
  ::InforGuard_::netCallData* mutable_call();
  void set_allocated_call(::InforGuard_::netCallData* call);
  private:
  const ::InforGuard_::netCallData& _internal_call() const;
  ::InforGuard_::netCallData* _internal_mutable_call();
  public:
  void unsafe_arena_set_allocated_call(
      ::InforGuard_::netCallData* call);
  ::InforGuard_::netCallData* unsafe_arena_release_call();

  // @@protoc_insertion_point(class_scope:InforGuard_.GetReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
  ::InforGuard_::netCallData* call_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NetWaterMark_2eproto;
};
// -------------------------------------------------------------------

class GetRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.GetRes) */ {
 public:
  inline GetRes() : GetRes(nullptr) {};
  virtual ~GetRes();

  GetRes(const GetRes& from);
  GetRes(GetRes&& from) noexcept
    : GetRes() {
    *this = ::std::move(from);
  }

  inline GetRes& operator=(const GetRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRes& operator=(GetRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRes* internal_default_instance() {
    return reinterpret_cast<const GetRes*>(
               &_GetRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetRes& a, GetRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRes* New() const final {
    return CreateMaybeMessage<GetRes>(nullptr);
  }

  GetRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRes& from);
  void MergeFrom(const GetRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.GetRes";
  }
  protected:
  explicit GetRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NetWaterMark_2eproto);
    return ::descriptor_table_NetWaterMark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWmFieldNumber = 3,
    kCallFieldNumber = 1,
    kExFieldNumber = 2,
    kRetFieldNumber = 4,
  };
  // bytes wm = 3;
  void clear_wm();
  const std::string& wm() const;
  void set_wm(const std::string& value);
  void set_wm(std::string&& value);
  void set_wm(const char* value);
  void set_wm(const void* value, size_t size);
  std::string* mutable_wm();
  std::string* release_wm();
  void set_allocated_wm(std::string* wm);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_wm();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_wm(
      std::string* wm);
  private:
  const std::string& _internal_wm() const;
  void _internal_set_wm(const std::string& value);
  std::string* _internal_mutable_wm();
  public:

  // .InforGuard_.netCallData call = 1;
  bool has_call() const;
  private:
  bool _internal_has_call() const;
  public:
  void clear_call();
  const ::InforGuard_::netCallData& call() const;
  ::InforGuard_::netCallData* release_call();
  ::InforGuard_::netCallData* mutable_call();
  void set_allocated_call(::InforGuard_::netCallData* call);
  private:
  const ::InforGuard_::netCallData& _internal_call() const;
  ::InforGuard_::netCallData* _internal_mutable_call();
  public:
  void unsafe_arena_set_allocated_call(
      ::InforGuard_::netCallData* call);
  ::InforGuard_::netCallData* unsafe_arena_release_call();

  // .InforGuard_.ExceptionError ex = 2;
  bool has_ex() const;
  private:
  bool _internal_has_ex() const;
  public:
  void clear_ex();
  const ::InforGuard_::ExceptionError& ex() const;
  ::InforGuard_::ExceptionError* release_ex();
  ::InforGuard_::ExceptionError* mutable_ex();
  void set_allocated_ex(::InforGuard_::ExceptionError* ex);
  private:
  const ::InforGuard_::ExceptionError& _internal_ex() const;
  ::InforGuard_::ExceptionError* _internal_mutable_ex();
  public:
  void unsafe_arena_set_allocated_ex(
      ::InforGuard_::ExceptionError* ex);
  ::InforGuard_::ExceptionError* unsafe_arena_release_ex();

  // int32 ret = 4;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.GetRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wm_;
  ::InforGuard_::netCallData* call_;
  ::InforGuard_::ExceptionError* ex_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NetWaterMark_2eproto;
};
// -------------------------------------------------------------------

class AddReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.AddReq) */ {
 public:
  inline AddReq() : AddReq(nullptr) {};
  virtual ~AddReq();

  AddReq(const AddReq& from);
  AddReq(AddReq&& from) noexcept
    : AddReq() {
    *this = ::std::move(from);
  }

  inline AddReq& operator=(const AddReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddReq& operator=(AddReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddReq* internal_default_instance() {
    return reinterpret_cast<const AddReq*>(
               &_AddReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AddReq& a, AddReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AddReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddReq* New() const final {
    return CreateMaybeMessage<AddReq>(nullptr);
  }

  AddReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddReq& from);
  void MergeFrom(const AddReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.AddReq";
  }
  protected:
  explicit AddReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NetWaterMark_2eproto);
    return ::descriptor_table_NetWaterMark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilepathFieldNumber = 2,
    kCallFieldNumber = 1,
  };
  // bytes filepath = 2;
  void clear_filepath();
  const std::string& filepath() const;
  void set_filepath(const std::string& value);
  void set_filepath(std::string&& value);
  void set_filepath(const char* value);
  void set_filepath(const void* value, size_t size);
  std::string* mutable_filepath();
  std::string* release_filepath();
  void set_allocated_filepath(std::string* filepath);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_filepath();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_filepath(
      std::string* filepath);
  private:
  const std::string& _internal_filepath() const;
  void _internal_set_filepath(const std::string& value);
  std::string* _internal_mutable_filepath();
  public:

  // .InforGuard_.netCallData call = 1;
  bool has_call() const;
  private:
  bool _internal_has_call() const;
  public:
  void clear_call();
  const ::InforGuard_::netCallData& call() const;
  ::InforGuard_::netCallData* release_call();
  ::InforGuard_::netCallData* mutable_call();
  void set_allocated_call(::InforGuard_::netCallData* call);
  private:
  const ::InforGuard_::netCallData& _internal_call() const;
  ::InforGuard_::netCallData* _internal_mutable_call();
  public:
  void unsafe_arena_set_allocated_call(
      ::InforGuard_::netCallData* call);
  ::InforGuard_::netCallData* unsafe_arena_release_call();

  // @@protoc_insertion_point(class_scope:InforGuard_.AddReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filepath_;
  ::InforGuard_::netCallData* call_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NetWaterMark_2eproto;
};
// -------------------------------------------------------------------

class AddRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.AddRes) */ {
 public:
  inline AddRes() : AddRes(nullptr) {};
  virtual ~AddRes();

  AddRes(const AddRes& from);
  AddRes(AddRes&& from) noexcept
    : AddRes() {
    *this = ::std::move(from);
  }

  inline AddRes& operator=(const AddRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRes& operator=(AddRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddRes* internal_default_instance() {
    return reinterpret_cast<const AddRes*>(
               &_AddRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AddRes& a, AddRes& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddRes* New() const final {
    return CreateMaybeMessage<AddRes>(nullptr);
  }

  AddRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddRes& from);
  void MergeFrom(const AddRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.AddRes";
  }
  protected:
  explicit AddRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NetWaterMark_2eproto);
    return ::descriptor_table_NetWaterMark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallFieldNumber = 1,
    kExFieldNumber = 2,
    kRetFieldNumber = 3,
  };
  // .InforGuard_.netCallData call = 1;
  bool has_call() const;
  private:
  bool _internal_has_call() const;
  public:
  void clear_call();
  const ::InforGuard_::netCallData& call() const;
  ::InforGuard_::netCallData* release_call();
  ::InforGuard_::netCallData* mutable_call();
  void set_allocated_call(::InforGuard_::netCallData* call);
  private:
  const ::InforGuard_::netCallData& _internal_call() const;
  ::InforGuard_::netCallData* _internal_mutable_call();
  public:
  void unsafe_arena_set_allocated_call(
      ::InforGuard_::netCallData* call);
  ::InforGuard_::netCallData* unsafe_arena_release_call();

  // .InforGuard_.ExceptionError ex = 2;
  bool has_ex() const;
  private:
  bool _internal_has_ex() const;
  public:
  void clear_ex();
  const ::InforGuard_::ExceptionError& ex() const;
  ::InforGuard_::ExceptionError* release_ex();
  ::InforGuard_::ExceptionError* mutable_ex();
  void set_allocated_ex(::InforGuard_::ExceptionError* ex);
  private:
  const ::InforGuard_::ExceptionError& _internal_ex() const;
  ::InforGuard_::ExceptionError* _internal_mutable_ex();
  public:
  void unsafe_arena_set_allocated_ex(
      ::InforGuard_::ExceptionError* ex);
  ::InforGuard_::ExceptionError* unsafe_arena_release_ex();

  // int32 ret = 3;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.AddRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::InforGuard_::netCallData* call_;
  ::InforGuard_::ExceptionError* ex_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NetWaterMark_2eproto;
};
// -------------------------------------------------------------------

class RemoveReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.RemoveReq) */ {
 public:
  inline RemoveReq() : RemoveReq(nullptr) {};
  virtual ~RemoveReq();

  RemoveReq(const RemoveReq& from);
  RemoveReq(RemoveReq&& from) noexcept
    : RemoveReq() {
    *this = ::std::move(from);
  }

  inline RemoveReq& operator=(const RemoveReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveReq& operator=(RemoveReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveReq* internal_default_instance() {
    return reinterpret_cast<const RemoveReq*>(
               &_RemoveReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RemoveReq& a, RemoveReq& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveReq* New() const final {
    return CreateMaybeMessage<RemoveReq>(nullptr);
  }

  RemoveReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveReq& from);
  void MergeFrom(const RemoveReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.RemoveReq";
  }
  protected:
  explicit RemoveReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NetWaterMark_2eproto);
    return ::descriptor_table_NetWaterMark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilepathFieldNumber = 2,
    kCallFieldNumber = 1,
  };
  // bytes filepath = 2;
  void clear_filepath();
  const std::string& filepath() const;
  void set_filepath(const std::string& value);
  void set_filepath(std::string&& value);
  void set_filepath(const char* value);
  void set_filepath(const void* value, size_t size);
  std::string* mutable_filepath();
  std::string* release_filepath();
  void set_allocated_filepath(std::string* filepath);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_filepath();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_filepath(
      std::string* filepath);
  private:
  const std::string& _internal_filepath() const;
  void _internal_set_filepath(const std::string& value);
  std::string* _internal_mutable_filepath();
  public:

  // .InforGuard_.netCallData call = 1;
  bool has_call() const;
  private:
  bool _internal_has_call() const;
  public:
  void clear_call();
  const ::InforGuard_::netCallData& call() const;
  ::InforGuard_::netCallData* release_call();
  ::InforGuard_::netCallData* mutable_call();
  void set_allocated_call(::InforGuard_::netCallData* call);
  private:
  const ::InforGuard_::netCallData& _internal_call() const;
  ::InforGuard_::netCallData* _internal_mutable_call();
  public:
  void unsafe_arena_set_allocated_call(
      ::InforGuard_::netCallData* call);
  ::InforGuard_::netCallData* unsafe_arena_release_call();

  // @@protoc_insertion_point(class_scope:InforGuard_.RemoveReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filepath_;
  ::InforGuard_::netCallData* call_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NetWaterMark_2eproto;
};
// -------------------------------------------------------------------

class RemoveRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.RemoveRes) */ {
 public:
  inline RemoveRes() : RemoveRes(nullptr) {};
  virtual ~RemoveRes();

  RemoveRes(const RemoveRes& from);
  RemoveRes(RemoveRes&& from) noexcept
    : RemoveRes() {
    *this = ::std::move(from);
  }

  inline RemoveRes& operator=(const RemoveRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveRes& operator=(RemoveRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveRes* internal_default_instance() {
    return reinterpret_cast<const RemoveRes*>(
               &_RemoveRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RemoveRes& a, RemoveRes& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveRes* New() const final {
    return CreateMaybeMessage<RemoveRes>(nullptr);
  }

  RemoveRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveRes& from);
  void MergeFrom(const RemoveRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.RemoveRes";
  }
  protected:
  explicit RemoveRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NetWaterMark_2eproto);
    return ::descriptor_table_NetWaterMark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallFieldNumber = 1,
    kExFieldNumber = 2,
    kRetFieldNumber = 3,
  };
  // .InforGuard_.netCallData call = 1;
  bool has_call() const;
  private:
  bool _internal_has_call() const;
  public:
  void clear_call();
  const ::InforGuard_::netCallData& call() const;
  ::InforGuard_::netCallData* release_call();
  ::InforGuard_::netCallData* mutable_call();
  void set_allocated_call(::InforGuard_::netCallData* call);
  private:
  const ::InforGuard_::netCallData& _internal_call() const;
  ::InforGuard_::netCallData* _internal_mutable_call();
  public:
  void unsafe_arena_set_allocated_call(
      ::InforGuard_::netCallData* call);
  ::InforGuard_::netCallData* unsafe_arena_release_call();

  // .InforGuard_.ExceptionError ex = 2;
  bool has_ex() const;
  private:
  bool _internal_has_ex() const;
  public:
  void clear_ex();
  const ::InforGuard_::ExceptionError& ex() const;
  ::InforGuard_::ExceptionError* release_ex();
  ::InforGuard_::ExceptionError* mutable_ex();
  void set_allocated_ex(::InforGuard_::ExceptionError* ex);
  private:
  const ::InforGuard_::ExceptionError& _internal_ex() const;
  ::InforGuard_::ExceptionError* _internal_mutable_ex();
  public:
  void unsafe_arena_set_allocated_ex(
      ::InforGuard_::ExceptionError* ex);
  ::InforGuard_::ExceptionError* unsafe_arena_release_ex();

  // int32 ret = 3;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.RemoveRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::InforGuard_::netCallData* call_;
  ::InforGuard_::ExceptionError* ex_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NetWaterMark_2eproto;
};
// -------------------------------------------------------------------

class RenameReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.RenameReq) */ {
 public:
  inline RenameReq() : RenameReq(nullptr) {};
  virtual ~RenameReq();

  RenameReq(const RenameReq& from);
  RenameReq(RenameReq&& from) noexcept
    : RenameReq() {
    *this = ::std::move(from);
  }

  inline RenameReq& operator=(const RenameReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenameReq& operator=(RenameReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RenameReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RenameReq* internal_default_instance() {
    return reinterpret_cast<const RenameReq*>(
               &_RenameReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RenameReq& a, RenameReq& b) {
    a.Swap(&b);
  }
  inline void Swap(RenameReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RenameReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RenameReq* New() const final {
    return CreateMaybeMessage<RenameReq>(nullptr);
  }

  RenameReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RenameReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RenameReq& from);
  void MergeFrom(const RenameReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenameReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.RenameReq";
  }
  protected:
  explicit RenameReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NetWaterMark_2eproto);
    return ::descriptor_table_NetWaterMark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldfilenameFieldNumber = 2,
    kNewfilenameFieldNumber = 3,
    kCallFieldNumber = 1,
  };
  // bytes oldfilename = 2;
  void clear_oldfilename();
  const std::string& oldfilename() const;
  void set_oldfilename(const std::string& value);
  void set_oldfilename(std::string&& value);
  void set_oldfilename(const char* value);
  void set_oldfilename(const void* value, size_t size);
  std::string* mutable_oldfilename();
  std::string* release_oldfilename();
  void set_allocated_oldfilename(std::string* oldfilename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_oldfilename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_oldfilename(
      std::string* oldfilename);
  private:
  const std::string& _internal_oldfilename() const;
  void _internal_set_oldfilename(const std::string& value);
  std::string* _internal_mutable_oldfilename();
  public:

  // bytes newfilename = 3;
  void clear_newfilename();
  const std::string& newfilename() const;
  void set_newfilename(const std::string& value);
  void set_newfilename(std::string&& value);
  void set_newfilename(const char* value);
  void set_newfilename(const void* value, size_t size);
  std::string* mutable_newfilename();
  std::string* release_newfilename();
  void set_allocated_newfilename(std::string* newfilename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_newfilename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_newfilename(
      std::string* newfilename);
  private:
  const std::string& _internal_newfilename() const;
  void _internal_set_newfilename(const std::string& value);
  std::string* _internal_mutable_newfilename();
  public:

  // .InforGuard_.netCallData call = 1;
  bool has_call() const;
  private:
  bool _internal_has_call() const;
  public:
  void clear_call();
  const ::InforGuard_::netCallData& call() const;
  ::InforGuard_::netCallData* release_call();
  ::InforGuard_::netCallData* mutable_call();
  void set_allocated_call(::InforGuard_::netCallData* call);
  private:
  const ::InforGuard_::netCallData& _internal_call() const;
  ::InforGuard_::netCallData* _internal_mutable_call();
  public:
  void unsafe_arena_set_allocated_call(
      ::InforGuard_::netCallData* call);
  ::InforGuard_::netCallData* unsafe_arena_release_call();

  // @@protoc_insertion_point(class_scope:InforGuard_.RenameReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oldfilename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newfilename_;
  ::InforGuard_::netCallData* call_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NetWaterMark_2eproto;
};
// -------------------------------------------------------------------

class RenameRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.RenameRes) */ {
 public:
  inline RenameRes() : RenameRes(nullptr) {};
  virtual ~RenameRes();

  RenameRes(const RenameRes& from);
  RenameRes(RenameRes&& from) noexcept
    : RenameRes() {
    *this = ::std::move(from);
  }

  inline RenameRes& operator=(const RenameRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenameRes& operator=(RenameRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RenameRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RenameRes* internal_default_instance() {
    return reinterpret_cast<const RenameRes*>(
               &_RenameRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RenameRes& a, RenameRes& b) {
    a.Swap(&b);
  }
  inline void Swap(RenameRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RenameRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RenameRes* New() const final {
    return CreateMaybeMessage<RenameRes>(nullptr);
  }

  RenameRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RenameRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RenameRes& from);
  void MergeFrom(const RenameRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenameRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.RenameRes";
  }
  protected:
  explicit RenameRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NetWaterMark_2eproto);
    return ::descriptor_table_NetWaterMark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallFieldNumber = 1,
    kExFieldNumber = 2,
    kRetFieldNumber = 3,
  };
  // .InforGuard_.netCallData call = 1;
  bool has_call() const;
  private:
  bool _internal_has_call() const;
  public:
  void clear_call();
  const ::InforGuard_::netCallData& call() const;
  ::InforGuard_::netCallData* release_call();
  ::InforGuard_::netCallData* mutable_call();
  void set_allocated_call(::InforGuard_::netCallData* call);
  private:
  const ::InforGuard_::netCallData& _internal_call() const;
  ::InforGuard_::netCallData* _internal_mutable_call();
  public:
  void unsafe_arena_set_allocated_call(
      ::InforGuard_::netCallData* call);
  ::InforGuard_::netCallData* unsafe_arena_release_call();

  // .InforGuard_.ExceptionError ex = 2;
  bool has_ex() const;
  private:
  bool _internal_has_ex() const;
  public:
  void clear_ex();
  const ::InforGuard_::ExceptionError& ex() const;
  ::InforGuard_::ExceptionError* release_ex();
  ::InforGuard_::ExceptionError* mutable_ex();
  void set_allocated_ex(::InforGuard_::ExceptionError* ex);
  private:
  const ::InforGuard_::ExceptionError& _internal_ex() const;
  ::InforGuard_::ExceptionError* _internal_mutable_ex();
  public:
  void unsafe_arena_set_allocated_ex(
      ::InforGuard_::ExceptionError* ex);
  ::InforGuard_::ExceptionError* unsafe_arena_release_ex();

  // int32 ret = 3;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.RenameRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::InforGuard_::netCallData* call_;
  ::InforGuard_::ExceptionError* ex_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NetWaterMark_2eproto;
};
// -------------------------------------------------------------------

class VerifyReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.VerifyReq) */ {
 public:
  inline VerifyReq() : VerifyReq(nullptr) {};
  virtual ~VerifyReq();

  VerifyReq(const VerifyReq& from);
  VerifyReq(VerifyReq&& from) noexcept
    : VerifyReq() {
    *this = ::std::move(from);
  }

  inline VerifyReq& operator=(const VerifyReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyReq& operator=(VerifyReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VerifyReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerifyReq* internal_default_instance() {
    return reinterpret_cast<const VerifyReq*>(
               &_VerifyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(VerifyReq& a, VerifyReq& b) {
    a.Swap(&b);
  }
  inline void Swap(VerifyReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VerifyReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VerifyReq* New() const final {
    return CreateMaybeMessage<VerifyReq>(nullptr);
  }

  VerifyReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VerifyReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VerifyReq& from);
  void MergeFrom(const VerifyReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.VerifyReq";
  }
  protected:
  explicit VerifyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NetWaterMark_2eproto);
    return ::descriptor_table_NetWaterMark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSFileNameFieldNumber = 2,
    kSWmFieldNumber = 4,
    kCallFieldNumber = 1,
    kNFileSizeFieldNumber = 3,
    kBSimpleSyncFieldNumber = 5,
  };
  // bytes sFileName = 2;
  void clear_sfilename();
  const std::string& sfilename() const;
  void set_sfilename(const std::string& value);
  void set_sfilename(std::string&& value);
  void set_sfilename(const char* value);
  void set_sfilename(const void* value, size_t size);
  std::string* mutable_sfilename();
  std::string* release_sfilename();
  void set_allocated_sfilename(std::string* sfilename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sfilename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sfilename(
      std::string* sfilename);
  private:
  const std::string& _internal_sfilename() const;
  void _internal_set_sfilename(const std::string& value);
  std::string* _internal_mutable_sfilename();
  public:

  // bytes sWm = 4;
  void clear_swm();
  const std::string& swm() const;
  void set_swm(const std::string& value);
  void set_swm(std::string&& value);
  void set_swm(const char* value);
  void set_swm(const void* value, size_t size);
  std::string* mutable_swm();
  std::string* release_swm();
  void set_allocated_swm(std::string* swm);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_swm();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_swm(
      std::string* swm);
  private:
  const std::string& _internal_swm() const;
  void _internal_set_swm(const std::string& value);
  std::string* _internal_mutable_swm();
  public:

  // .InforGuard_.netCallData call = 1;
  bool has_call() const;
  private:
  bool _internal_has_call() const;
  public:
  void clear_call();
  const ::InforGuard_::netCallData& call() const;
  ::InforGuard_::netCallData* release_call();
  ::InforGuard_::netCallData* mutable_call();
  void set_allocated_call(::InforGuard_::netCallData* call);
  private:
  const ::InforGuard_::netCallData& _internal_call() const;
  ::InforGuard_::netCallData* _internal_mutable_call();
  public:
  void unsafe_arena_set_allocated_call(
      ::InforGuard_::netCallData* call);
  ::InforGuard_::netCallData* unsafe_arena_release_call();

  // int32 nFileSize = 3;
  void clear_nfilesize();
  ::PROTOBUF_NAMESPACE_ID::int32 nfilesize() const;
  void set_nfilesize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nfilesize() const;
  void _internal_set_nfilesize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool bSimpleSync = 5;
  void clear_bsimplesync();
  bool bsimplesync() const;
  void set_bsimplesync(bool value);
  private:
  bool _internal_bsimplesync() const;
  void _internal_set_bsimplesync(bool value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.VerifyReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sfilename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr swm_;
  ::InforGuard_::netCallData* call_;
  ::PROTOBUF_NAMESPACE_ID::int32 nfilesize_;
  bool bsimplesync_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NetWaterMark_2eproto;
};
// -------------------------------------------------------------------

class VerifyRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.VerifyRes) */ {
 public:
  inline VerifyRes() : VerifyRes(nullptr) {};
  virtual ~VerifyRes();

  VerifyRes(const VerifyRes& from);
  VerifyRes(VerifyRes&& from) noexcept
    : VerifyRes() {
    *this = ::std::move(from);
  }

  inline VerifyRes& operator=(const VerifyRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyRes& operator=(VerifyRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VerifyRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerifyRes* internal_default_instance() {
    return reinterpret_cast<const VerifyRes*>(
               &_VerifyRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(VerifyRes& a, VerifyRes& b) {
    a.Swap(&b);
  }
  inline void Swap(VerifyRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VerifyRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VerifyRes* New() const final {
    return CreateMaybeMessage<VerifyRes>(nullptr);
  }

  VerifyRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VerifyRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VerifyRes& from);
  void MergeFrom(const VerifyRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.VerifyRes";
  }
  protected:
  explicit VerifyRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NetWaterMark_2eproto);
    return ::descriptor_table_NetWaterMark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallFieldNumber = 1,
    kExFieldNumber = 2,
    kRetFieldNumber = 3,
  };
  // .InforGuard_.netCallData call = 1;
  bool has_call() const;
  private:
  bool _internal_has_call() const;
  public:
  void clear_call();
  const ::InforGuard_::netCallData& call() const;
  ::InforGuard_::netCallData* release_call();
  ::InforGuard_::netCallData* mutable_call();
  void set_allocated_call(::InforGuard_::netCallData* call);
  private:
  const ::InforGuard_::netCallData& _internal_call() const;
  ::InforGuard_::netCallData* _internal_mutable_call();
  public:
  void unsafe_arena_set_allocated_call(
      ::InforGuard_::netCallData* call);
  ::InforGuard_::netCallData* unsafe_arena_release_call();

  // .InforGuard_.ExceptionError ex = 2;
  bool has_ex() const;
  private:
  bool _internal_has_ex() const;
  public:
  void clear_ex();
  const ::InforGuard_::ExceptionError& ex() const;
  ::InforGuard_::ExceptionError* release_ex();
  ::InforGuard_::ExceptionError* mutable_ex();
  void set_allocated_ex(::InforGuard_::ExceptionError* ex);
  private:
  const ::InforGuard_::ExceptionError& _internal_ex() const;
  ::InforGuard_::ExceptionError* _internal_mutable_ex();
  public:
  void unsafe_arena_set_allocated_ex(
      ::InforGuard_::ExceptionError* ex);
  ::InforGuard_::ExceptionError* unsafe_arena_release_ex();

  // int32 ret = 3;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.VerifyRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::InforGuard_::netCallData* call_;
  ::InforGuard_::ExceptionError* ex_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NetWaterMark_2eproto;
};
// -------------------------------------------------------------------

class VerifyForFilterReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.VerifyForFilterReq) */ {
 public:
  inline VerifyForFilterReq() : VerifyForFilterReq(nullptr) {};
  virtual ~VerifyForFilterReq();

  VerifyForFilterReq(const VerifyForFilterReq& from);
  VerifyForFilterReq(VerifyForFilterReq&& from) noexcept
    : VerifyForFilterReq() {
    *this = ::std::move(from);
  }

  inline VerifyForFilterReq& operator=(const VerifyForFilterReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyForFilterReq& operator=(VerifyForFilterReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VerifyForFilterReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerifyForFilterReq* internal_default_instance() {
    return reinterpret_cast<const VerifyForFilterReq*>(
               &_VerifyForFilterReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(VerifyForFilterReq& a, VerifyForFilterReq& b) {
    a.Swap(&b);
  }
  inline void Swap(VerifyForFilterReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VerifyForFilterReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VerifyForFilterReq* New() const final {
    return CreateMaybeMessage<VerifyForFilterReq>(nullptr);
  }

  VerifyForFilterReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VerifyForFilterReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VerifyForFilterReq& from);
  void MergeFrom(const VerifyForFilterReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyForFilterReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.VerifyForFilterReq";
  }
  protected:
  explicit VerifyForFilterReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NetWaterMark_2eproto);
    return ::descriptor_table_NetWaterMark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 1,
  };
  // bytes files = 1;
  void clear_files();
  const std::string& files() const;
  void set_files(const std::string& value);
  void set_files(std::string&& value);
  void set_files(const char* value);
  void set_files(const void* value, size_t size);
  std::string* mutable_files();
  std::string* release_files();
  void set_allocated_files(std::string* files);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_files();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_files(
      std::string* files);
  private:
  const std::string& _internal_files() const;
  void _internal_set_files(const std::string& value);
  std::string* _internal_mutable_files();
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.VerifyForFilterReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr files_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NetWaterMark_2eproto;
};
// -------------------------------------------------------------------

class VerifyForFilterRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.VerifyForFilterRes) */ {
 public:
  inline VerifyForFilterRes() : VerifyForFilterRes(nullptr) {};
  virtual ~VerifyForFilterRes();

  VerifyForFilterRes(const VerifyForFilterRes& from);
  VerifyForFilterRes(VerifyForFilterRes&& from) noexcept
    : VerifyForFilterRes() {
    *this = ::std::move(from);
  }

  inline VerifyForFilterRes& operator=(const VerifyForFilterRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyForFilterRes& operator=(VerifyForFilterRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VerifyForFilterRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerifyForFilterRes* internal_default_instance() {
    return reinterpret_cast<const VerifyForFilterRes*>(
               &_VerifyForFilterRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(VerifyForFilterRes& a, VerifyForFilterRes& b) {
    a.Swap(&b);
  }
  inline void Swap(VerifyForFilterRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VerifyForFilterRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VerifyForFilterRes* New() const final {
    return CreateMaybeMessage<VerifyForFilterRes>(nullptr);
  }

  VerifyForFilterRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VerifyForFilterRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VerifyForFilterRes& from);
  void MergeFrom(const VerifyForFilterRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyForFilterRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.VerifyForFilterRes";
  }
  protected:
  explicit VerifyForFilterRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NetWaterMark_2eproto);
    return ::descriptor_table_NetWaterMark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExFieldNumber = 1,
    kRetFieldNumber = 2,
  };
  // .InforGuard_.ExceptionError ex = 1;
  bool has_ex() const;
  private:
  bool _internal_has_ex() const;
  public:
  void clear_ex();
  const ::InforGuard_::ExceptionError& ex() const;
  ::InforGuard_::ExceptionError* release_ex();
  ::InforGuard_::ExceptionError* mutable_ex();
  void set_allocated_ex(::InforGuard_::ExceptionError* ex);
  private:
  const ::InforGuard_::ExceptionError& _internal_ex() const;
  ::InforGuard_::ExceptionError* _internal_mutable_ex();
  public:
  void unsafe_arena_set_allocated_ex(
      ::InforGuard_::ExceptionError* ex);
  ::InforGuard_::ExceptionError* unsafe_arena_release_ex();

  // int32 ret = 2;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.VerifyForFilterRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::InforGuard_::ExceptionError* ex_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NetWaterMark_2eproto;
};
// -------------------------------------------------------------------

class RequestResumeReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.RequestResumeReq) */ {
 public:
  inline RequestResumeReq() : RequestResumeReq(nullptr) {};
  virtual ~RequestResumeReq();

  RequestResumeReq(const RequestResumeReq& from);
  RequestResumeReq(RequestResumeReq&& from) noexcept
    : RequestResumeReq() {
    *this = ::std::move(from);
  }

  inline RequestResumeReq& operator=(const RequestResumeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestResumeReq& operator=(RequestResumeReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestResumeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestResumeReq* internal_default_instance() {
    return reinterpret_cast<const RequestResumeReq*>(
               &_RequestResumeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RequestResumeReq& a, RequestResumeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestResumeReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestResumeReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestResumeReq* New() const final {
    return CreateMaybeMessage<RequestResumeReq>(nullptr);
  }

  RequestResumeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestResumeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestResumeReq& from);
  void MergeFrom(const RequestResumeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestResumeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.RequestResumeReq";
  }
  protected:
  explicit RequestResumeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NetWaterMark_2eproto);
    return ::descriptor_table_NetWaterMark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
  };
  // bytes filename = 1;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const void* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_filename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_filename(
      std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.RequestResumeReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NetWaterMark_2eproto;
};
// -------------------------------------------------------------------

class RequestResumeRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InforGuard_.RequestResumeRes) */ {
 public:
  inline RequestResumeRes() : RequestResumeRes(nullptr) {};
  virtual ~RequestResumeRes();

  RequestResumeRes(const RequestResumeRes& from);
  RequestResumeRes(RequestResumeRes&& from) noexcept
    : RequestResumeRes() {
    *this = ::std::move(from);
  }

  inline RequestResumeRes& operator=(const RequestResumeRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestResumeRes& operator=(RequestResumeRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestResumeRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestResumeRes* internal_default_instance() {
    return reinterpret_cast<const RequestResumeRes*>(
               &_RequestResumeRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(RequestResumeRes& a, RequestResumeRes& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestResumeRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestResumeRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestResumeRes* New() const final {
    return CreateMaybeMessage<RequestResumeRes>(nullptr);
  }

  RequestResumeRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestResumeRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestResumeRes& from);
  void MergeFrom(const RequestResumeRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestResumeRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InforGuard_.RequestResumeRes";
  }
  protected:
  explicit RequestResumeRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NetWaterMark_2eproto);
    return ::descriptor_table_NetWaterMark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExFieldNumber = 1,
    kRetFieldNumber = 2,
  };
  // .InforGuard_.ExceptionError ex = 1;
  bool has_ex() const;
  private:
  bool _internal_has_ex() const;
  public:
  void clear_ex();
  const ::InforGuard_::ExceptionError& ex() const;
  ::InforGuard_::ExceptionError* release_ex();
  ::InforGuard_::ExceptionError* mutable_ex();
  void set_allocated_ex(::InforGuard_::ExceptionError* ex);
  private:
  const ::InforGuard_::ExceptionError& _internal_ex() const;
  ::InforGuard_::ExceptionError* _internal_mutable_ex();
  public:
  void unsafe_arena_set_allocated_ex(
      ::InforGuard_::ExceptionError* ex);
  ::InforGuard_::ExceptionError* unsafe_arena_release_ex();

  // int32 ret = 2;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InforGuard_.RequestResumeRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::InforGuard_::ExceptionError* ex_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NetWaterMark_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SetReq

// .InforGuard_.netCallData call = 1;
inline bool SetReq::_internal_has_call() const {
  return this != internal_default_instance() && call_ != nullptr;
}
inline bool SetReq::has_call() const {
  return _internal_has_call();
}
inline const ::InforGuard_::netCallData& SetReq::_internal_call() const {
  const ::InforGuard_::netCallData* p = call_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::netCallData*>(
      &::InforGuard_::_netCallData_default_instance_);
}
inline const ::InforGuard_::netCallData& SetReq::call() const {
  // @@protoc_insertion_point(field_get:InforGuard_.SetReq.call)
  return _internal_call();
}
inline void SetReq::unsafe_arena_set_allocated_call(
    ::InforGuard_::netCallData* call) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  call_ = call;
  if (call) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.SetReq.call)
}
inline ::InforGuard_::netCallData* SetReq::release_call() {
  auto temp = unsafe_arena_release_call();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::netCallData* SetReq::unsafe_arena_release_call() {
  // @@protoc_insertion_point(field_release:InforGuard_.SetReq.call)
  
  ::InforGuard_::netCallData* temp = call_;
  call_ = nullptr;
  return temp;
}
inline ::InforGuard_::netCallData* SetReq::_internal_mutable_call() {
  
  if (call_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::netCallData>(GetArena());
    call_ = p;
  }
  return call_;
}
inline ::InforGuard_::netCallData* SetReq::mutable_call() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.SetReq.call)
  return _internal_mutable_call();
}
inline void SetReq::set_allocated_call(::InforGuard_::netCallData* call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  if (call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call)->GetArena();
    if (message_arena != submessage_arena) {
      call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call, submessage_arena);
    }
    
  } else {
    
  }
  call_ = call;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.SetReq.call)
}

// bytes file = 2;
inline void SetReq::clear_file() {
  file_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetReq::file() const {
  // @@protoc_insertion_point(field_get:InforGuard_.SetReq.file)
  return _internal_file();
}
inline void SetReq::set_file(const std::string& value) {
  _internal_set_file(value);
  // @@protoc_insertion_point(field_set:InforGuard_.SetReq.file)
}
inline std::string* SetReq::mutable_file() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.SetReq.file)
  return _internal_mutable_file();
}
inline const std::string& SetReq::_internal_file() const {
  return file_.Get();
}
inline void SetReq::_internal_set_file(const std::string& value) {
  
  file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetReq::set_file(std::string&& value) {
  
  file_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.SetReq.file)
}
inline void SetReq::set_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.SetReq.file)
}
inline void SetReq::set_file(const void* value,
    size_t size) {
  
  file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.SetReq.file)
}
inline std::string* SetReq::_internal_mutable_file() {
  
  return file_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetReq::release_file() {
  // @@protoc_insertion_point(field_release:InforGuard_.SetReq.file)
  return file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetReq::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.SetReq.file)
}
inline std::string* SetReq::unsafe_arena_release_file() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.SetReq.file)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return file_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetReq::unsafe_arena_set_allocated_file(
    std::string* file) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (file != nullptr) {
    
  } else {
    
  }
  file_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      file, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.SetReq.file)
}

// bytes wm = 3;
inline void SetReq::clear_wm() {
  wm_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetReq::wm() const {
  // @@protoc_insertion_point(field_get:InforGuard_.SetReq.wm)
  return _internal_wm();
}
inline void SetReq::set_wm(const std::string& value) {
  _internal_set_wm(value);
  // @@protoc_insertion_point(field_set:InforGuard_.SetReq.wm)
}
inline std::string* SetReq::mutable_wm() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.SetReq.wm)
  return _internal_mutable_wm();
}
inline const std::string& SetReq::_internal_wm() const {
  return wm_.Get();
}
inline void SetReq::_internal_set_wm(const std::string& value) {
  
  wm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetReq::set_wm(std::string&& value) {
  
  wm_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.SetReq.wm)
}
inline void SetReq::set_wm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  wm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.SetReq.wm)
}
inline void SetReq::set_wm(const void* value,
    size_t size) {
  
  wm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.SetReq.wm)
}
inline std::string* SetReq::_internal_mutable_wm() {
  
  return wm_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetReq::release_wm() {
  // @@protoc_insertion_point(field_release:InforGuard_.SetReq.wm)
  return wm_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetReq::set_allocated_wm(std::string* wm) {
  if (wm != nullptr) {
    
  } else {
    
  }
  wm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wm,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.SetReq.wm)
}
inline std::string* SetReq::unsafe_arena_release_wm() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.SetReq.wm)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return wm_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetReq::unsafe_arena_set_allocated_wm(
    std::string* wm) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (wm != nullptr) {
    
  } else {
    
  }
  wm_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      wm, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.SetReq.wm)
}

// -------------------------------------------------------------------

// SetRes

// .InforGuard_.netCallData call = 1;
inline bool SetRes::_internal_has_call() const {
  return this != internal_default_instance() && call_ != nullptr;
}
inline bool SetRes::has_call() const {
  return _internal_has_call();
}
inline const ::InforGuard_::netCallData& SetRes::_internal_call() const {
  const ::InforGuard_::netCallData* p = call_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::netCallData*>(
      &::InforGuard_::_netCallData_default_instance_);
}
inline const ::InforGuard_::netCallData& SetRes::call() const {
  // @@protoc_insertion_point(field_get:InforGuard_.SetRes.call)
  return _internal_call();
}
inline void SetRes::unsafe_arena_set_allocated_call(
    ::InforGuard_::netCallData* call) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  call_ = call;
  if (call) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.SetRes.call)
}
inline ::InforGuard_::netCallData* SetRes::release_call() {
  auto temp = unsafe_arena_release_call();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::netCallData* SetRes::unsafe_arena_release_call() {
  // @@protoc_insertion_point(field_release:InforGuard_.SetRes.call)
  
  ::InforGuard_::netCallData* temp = call_;
  call_ = nullptr;
  return temp;
}
inline ::InforGuard_::netCallData* SetRes::_internal_mutable_call() {
  
  if (call_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::netCallData>(GetArena());
    call_ = p;
  }
  return call_;
}
inline ::InforGuard_::netCallData* SetRes::mutable_call() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.SetRes.call)
  return _internal_mutable_call();
}
inline void SetRes::set_allocated_call(::InforGuard_::netCallData* call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  if (call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call)->GetArena();
    if (message_arena != submessage_arena) {
      call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call, submessage_arena);
    }
    
  } else {
    
  }
  call_ = call;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.SetRes.call)
}

// .InforGuard_.ExceptionError ex = 2;
inline bool SetRes::_internal_has_ex() const {
  return this != internal_default_instance() && ex_ != nullptr;
}
inline bool SetRes::has_ex() const {
  return _internal_has_ex();
}
inline const ::InforGuard_::ExceptionError& SetRes::_internal_ex() const {
  const ::InforGuard_::ExceptionError* p = ex_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::ExceptionError*>(
      &::InforGuard_::_ExceptionError_default_instance_);
}
inline const ::InforGuard_::ExceptionError& SetRes::ex() const {
  // @@protoc_insertion_point(field_get:InforGuard_.SetRes.ex)
  return _internal_ex();
}
inline void SetRes::unsafe_arena_set_allocated_ex(
    ::InforGuard_::ExceptionError* ex) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  ex_ = ex;
  if (ex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.SetRes.ex)
}
inline ::InforGuard_::ExceptionError* SetRes::release_ex() {
  auto temp = unsafe_arena_release_ex();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::ExceptionError* SetRes::unsafe_arena_release_ex() {
  // @@protoc_insertion_point(field_release:InforGuard_.SetRes.ex)
  
  ::InforGuard_::ExceptionError* temp = ex_;
  ex_ = nullptr;
  return temp;
}
inline ::InforGuard_::ExceptionError* SetRes::_internal_mutable_ex() {
  
  if (ex_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::ExceptionError>(GetArena());
    ex_ = p;
  }
  return ex_;
}
inline ::InforGuard_::ExceptionError* SetRes::mutable_ex() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.SetRes.ex)
  return _internal_mutable_ex();
}
inline void SetRes::set_allocated_ex(::InforGuard_::ExceptionError* ex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  if (ex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex)->GetArena();
    if (message_arena != submessage_arena) {
      ex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ex, submessage_arena);
    }
    
  } else {
    
  }
  ex_ = ex;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.SetRes.ex)
}

// int32 ret = 3;
inline void SetRes::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetRes::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetRes::ret() const {
  // @@protoc_insertion_point(field_get:InforGuard_.SetRes.ret)
  return _internal_ret();
}
inline void SetRes::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void SetRes::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:InforGuard_.SetRes.ret)
}

// -------------------------------------------------------------------

// GetReq

// .InforGuard_.netCallData call = 1;
inline bool GetReq::_internal_has_call() const {
  return this != internal_default_instance() && call_ != nullptr;
}
inline bool GetReq::has_call() const {
  return _internal_has_call();
}
inline const ::InforGuard_::netCallData& GetReq::_internal_call() const {
  const ::InforGuard_::netCallData* p = call_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::netCallData*>(
      &::InforGuard_::_netCallData_default_instance_);
}
inline const ::InforGuard_::netCallData& GetReq::call() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetReq.call)
  return _internal_call();
}
inline void GetReq::unsafe_arena_set_allocated_call(
    ::InforGuard_::netCallData* call) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  call_ = call;
  if (call) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.GetReq.call)
}
inline ::InforGuard_::netCallData* GetReq::release_call() {
  auto temp = unsafe_arena_release_call();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::netCallData* GetReq::unsafe_arena_release_call() {
  // @@protoc_insertion_point(field_release:InforGuard_.GetReq.call)
  
  ::InforGuard_::netCallData* temp = call_;
  call_ = nullptr;
  return temp;
}
inline ::InforGuard_::netCallData* GetReq::_internal_mutable_call() {
  
  if (call_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::netCallData>(GetArena());
    call_ = p;
  }
  return call_;
}
inline ::InforGuard_::netCallData* GetReq::mutable_call() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.GetReq.call)
  return _internal_mutable_call();
}
inline void GetReq::set_allocated_call(::InforGuard_::netCallData* call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  if (call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call)->GetArena();
    if (message_arena != submessage_arena) {
      call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call, submessage_arena);
    }
    
  } else {
    
  }
  call_ = call;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.GetReq.call)
}

// bytes file = 2;
inline void GetReq::clear_file() {
  file_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetReq::file() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetReq.file)
  return _internal_file();
}
inline void GetReq::set_file(const std::string& value) {
  _internal_set_file(value);
  // @@protoc_insertion_point(field_set:InforGuard_.GetReq.file)
}
inline std::string* GetReq::mutable_file() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.GetReq.file)
  return _internal_mutable_file();
}
inline const std::string& GetReq::_internal_file() const {
  return file_.Get();
}
inline void GetReq::_internal_set_file(const std::string& value) {
  
  file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetReq::set_file(std::string&& value) {
  
  file_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.GetReq.file)
}
inline void GetReq::set_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.GetReq.file)
}
inline void GetReq::set_file(const void* value,
    size_t size) {
  
  file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.GetReq.file)
}
inline std::string* GetReq::_internal_mutable_file() {
  
  return file_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetReq::release_file() {
  // @@protoc_insertion_point(field_release:InforGuard_.GetReq.file)
  return file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetReq::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.GetReq.file)
}
inline std::string* GetReq::unsafe_arena_release_file() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.GetReq.file)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return file_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetReq::unsafe_arena_set_allocated_file(
    std::string* file) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (file != nullptr) {
    
  } else {
    
  }
  file_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      file, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.GetReq.file)
}

// -------------------------------------------------------------------

// GetRes

// .InforGuard_.netCallData call = 1;
inline bool GetRes::_internal_has_call() const {
  return this != internal_default_instance() && call_ != nullptr;
}
inline bool GetRes::has_call() const {
  return _internal_has_call();
}
inline const ::InforGuard_::netCallData& GetRes::_internal_call() const {
  const ::InforGuard_::netCallData* p = call_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::netCallData*>(
      &::InforGuard_::_netCallData_default_instance_);
}
inline const ::InforGuard_::netCallData& GetRes::call() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetRes.call)
  return _internal_call();
}
inline void GetRes::unsafe_arena_set_allocated_call(
    ::InforGuard_::netCallData* call) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  call_ = call;
  if (call) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.GetRes.call)
}
inline ::InforGuard_::netCallData* GetRes::release_call() {
  auto temp = unsafe_arena_release_call();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::netCallData* GetRes::unsafe_arena_release_call() {
  // @@protoc_insertion_point(field_release:InforGuard_.GetRes.call)
  
  ::InforGuard_::netCallData* temp = call_;
  call_ = nullptr;
  return temp;
}
inline ::InforGuard_::netCallData* GetRes::_internal_mutable_call() {
  
  if (call_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::netCallData>(GetArena());
    call_ = p;
  }
  return call_;
}
inline ::InforGuard_::netCallData* GetRes::mutable_call() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.GetRes.call)
  return _internal_mutable_call();
}
inline void GetRes::set_allocated_call(::InforGuard_::netCallData* call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  if (call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call)->GetArena();
    if (message_arena != submessage_arena) {
      call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call, submessage_arena);
    }
    
  } else {
    
  }
  call_ = call;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.GetRes.call)
}

// .InforGuard_.ExceptionError ex = 2;
inline bool GetRes::_internal_has_ex() const {
  return this != internal_default_instance() && ex_ != nullptr;
}
inline bool GetRes::has_ex() const {
  return _internal_has_ex();
}
inline const ::InforGuard_::ExceptionError& GetRes::_internal_ex() const {
  const ::InforGuard_::ExceptionError* p = ex_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::ExceptionError*>(
      &::InforGuard_::_ExceptionError_default_instance_);
}
inline const ::InforGuard_::ExceptionError& GetRes::ex() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetRes.ex)
  return _internal_ex();
}
inline void GetRes::unsafe_arena_set_allocated_ex(
    ::InforGuard_::ExceptionError* ex) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  ex_ = ex;
  if (ex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.GetRes.ex)
}
inline ::InforGuard_::ExceptionError* GetRes::release_ex() {
  auto temp = unsafe_arena_release_ex();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::ExceptionError* GetRes::unsafe_arena_release_ex() {
  // @@protoc_insertion_point(field_release:InforGuard_.GetRes.ex)
  
  ::InforGuard_::ExceptionError* temp = ex_;
  ex_ = nullptr;
  return temp;
}
inline ::InforGuard_::ExceptionError* GetRes::_internal_mutable_ex() {
  
  if (ex_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::ExceptionError>(GetArena());
    ex_ = p;
  }
  return ex_;
}
inline ::InforGuard_::ExceptionError* GetRes::mutable_ex() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.GetRes.ex)
  return _internal_mutable_ex();
}
inline void GetRes::set_allocated_ex(::InforGuard_::ExceptionError* ex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  if (ex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex)->GetArena();
    if (message_arena != submessage_arena) {
      ex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ex, submessage_arena);
    }
    
  } else {
    
  }
  ex_ = ex;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.GetRes.ex)
}

// bytes wm = 3;
inline void GetRes::clear_wm() {
  wm_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetRes::wm() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetRes.wm)
  return _internal_wm();
}
inline void GetRes::set_wm(const std::string& value) {
  _internal_set_wm(value);
  // @@protoc_insertion_point(field_set:InforGuard_.GetRes.wm)
}
inline std::string* GetRes::mutable_wm() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.GetRes.wm)
  return _internal_mutable_wm();
}
inline const std::string& GetRes::_internal_wm() const {
  return wm_.Get();
}
inline void GetRes::_internal_set_wm(const std::string& value) {
  
  wm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetRes::set_wm(std::string&& value) {
  
  wm_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.GetRes.wm)
}
inline void GetRes::set_wm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  wm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.GetRes.wm)
}
inline void GetRes::set_wm(const void* value,
    size_t size) {
  
  wm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.GetRes.wm)
}
inline std::string* GetRes::_internal_mutable_wm() {
  
  return wm_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetRes::release_wm() {
  // @@protoc_insertion_point(field_release:InforGuard_.GetRes.wm)
  return wm_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetRes::set_allocated_wm(std::string* wm) {
  if (wm != nullptr) {
    
  } else {
    
  }
  wm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wm,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.GetRes.wm)
}
inline std::string* GetRes::unsafe_arena_release_wm() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.GetRes.wm)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return wm_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetRes::unsafe_arena_set_allocated_wm(
    std::string* wm) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (wm != nullptr) {
    
  } else {
    
  }
  wm_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      wm, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.GetRes.wm)
}

// int32 ret = 4;
inline void GetRes::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetRes::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetRes::ret() const {
  // @@protoc_insertion_point(field_get:InforGuard_.GetRes.ret)
  return _internal_ret();
}
inline void GetRes::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void GetRes::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:InforGuard_.GetRes.ret)
}

// -------------------------------------------------------------------

// AddReq

// .InforGuard_.netCallData call = 1;
inline bool AddReq::_internal_has_call() const {
  return this != internal_default_instance() && call_ != nullptr;
}
inline bool AddReq::has_call() const {
  return _internal_has_call();
}
inline const ::InforGuard_::netCallData& AddReq::_internal_call() const {
  const ::InforGuard_::netCallData* p = call_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::netCallData*>(
      &::InforGuard_::_netCallData_default_instance_);
}
inline const ::InforGuard_::netCallData& AddReq::call() const {
  // @@protoc_insertion_point(field_get:InforGuard_.AddReq.call)
  return _internal_call();
}
inline void AddReq::unsafe_arena_set_allocated_call(
    ::InforGuard_::netCallData* call) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  call_ = call;
  if (call) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.AddReq.call)
}
inline ::InforGuard_::netCallData* AddReq::release_call() {
  auto temp = unsafe_arena_release_call();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::netCallData* AddReq::unsafe_arena_release_call() {
  // @@protoc_insertion_point(field_release:InforGuard_.AddReq.call)
  
  ::InforGuard_::netCallData* temp = call_;
  call_ = nullptr;
  return temp;
}
inline ::InforGuard_::netCallData* AddReq::_internal_mutable_call() {
  
  if (call_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::netCallData>(GetArena());
    call_ = p;
  }
  return call_;
}
inline ::InforGuard_::netCallData* AddReq::mutable_call() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.AddReq.call)
  return _internal_mutable_call();
}
inline void AddReq::set_allocated_call(::InforGuard_::netCallData* call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  if (call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call)->GetArena();
    if (message_arena != submessage_arena) {
      call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call, submessage_arena);
    }
    
  } else {
    
  }
  call_ = call;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.AddReq.call)
}

// bytes filepath = 2;
inline void AddReq::clear_filepath() {
  filepath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddReq::filepath() const {
  // @@protoc_insertion_point(field_get:InforGuard_.AddReq.filepath)
  return _internal_filepath();
}
inline void AddReq::set_filepath(const std::string& value) {
  _internal_set_filepath(value);
  // @@protoc_insertion_point(field_set:InforGuard_.AddReq.filepath)
}
inline std::string* AddReq::mutable_filepath() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.AddReq.filepath)
  return _internal_mutable_filepath();
}
inline const std::string& AddReq::_internal_filepath() const {
  return filepath_.Get();
}
inline void AddReq::_internal_set_filepath(const std::string& value) {
  
  filepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddReq::set_filepath(std::string&& value) {
  
  filepath_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.AddReq.filepath)
}
inline void AddReq::set_filepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.AddReq.filepath)
}
inline void AddReq::set_filepath(const void* value,
    size_t size) {
  
  filepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.AddReq.filepath)
}
inline std::string* AddReq::_internal_mutable_filepath() {
  
  return filepath_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddReq::release_filepath() {
  // @@protoc_insertion_point(field_release:InforGuard_.AddReq.filepath)
  return filepath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddReq::set_allocated_filepath(std::string* filepath) {
  if (filepath != nullptr) {
    
  } else {
    
  }
  filepath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filepath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.AddReq.filepath)
}
inline std::string* AddReq::unsafe_arena_release_filepath() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.AddReq.filepath)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return filepath_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AddReq::unsafe_arena_set_allocated_filepath(
    std::string* filepath) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (filepath != nullptr) {
    
  } else {
    
  }
  filepath_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      filepath, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.AddReq.filepath)
}

// -------------------------------------------------------------------

// AddRes

// .InforGuard_.netCallData call = 1;
inline bool AddRes::_internal_has_call() const {
  return this != internal_default_instance() && call_ != nullptr;
}
inline bool AddRes::has_call() const {
  return _internal_has_call();
}
inline const ::InforGuard_::netCallData& AddRes::_internal_call() const {
  const ::InforGuard_::netCallData* p = call_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::netCallData*>(
      &::InforGuard_::_netCallData_default_instance_);
}
inline const ::InforGuard_::netCallData& AddRes::call() const {
  // @@protoc_insertion_point(field_get:InforGuard_.AddRes.call)
  return _internal_call();
}
inline void AddRes::unsafe_arena_set_allocated_call(
    ::InforGuard_::netCallData* call) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  call_ = call;
  if (call) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.AddRes.call)
}
inline ::InforGuard_::netCallData* AddRes::release_call() {
  auto temp = unsafe_arena_release_call();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::netCallData* AddRes::unsafe_arena_release_call() {
  // @@protoc_insertion_point(field_release:InforGuard_.AddRes.call)
  
  ::InforGuard_::netCallData* temp = call_;
  call_ = nullptr;
  return temp;
}
inline ::InforGuard_::netCallData* AddRes::_internal_mutable_call() {
  
  if (call_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::netCallData>(GetArena());
    call_ = p;
  }
  return call_;
}
inline ::InforGuard_::netCallData* AddRes::mutable_call() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.AddRes.call)
  return _internal_mutable_call();
}
inline void AddRes::set_allocated_call(::InforGuard_::netCallData* call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  if (call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call)->GetArena();
    if (message_arena != submessage_arena) {
      call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call, submessage_arena);
    }
    
  } else {
    
  }
  call_ = call;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.AddRes.call)
}

// .InforGuard_.ExceptionError ex = 2;
inline bool AddRes::_internal_has_ex() const {
  return this != internal_default_instance() && ex_ != nullptr;
}
inline bool AddRes::has_ex() const {
  return _internal_has_ex();
}
inline const ::InforGuard_::ExceptionError& AddRes::_internal_ex() const {
  const ::InforGuard_::ExceptionError* p = ex_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::ExceptionError*>(
      &::InforGuard_::_ExceptionError_default_instance_);
}
inline const ::InforGuard_::ExceptionError& AddRes::ex() const {
  // @@protoc_insertion_point(field_get:InforGuard_.AddRes.ex)
  return _internal_ex();
}
inline void AddRes::unsafe_arena_set_allocated_ex(
    ::InforGuard_::ExceptionError* ex) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  ex_ = ex;
  if (ex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.AddRes.ex)
}
inline ::InforGuard_::ExceptionError* AddRes::release_ex() {
  auto temp = unsafe_arena_release_ex();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::ExceptionError* AddRes::unsafe_arena_release_ex() {
  // @@protoc_insertion_point(field_release:InforGuard_.AddRes.ex)
  
  ::InforGuard_::ExceptionError* temp = ex_;
  ex_ = nullptr;
  return temp;
}
inline ::InforGuard_::ExceptionError* AddRes::_internal_mutable_ex() {
  
  if (ex_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::ExceptionError>(GetArena());
    ex_ = p;
  }
  return ex_;
}
inline ::InforGuard_::ExceptionError* AddRes::mutable_ex() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.AddRes.ex)
  return _internal_mutable_ex();
}
inline void AddRes::set_allocated_ex(::InforGuard_::ExceptionError* ex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  if (ex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex)->GetArena();
    if (message_arena != submessage_arena) {
      ex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ex, submessage_arena);
    }
    
  } else {
    
  }
  ex_ = ex;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.AddRes.ex)
}

// int32 ret = 3;
inline void AddRes::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddRes::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddRes::ret() const {
  // @@protoc_insertion_point(field_get:InforGuard_.AddRes.ret)
  return _internal_ret();
}
inline void AddRes::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void AddRes::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:InforGuard_.AddRes.ret)
}

// -------------------------------------------------------------------

// RemoveReq

// .InforGuard_.netCallData call = 1;
inline bool RemoveReq::_internal_has_call() const {
  return this != internal_default_instance() && call_ != nullptr;
}
inline bool RemoveReq::has_call() const {
  return _internal_has_call();
}
inline const ::InforGuard_::netCallData& RemoveReq::_internal_call() const {
  const ::InforGuard_::netCallData* p = call_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::netCallData*>(
      &::InforGuard_::_netCallData_default_instance_);
}
inline const ::InforGuard_::netCallData& RemoveReq::call() const {
  // @@protoc_insertion_point(field_get:InforGuard_.RemoveReq.call)
  return _internal_call();
}
inline void RemoveReq::unsafe_arena_set_allocated_call(
    ::InforGuard_::netCallData* call) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  call_ = call;
  if (call) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.RemoveReq.call)
}
inline ::InforGuard_::netCallData* RemoveReq::release_call() {
  auto temp = unsafe_arena_release_call();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::netCallData* RemoveReq::unsafe_arena_release_call() {
  // @@protoc_insertion_point(field_release:InforGuard_.RemoveReq.call)
  
  ::InforGuard_::netCallData* temp = call_;
  call_ = nullptr;
  return temp;
}
inline ::InforGuard_::netCallData* RemoveReq::_internal_mutable_call() {
  
  if (call_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::netCallData>(GetArena());
    call_ = p;
  }
  return call_;
}
inline ::InforGuard_::netCallData* RemoveReq::mutable_call() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.RemoveReq.call)
  return _internal_mutable_call();
}
inline void RemoveReq::set_allocated_call(::InforGuard_::netCallData* call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  if (call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call)->GetArena();
    if (message_arena != submessage_arena) {
      call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call, submessage_arena);
    }
    
  } else {
    
  }
  call_ = call;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.RemoveReq.call)
}

// bytes filepath = 2;
inline void RemoveReq::clear_filepath() {
  filepath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoveReq::filepath() const {
  // @@protoc_insertion_point(field_get:InforGuard_.RemoveReq.filepath)
  return _internal_filepath();
}
inline void RemoveReq::set_filepath(const std::string& value) {
  _internal_set_filepath(value);
  // @@protoc_insertion_point(field_set:InforGuard_.RemoveReq.filepath)
}
inline std::string* RemoveReq::mutable_filepath() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.RemoveReq.filepath)
  return _internal_mutable_filepath();
}
inline const std::string& RemoveReq::_internal_filepath() const {
  return filepath_.Get();
}
inline void RemoveReq::_internal_set_filepath(const std::string& value) {
  
  filepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoveReq::set_filepath(std::string&& value) {
  
  filepath_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.RemoveReq.filepath)
}
inline void RemoveReq::set_filepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.RemoveReq.filepath)
}
inline void RemoveReq::set_filepath(const void* value,
    size_t size) {
  
  filepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.RemoveReq.filepath)
}
inline std::string* RemoveReq::_internal_mutable_filepath() {
  
  return filepath_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoveReq::release_filepath() {
  // @@protoc_insertion_point(field_release:InforGuard_.RemoveReq.filepath)
  return filepath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveReq::set_allocated_filepath(std::string* filepath) {
  if (filepath != nullptr) {
    
  } else {
    
  }
  filepath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filepath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.RemoveReq.filepath)
}
inline std::string* RemoveReq::unsafe_arena_release_filepath() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.RemoveReq.filepath)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return filepath_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RemoveReq::unsafe_arena_set_allocated_filepath(
    std::string* filepath) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (filepath != nullptr) {
    
  } else {
    
  }
  filepath_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      filepath, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.RemoveReq.filepath)
}

// -------------------------------------------------------------------

// RemoveRes

// .InforGuard_.netCallData call = 1;
inline bool RemoveRes::_internal_has_call() const {
  return this != internal_default_instance() && call_ != nullptr;
}
inline bool RemoveRes::has_call() const {
  return _internal_has_call();
}
inline const ::InforGuard_::netCallData& RemoveRes::_internal_call() const {
  const ::InforGuard_::netCallData* p = call_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::netCallData*>(
      &::InforGuard_::_netCallData_default_instance_);
}
inline const ::InforGuard_::netCallData& RemoveRes::call() const {
  // @@protoc_insertion_point(field_get:InforGuard_.RemoveRes.call)
  return _internal_call();
}
inline void RemoveRes::unsafe_arena_set_allocated_call(
    ::InforGuard_::netCallData* call) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  call_ = call;
  if (call) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.RemoveRes.call)
}
inline ::InforGuard_::netCallData* RemoveRes::release_call() {
  auto temp = unsafe_arena_release_call();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::netCallData* RemoveRes::unsafe_arena_release_call() {
  // @@protoc_insertion_point(field_release:InforGuard_.RemoveRes.call)
  
  ::InforGuard_::netCallData* temp = call_;
  call_ = nullptr;
  return temp;
}
inline ::InforGuard_::netCallData* RemoveRes::_internal_mutable_call() {
  
  if (call_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::netCallData>(GetArena());
    call_ = p;
  }
  return call_;
}
inline ::InforGuard_::netCallData* RemoveRes::mutable_call() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.RemoveRes.call)
  return _internal_mutable_call();
}
inline void RemoveRes::set_allocated_call(::InforGuard_::netCallData* call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  if (call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call)->GetArena();
    if (message_arena != submessage_arena) {
      call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call, submessage_arena);
    }
    
  } else {
    
  }
  call_ = call;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.RemoveRes.call)
}

// .InforGuard_.ExceptionError ex = 2;
inline bool RemoveRes::_internal_has_ex() const {
  return this != internal_default_instance() && ex_ != nullptr;
}
inline bool RemoveRes::has_ex() const {
  return _internal_has_ex();
}
inline const ::InforGuard_::ExceptionError& RemoveRes::_internal_ex() const {
  const ::InforGuard_::ExceptionError* p = ex_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::ExceptionError*>(
      &::InforGuard_::_ExceptionError_default_instance_);
}
inline const ::InforGuard_::ExceptionError& RemoveRes::ex() const {
  // @@protoc_insertion_point(field_get:InforGuard_.RemoveRes.ex)
  return _internal_ex();
}
inline void RemoveRes::unsafe_arena_set_allocated_ex(
    ::InforGuard_::ExceptionError* ex) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  ex_ = ex;
  if (ex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.RemoveRes.ex)
}
inline ::InforGuard_::ExceptionError* RemoveRes::release_ex() {
  auto temp = unsafe_arena_release_ex();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::ExceptionError* RemoveRes::unsafe_arena_release_ex() {
  // @@protoc_insertion_point(field_release:InforGuard_.RemoveRes.ex)
  
  ::InforGuard_::ExceptionError* temp = ex_;
  ex_ = nullptr;
  return temp;
}
inline ::InforGuard_::ExceptionError* RemoveRes::_internal_mutable_ex() {
  
  if (ex_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::ExceptionError>(GetArena());
    ex_ = p;
  }
  return ex_;
}
inline ::InforGuard_::ExceptionError* RemoveRes::mutable_ex() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.RemoveRes.ex)
  return _internal_mutable_ex();
}
inline void RemoveRes::set_allocated_ex(::InforGuard_::ExceptionError* ex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  if (ex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex)->GetArena();
    if (message_arena != submessage_arena) {
      ex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ex, submessage_arena);
    }
    
  } else {
    
  }
  ex_ = ex;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.RemoveRes.ex)
}

// int32 ret = 3;
inline void RemoveRes::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RemoveRes::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RemoveRes::ret() const {
  // @@protoc_insertion_point(field_get:InforGuard_.RemoveRes.ret)
  return _internal_ret();
}
inline void RemoveRes::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void RemoveRes::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:InforGuard_.RemoveRes.ret)
}

// -------------------------------------------------------------------

// RenameReq

// .InforGuard_.netCallData call = 1;
inline bool RenameReq::_internal_has_call() const {
  return this != internal_default_instance() && call_ != nullptr;
}
inline bool RenameReq::has_call() const {
  return _internal_has_call();
}
inline const ::InforGuard_::netCallData& RenameReq::_internal_call() const {
  const ::InforGuard_::netCallData* p = call_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::netCallData*>(
      &::InforGuard_::_netCallData_default_instance_);
}
inline const ::InforGuard_::netCallData& RenameReq::call() const {
  // @@protoc_insertion_point(field_get:InforGuard_.RenameReq.call)
  return _internal_call();
}
inline void RenameReq::unsafe_arena_set_allocated_call(
    ::InforGuard_::netCallData* call) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  call_ = call;
  if (call) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.RenameReq.call)
}
inline ::InforGuard_::netCallData* RenameReq::release_call() {
  auto temp = unsafe_arena_release_call();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::netCallData* RenameReq::unsafe_arena_release_call() {
  // @@protoc_insertion_point(field_release:InforGuard_.RenameReq.call)
  
  ::InforGuard_::netCallData* temp = call_;
  call_ = nullptr;
  return temp;
}
inline ::InforGuard_::netCallData* RenameReq::_internal_mutable_call() {
  
  if (call_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::netCallData>(GetArena());
    call_ = p;
  }
  return call_;
}
inline ::InforGuard_::netCallData* RenameReq::mutable_call() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.RenameReq.call)
  return _internal_mutable_call();
}
inline void RenameReq::set_allocated_call(::InforGuard_::netCallData* call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  if (call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call)->GetArena();
    if (message_arena != submessage_arena) {
      call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call, submessage_arena);
    }
    
  } else {
    
  }
  call_ = call;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.RenameReq.call)
}

// bytes oldfilename = 2;
inline void RenameReq::clear_oldfilename() {
  oldfilename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RenameReq::oldfilename() const {
  // @@protoc_insertion_point(field_get:InforGuard_.RenameReq.oldfilename)
  return _internal_oldfilename();
}
inline void RenameReq::set_oldfilename(const std::string& value) {
  _internal_set_oldfilename(value);
  // @@protoc_insertion_point(field_set:InforGuard_.RenameReq.oldfilename)
}
inline std::string* RenameReq::mutable_oldfilename() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.RenameReq.oldfilename)
  return _internal_mutable_oldfilename();
}
inline const std::string& RenameReq::_internal_oldfilename() const {
  return oldfilename_.Get();
}
inline void RenameReq::_internal_set_oldfilename(const std::string& value) {
  
  oldfilename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RenameReq::set_oldfilename(std::string&& value) {
  
  oldfilename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.RenameReq.oldfilename)
}
inline void RenameReq::set_oldfilename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  oldfilename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.RenameReq.oldfilename)
}
inline void RenameReq::set_oldfilename(const void* value,
    size_t size) {
  
  oldfilename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.RenameReq.oldfilename)
}
inline std::string* RenameReq::_internal_mutable_oldfilename() {
  
  return oldfilename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RenameReq::release_oldfilename() {
  // @@protoc_insertion_point(field_release:InforGuard_.RenameReq.oldfilename)
  return oldfilename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RenameReq::set_allocated_oldfilename(std::string* oldfilename) {
  if (oldfilename != nullptr) {
    
  } else {
    
  }
  oldfilename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oldfilename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.RenameReq.oldfilename)
}
inline std::string* RenameReq::unsafe_arena_release_oldfilename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.RenameReq.oldfilename)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return oldfilename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RenameReq::unsafe_arena_set_allocated_oldfilename(
    std::string* oldfilename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (oldfilename != nullptr) {
    
  } else {
    
  }
  oldfilename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      oldfilename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.RenameReq.oldfilename)
}

// bytes newfilename = 3;
inline void RenameReq::clear_newfilename() {
  newfilename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RenameReq::newfilename() const {
  // @@protoc_insertion_point(field_get:InforGuard_.RenameReq.newfilename)
  return _internal_newfilename();
}
inline void RenameReq::set_newfilename(const std::string& value) {
  _internal_set_newfilename(value);
  // @@protoc_insertion_point(field_set:InforGuard_.RenameReq.newfilename)
}
inline std::string* RenameReq::mutable_newfilename() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.RenameReq.newfilename)
  return _internal_mutable_newfilename();
}
inline const std::string& RenameReq::_internal_newfilename() const {
  return newfilename_.Get();
}
inline void RenameReq::_internal_set_newfilename(const std::string& value) {
  
  newfilename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RenameReq::set_newfilename(std::string&& value) {
  
  newfilename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.RenameReq.newfilename)
}
inline void RenameReq::set_newfilename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  newfilename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.RenameReq.newfilename)
}
inline void RenameReq::set_newfilename(const void* value,
    size_t size) {
  
  newfilename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.RenameReq.newfilename)
}
inline std::string* RenameReq::_internal_mutable_newfilename() {
  
  return newfilename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RenameReq::release_newfilename() {
  // @@protoc_insertion_point(field_release:InforGuard_.RenameReq.newfilename)
  return newfilename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RenameReq::set_allocated_newfilename(std::string* newfilename) {
  if (newfilename != nullptr) {
    
  } else {
    
  }
  newfilename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), newfilename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.RenameReq.newfilename)
}
inline std::string* RenameReq::unsafe_arena_release_newfilename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.RenameReq.newfilename)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return newfilename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RenameReq::unsafe_arena_set_allocated_newfilename(
    std::string* newfilename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (newfilename != nullptr) {
    
  } else {
    
  }
  newfilename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      newfilename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.RenameReq.newfilename)
}

// -------------------------------------------------------------------

// RenameRes

// .InforGuard_.netCallData call = 1;
inline bool RenameRes::_internal_has_call() const {
  return this != internal_default_instance() && call_ != nullptr;
}
inline bool RenameRes::has_call() const {
  return _internal_has_call();
}
inline const ::InforGuard_::netCallData& RenameRes::_internal_call() const {
  const ::InforGuard_::netCallData* p = call_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::netCallData*>(
      &::InforGuard_::_netCallData_default_instance_);
}
inline const ::InforGuard_::netCallData& RenameRes::call() const {
  // @@protoc_insertion_point(field_get:InforGuard_.RenameRes.call)
  return _internal_call();
}
inline void RenameRes::unsafe_arena_set_allocated_call(
    ::InforGuard_::netCallData* call) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  call_ = call;
  if (call) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.RenameRes.call)
}
inline ::InforGuard_::netCallData* RenameRes::release_call() {
  auto temp = unsafe_arena_release_call();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::netCallData* RenameRes::unsafe_arena_release_call() {
  // @@protoc_insertion_point(field_release:InforGuard_.RenameRes.call)
  
  ::InforGuard_::netCallData* temp = call_;
  call_ = nullptr;
  return temp;
}
inline ::InforGuard_::netCallData* RenameRes::_internal_mutable_call() {
  
  if (call_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::netCallData>(GetArena());
    call_ = p;
  }
  return call_;
}
inline ::InforGuard_::netCallData* RenameRes::mutable_call() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.RenameRes.call)
  return _internal_mutable_call();
}
inline void RenameRes::set_allocated_call(::InforGuard_::netCallData* call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  if (call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call)->GetArena();
    if (message_arena != submessage_arena) {
      call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call, submessage_arena);
    }
    
  } else {
    
  }
  call_ = call;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.RenameRes.call)
}

// .InforGuard_.ExceptionError ex = 2;
inline bool RenameRes::_internal_has_ex() const {
  return this != internal_default_instance() && ex_ != nullptr;
}
inline bool RenameRes::has_ex() const {
  return _internal_has_ex();
}
inline const ::InforGuard_::ExceptionError& RenameRes::_internal_ex() const {
  const ::InforGuard_::ExceptionError* p = ex_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::ExceptionError*>(
      &::InforGuard_::_ExceptionError_default_instance_);
}
inline const ::InforGuard_::ExceptionError& RenameRes::ex() const {
  // @@protoc_insertion_point(field_get:InforGuard_.RenameRes.ex)
  return _internal_ex();
}
inline void RenameRes::unsafe_arena_set_allocated_ex(
    ::InforGuard_::ExceptionError* ex) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  ex_ = ex;
  if (ex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.RenameRes.ex)
}
inline ::InforGuard_::ExceptionError* RenameRes::release_ex() {
  auto temp = unsafe_arena_release_ex();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::ExceptionError* RenameRes::unsafe_arena_release_ex() {
  // @@protoc_insertion_point(field_release:InforGuard_.RenameRes.ex)
  
  ::InforGuard_::ExceptionError* temp = ex_;
  ex_ = nullptr;
  return temp;
}
inline ::InforGuard_::ExceptionError* RenameRes::_internal_mutable_ex() {
  
  if (ex_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::ExceptionError>(GetArena());
    ex_ = p;
  }
  return ex_;
}
inline ::InforGuard_::ExceptionError* RenameRes::mutable_ex() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.RenameRes.ex)
  return _internal_mutable_ex();
}
inline void RenameRes::set_allocated_ex(::InforGuard_::ExceptionError* ex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  if (ex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex)->GetArena();
    if (message_arena != submessage_arena) {
      ex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ex, submessage_arena);
    }
    
  } else {
    
  }
  ex_ = ex;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.RenameRes.ex)
}

// int32 ret = 3;
inline void RenameRes::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RenameRes::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RenameRes::ret() const {
  // @@protoc_insertion_point(field_get:InforGuard_.RenameRes.ret)
  return _internal_ret();
}
inline void RenameRes::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void RenameRes::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:InforGuard_.RenameRes.ret)
}

// -------------------------------------------------------------------

// VerifyReq

// .InforGuard_.netCallData call = 1;
inline bool VerifyReq::_internal_has_call() const {
  return this != internal_default_instance() && call_ != nullptr;
}
inline bool VerifyReq::has_call() const {
  return _internal_has_call();
}
inline const ::InforGuard_::netCallData& VerifyReq::_internal_call() const {
  const ::InforGuard_::netCallData* p = call_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::netCallData*>(
      &::InforGuard_::_netCallData_default_instance_);
}
inline const ::InforGuard_::netCallData& VerifyReq::call() const {
  // @@protoc_insertion_point(field_get:InforGuard_.VerifyReq.call)
  return _internal_call();
}
inline void VerifyReq::unsafe_arena_set_allocated_call(
    ::InforGuard_::netCallData* call) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  call_ = call;
  if (call) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.VerifyReq.call)
}
inline ::InforGuard_::netCallData* VerifyReq::release_call() {
  auto temp = unsafe_arena_release_call();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::netCallData* VerifyReq::unsafe_arena_release_call() {
  // @@protoc_insertion_point(field_release:InforGuard_.VerifyReq.call)
  
  ::InforGuard_::netCallData* temp = call_;
  call_ = nullptr;
  return temp;
}
inline ::InforGuard_::netCallData* VerifyReq::_internal_mutable_call() {
  
  if (call_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::netCallData>(GetArena());
    call_ = p;
  }
  return call_;
}
inline ::InforGuard_::netCallData* VerifyReq::mutable_call() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.VerifyReq.call)
  return _internal_mutable_call();
}
inline void VerifyReq::set_allocated_call(::InforGuard_::netCallData* call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  if (call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call)->GetArena();
    if (message_arena != submessage_arena) {
      call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call, submessage_arena);
    }
    
  } else {
    
  }
  call_ = call;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.VerifyReq.call)
}

// bytes sFileName = 2;
inline void VerifyReq::clear_sfilename() {
  sfilename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VerifyReq::sfilename() const {
  // @@protoc_insertion_point(field_get:InforGuard_.VerifyReq.sFileName)
  return _internal_sfilename();
}
inline void VerifyReq::set_sfilename(const std::string& value) {
  _internal_set_sfilename(value);
  // @@protoc_insertion_point(field_set:InforGuard_.VerifyReq.sFileName)
}
inline std::string* VerifyReq::mutable_sfilename() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.VerifyReq.sFileName)
  return _internal_mutable_sfilename();
}
inline const std::string& VerifyReq::_internal_sfilename() const {
  return sfilename_.Get();
}
inline void VerifyReq::_internal_set_sfilename(const std::string& value) {
  
  sfilename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VerifyReq::set_sfilename(std::string&& value) {
  
  sfilename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.VerifyReq.sFileName)
}
inline void VerifyReq::set_sfilename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sfilename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.VerifyReq.sFileName)
}
inline void VerifyReq::set_sfilename(const void* value,
    size_t size) {
  
  sfilename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.VerifyReq.sFileName)
}
inline std::string* VerifyReq::_internal_mutable_sfilename() {
  
  return sfilename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VerifyReq::release_sfilename() {
  // @@protoc_insertion_point(field_release:InforGuard_.VerifyReq.sFileName)
  return sfilename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VerifyReq::set_allocated_sfilename(std::string* sfilename) {
  if (sfilename != nullptr) {
    
  } else {
    
  }
  sfilename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sfilename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.VerifyReq.sFileName)
}
inline std::string* VerifyReq::unsafe_arena_release_sfilename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.VerifyReq.sFileName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sfilename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VerifyReq::unsafe_arena_set_allocated_sfilename(
    std::string* sfilename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sfilename != nullptr) {
    
  } else {
    
  }
  sfilename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sfilename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.VerifyReq.sFileName)
}

// int32 nFileSize = 3;
inline void VerifyReq::clear_nfilesize() {
  nfilesize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VerifyReq::_internal_nfilesize() const {
  return nfilesize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VerifyReq::nfilesize() const {
  // @@protoc_insertion_point(field_get:InforGuard_.VerifyReq.nFileSize)
  return _internal_nfilesize();
}
inline void VerifyReq::_internal_set_nfilesize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nfilesize_ = value;
}
inline void VerifyReq::set_nfilesize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nfilesize(value);
  // @@protoc_insertion_point(field_set:InforGuard_.VerifyReq.nFileSize)
}

// bytes sWm = 4;
inline void VerifyReq::clear_swm() {
  swm_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VerifyReq::swm() const {
  // @@protoc_insertion_point(field_get:InforGuard_.VerifyReq.sWm)
  return _internal_swm();
}
inline void VerifyReq::set_swm(const std::string& value) {
  _internal_set_swm(value);
  // @@protoc_insertion_point(field_set:InforGuard_.VerifyReq.sWm)
}
inline std::string* VerifyReq::mutable_swm() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.VerifyReq.sWm)
  return _internal_mutable_swm();
}
inline const std::string& VerifyReq::_internal_swm() const {
  return swm_.Get();
}
inline void VerifyReq::_internal_set_swm(const std::string& value) {
  
  swm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VerifyReq::set_swm(std::string&& value) {
  
  swm_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.VerifyReq.sWm)
}
inline void VerifyReq::set_swm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  swm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.VerifyReq.sWm)
}
inline void VerifyReq::set_swm(const void* value,
    size_t size) {
  
  swm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.VerifyReq.sWm)
}
inline std::string* VerifyReq::_internal_mutable_swm() {
  
  return swm_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VerifyReq::release_swm() {
  // @@protoc_insertion_point(field_release:InforGuard_.VerifyReq.sWm)
  return swm_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VerifyReq::set_allocated_swm(std::string* swm) {
  if (swm != nullptr) {
    
  } else {
    
  }
  swm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), swm,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.VerifyReq.sWm)
}
inline std::string* VerifyReq::unsafe_arena_release_swm() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.VerifyReq.sWm)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return swm_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VerifyReq::unsafe_arena_set_allocated_swm(
    std::string* swm) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (swm != nullptr) {
    
  } else {
    
  }
  swm_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      swm, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.VerifyReq.sWm)
}

// bool bSimpleSync = 5;
inline void VerifyReq::clear_bsimplesync() {
  bsimplesync_ = false;
}
inline bool VerifyReq::_internal_bsimplesync() const {
  return bsimplesync_;
}
inline bool VerifyReq::bsimplesync() const {
  // @@protoc_insertion_point(field_get:InforGuard_.VerifyReq.bSimpleSync)
  return _internal_bsimplesync();
}
inline void VerifyReq::_internal_set_bsimplesync(bool value) {
  
  bsimplesync_ = value;
}
inline void VerifyReq::set_bsimplesync(bool value) {
  _internal_set_bsimplesync(value);
  // @@protoc_insertion_point(field_set:InforGuard_.VerifyReq.bSimpleSync)
}

// -------------------------------------------------------------------

// VerifyRes

// .InforGuard_.netCallData call = 1;
inline bool VerifyRes::_internal_has_call() const {
  return this != internal_default_instance() && call_ != nullptr;
}
inline bool VerifyRes::has_call() const {
  return _internal_has_call();
}
inline const ::InforGuard_::netCallData& VerifyRes::_internal_call() const {
  const ::InforGuard_::netCallData* p = call_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::netCallData*>(
      &::InforGuard_::_netCallData_default_instance_);
}
inline const ::InforGuard_::netCallData& VerifyRes::call() const {
  // @@protoc_insertion_point(field_get:InforGuard_.VerifyRes.call)
  return _internal_call();
}
inline void VerifyRes::unsafe_arena_set_allocated_call(
    ::InforGuard_::netCallData* call) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  call_ = call;
  if (call) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.VerifyRes.call)
}
inline ::InforGuard_::netCallData* VerifyRes::release_call() {
  auto temp = unsafe_arena_release_call();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::netCallData* VerifyRes::unsafe_arena_release_call() {
  // @@protoc_insertion_point(field_release:InforGuard_.VerifyRes.call)
  
  ::InforGuard_::netCallData* temp = call_;
  call_ = nullptr;
  return temp;
}
inline ::InforGuard_::netCallData* VerifyRes::_internal_mutable_call() {
  
  if (call_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::netCallData>(GetArena());
    call_ = p;
  }
  return call_;
}
inline ::InforGuard_::netCallData* VerifyRes::mutable_call() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.VerifyRes.call)
  return _internal_mutable_call();
}
inline void VerifyRes::set_allocated_call(::InforGuard_::netCallData* call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  if (call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call)->GetArena();
    if (message_arena != submessage_arena) {
      call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call, submessage_arena);
    }
    
  } else {
    
  }
  call_ = call;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.VerifyRes.call)
}

// .InforGuard_.ExceptionError ex = 2;
inline bool VerifyRes::_internal_has_ex() const {
  return this != internal_default_instance() && ex_ != nullptr;
}
inline bool VerifyRes::has_ex() const {
  return _internal_has_ex();
}
inline const ::InforGuard_::ExceptionError& VerifyRes::_internal_ex() const {
  const ::InforGuard_::ExceptionError* p = ex_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::ExceptionError*>(
      &::InforGuard_::_ExceptionError_default_instance_);
}
inline const ::InforGuard_::ExceptionError& VerifyRes::ex() const {
  // @@protoc_insertion_point(field_get:InforGuard_.VerifyRes.ex)
  return _internal_ex();
}
inline void VerifyRes::unsafe_arena_set_allocated_ex(
    ::InforGuard_::ExceptionError* ex) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  ex_ = ex;
  if (ex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.VerifyRes.ex)
}
inline ::InforGuard_::ExceptionError* VerifyRes::release_ex() {
  auto temp = unsafe_arena_release_ex();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::ExceptionError* VerifyRes::unsafe_arena_release_ex() {
  // @@protoc_insertion_point(field_release:InforGuard_.VerifyRes.ex)
  
  ::InforGuard_::ExceptionError* temp = ex_;
  ex_ = nullptr;
  return temp;
}
inline ::InforGuard_::ExceptionError* VerifyRes::_internal_mutable_ex() {
  
  if (ex_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::ExceptionError>(GetArena());
    ex_ = p;
  }
  return ex_;
}
inline ::InforGuard_::ExceptionError* VerifyRes::mutable_ex() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.VerifyRes.ex)
  return _internal_mutable_ex();
}
inline void VerifyRes::set_allocated_ex(::InforGuard_::ExceptionError* ex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  if (ex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex)->GetArena();
    if (message_arena != submessage_arena) {
      ex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ex, submessage_arena);
    }
    
  } else {
    
  }
  ex_ = ex;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.VerifyRes.ex)
}

// int32 ret = 3;
inline void VerifyRes::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VerifyRes::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VerifyRes::ret() const {
  // @@protoc_insertion_point(field_get:InforGuard_.VerifyRes.ret)
  return _internal_ret();
}
inline void VerifyRes::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void VerifyRes::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:InforGuard_.VerifyRes.ret)
}

// -------------------------------------------------------------------

// VerifyForFilterReq

// bytes files = 1;
inline void VerifyForFilterReq::clear_files() {
  files_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VerifyForFilterReq::files() const {
  // @@protoc_insertion_point(field_get:InforGuard_.VerifyForFilterReq.files)
  return _internal_files();
}
inline void VerifyForFilterReq::set_files(const std::string& value) {
  _internal_set_files(value);
  // @@protoc_insertion_point(field_set:InforGuard_.VerifyForFilterReq.files)
}
inline std::string* VerifyForFilterReq::mutable_files() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.VerifyForFilterReq.files)
  return _internal_mutable_files();
}
inline const std::string& VerifyForFilterReq::_internal_files() const {
  return files_.Get();
}
inline void VerifyForFilterReq::_internal_set_files(const std::string& value) {
  
  files_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VerifyForFilterReq::set_files(std::string&& value) {
  
  files_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.VerifyForFilterReq.files)
}
inline void VerifyForFilterReq::set_files(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  files_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.VerifyForFilterReq.files)
}
inline void VerifyForFilterReq::set_files(const void* value,
    size_t size) {
  
  files_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.VerifyForFilterReq.files)
}
inline std::string* VerifyForFilterReq::_internal_mutable_files() {
  
  return files_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VerifyForFilterReq::release_files() {
  // @@protoc_insertion_point(field_release:InforGuard_.VerifyForFilterReq.files)
  return files_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VerifyForFilterReq::set_allocated_files(std::string* files) {
  if (files != nullptr) {
    
  } else {
    
  }
  files_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), files,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.VerifyForFilterReq.files)
}
inline std::string* VerifyForFilterReq::unsafe_arena_release_files() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.VerifyForFilterReq.files)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return files_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VerifyForFilterReq::unsafe_arena_set_allocated_files(
    std::string* files) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (files != nullptr) {
    
  } else {
    
  }
  files_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      files, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.VerifyForFilterReq.files)
}

// -------------------------------------------------------------------

// VerifyForFilterRes

// .InforGuard_.ExceptionError ex = 1;
inline bool VerifyForFilterRes::_internal_has_ex() const {
  return this != internal_default_instance() && ex_ != nullptr;
}
inline bool VerifyForFilterRes::has_ex() const {
  return _internal_has_ex();
}
inline const ::InforGuard_::ExceptionError& VerifyForFilterRes::_internal_ex() const {
  const ::InforGuard_::ExceptionError* p = ex_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::ExceptionError*>(
      &::InforGuard_::_ExceptionError_default_instance_);
}
inline const ::InforGuard_::ExceptionError& VerifyForFilterRes::ex() const {
  // @@protoc_insertion_point(field_get:InforGuard_.VerifyForFilterRes.ex)
  return _internal_ex();
}
inline void VerifyForFilterRes::unsafe_arena_set_allocated_ex(
    ::InforGuard_::ExceptionError* ex) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  ex_ = ex;
  if (ex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.VerifyForFilterRes.ex)
}
inline ::InforGuard_::ExceptionError* VerifyForFilterRes::release_ex() {
  auto temp = unsafe_arena_release_ex();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::ExceptionError* VerifyForFilterRes::unsafe_arena_release_ex() {
  // @@protoc_insertion_point(field_release:InforGuard_.VerifyForFilterRes.ex)
  
  ::InforGuard_::ExceptionError* temp = ex_;
  ex_ = nullptr;
  return temp;
}
inline ::InforGuard_::ExceptionError* VerifyForFilterRes::_internal_mutable_ex() {
  
  if (ex_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::ExceptionError>(GetArena());
    ex_ = p;
  }
  return ex_;
}
inline ::InforGuard_::ExceptionError* VerifyForFilterRes::mutable_ex() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.VerifyForFilterRes.ex)
  return _internal_mutable_ex();
}
inline void VerifyForFilterRes::set_allocated_ex(::InforGuard_::ExceptionError* ex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  if (ex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex)->GetArena();
    if (message_arena != submessage_arena) {
      ex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ex, submessage_arena);
    }
    
  } else {
    
  }
  ex_ = ex;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.VerifyForFilterRes.ex)
}

// int32 ret = 2;
inline void VerifyForFilterRes::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VerifyForFilterRes::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VerifyForFilterRes::ret() const {
  // @@protoc_insertion_point(field_get:InforGuard_.VerifyForFilterRes.ret)
  return _internal_ret();
}
inline void VerifyForFilterRes::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void VerifyForFilterRes::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:InforGuard_.VerifyForFilterRes.ret)
}

// -------------------------------------------------------------------

// RequestResumeReq

// bytes filename = 1;
inline void RequestResumeReq::clear_filename() {
  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RequestResumeReq::filename() const {
  // @@protoc_insertion_point(field_get:InforGuard_.RequestResumeReq.filename)
  return _internal_filename();
}
inline void RequestResumeReq::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:InforGuard_.RequestResumeReq.filename)
}
inline std::string* RequestResumeReq::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.RequestResumeReq.filename)
  return _internal_mutable_filename();
}
inline const std::string& RequestResumeReq::_internal_filename() const {
  return filename_.Get();
}
inline void RequestResumeReq::_internal_set_filename(const std::string& value) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RequestResumeReq::set_filename(std::string&& value) {
  
  filename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InforGuard_.RequestResumeReq.filename)
}
inline void RequestResumeReq::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InforGuard_.RequestResumeReq.filename)
}
inline void RequestResumeReq::set_filename(const void* value,
    size_t size) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InforGuard_.RequestResumeReq.filename)
}
inline std::string* RequestResumeReq::_internal_mutable_filename() {
  
  return filename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RequestResumeReq::release_filename() {
  // @@protoc_insertion_point(field_release:InforGuard_.RequestResumeReq.filename)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestResumeReq::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.RequestResumeReq.filename)
}
inline std::string* RequestResumeReq::unsafe_arena_release_filename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InforGuard_.RequestResumeReq.filename)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return filename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RequestResumeReq::unsafe_arena_set_allocated_filename(
    std::string* filename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      filename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.RequestResumeReq.filename)
}

// -------------------------------------------------------------------

// RequestResumeRes

// .InforGuard_.ExceptionError ex = 1;
inline bool RequestResumeRes::_internal_has_ex() const {
  return this != internal_default_instance() && ex_ != nullptr;
}
inline bool RequestResumeRes::has_ex() const {
  return _internal_has_ex();
}
inline const ::InforGuard_::ExceptionError& RequestResumeRes::_internal_ex() const {
  const ::InforGuard_::ExceptionError* p = ex_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InforGuard_::ExceptionError*>(
      &::InforGuard_::_ExceptionError_default_instance_);
}
inline const ::InforGuard_::ExceptionError& RequestResumeRes::ex() const {
  // @@protoc_insertion_point(field_get:InforGuard_.RequestResumeRes.ex)
  return _internal_ex();
}
inline void RequestResumeRes::unsafe_arena_set_allocated_ex(
    ::InforGuard_::ExceptionError* ex) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  ex_ = ex;
  if (ex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InforGuard_.RequestResumeRes.ex)
}
inline ::InforGuard_::ExceptionError* RequestResumeRes::release_ex() {
  auto temp = unsafe_arena_release_ex();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InforGuard_::ExceptionError* RequestResumeRes::unsafe_arena_release_ex() {
  // @@protoc_insertion_point(field_release:InforGuard_.RequestResumeRes.ex)
  
  ::InforGuard_::ExceptionError* temp = ex_;
  ex_ = nullptr;
  return temp;
}
inline ::InforGuard_::ExceptionError* RequestResumeRes::_internal_mutable_ex() {
  
  if (ex_ == nullptr) {
    auto* p = CreateMaybeMessage<::InforGuard_::ExceptionError>(GetArena());
    ex_ = p;
  }
  return ex_;
}
inline ::InforGuard_::ExceptionError* RequestResumeRes::mutable_ex() {
  // @@protoc_insertion_point(field_mutable:InforGuard_.RequestResumeRes.ex)
  return _internal_mutable_ex();
}
inline void RequestResumeRes::set_allocated_ex(::InforGuard_::ExceptionError* ex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_);
  }
  if (ex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex)->GetArena();
    if (message_arena != submessage_arena) {
      ex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ex, submessage_arena);
    }
    
  } else {
    
  }
  ex_ = ex;
  // @@protoc_insertion_point(field_set_allocated:InforGuard_.RequestResumeRes.ex)
}

// int32 ret = 2;
inline void RequestResumeRes::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestResumeRes::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestResumeRes::ret() const {
  // @@protoc_insertion_point(field_get:InforGuard_.RequestResumeRes.ret)
  return _internal_ret();
}
inline void RequestResumeRes::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void RequestResumeRes::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:InforGuard_.RequestResumeRes.ret)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace InforGuard_

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_NetWaterMark_2eproto
