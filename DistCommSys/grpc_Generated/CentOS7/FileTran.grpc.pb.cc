// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: FileTran.proto

#include "FileTran.pb.h"
#include "FileTran.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace InforGuard_ {

static const char* FileTran_method_names[] = {
  "/InforGuard_.FileTran/Check",
  "/InforGuard_.FileTran/GetFileBlock",
  "/InforGuard_.FileTran/PutFileBlock",
  "/InforGuard_.FileTran/MakeDirectory",
  "/InforGuard_.FileTran/MoveFileIn",
  "/InforGuard_.FileTran/MoveFileOut",
  "/InforGuard_.FileTran/RenameFile",
  "/InforGuard_.FileTran/QueryBasePath",
  "/InforGuard_.FileTran/isFileExist",
  "/InforGuard_.FileTran/setFileTime",
  "/InforGuard_.FileTran/getFileTime",
  "/InforGuard_.FileTran/sendFileList",
  "/InforGuard_.FileTran/sendAccess",
  "/InforGuard_.FileTran/checkFileList",
};

std::unique_ptr< FileTran::Stub> FileTran::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FileTran::Stub> stub(new FileTran::Stub(channel));
  return stub;
}

FileTran::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Check_(FileTran_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFileBlock_(FileTran_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PutFileBlock_(FileTran_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MakeDirectory_(FileTran_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveFileIn_(FileTran_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveFileOut_(FileTran_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RenameFile_(FileTran_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryBasePath_(FileTran_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isFileExist_(FileTran_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setFileTime_(FileTran_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getFileTime_(FileTran_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_sendFileList_(FileTran_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_sendAccess_(FileTran_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_checkFileList_(FileTran_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FileTran::Stub::Check(::grpc::ClientContext* context, const ::InforGuard_::CheckReq& request, ::InforGuard_::CheckRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Check_, context, request, response);
}

void FileTran::Stub::experimental_async::Check(::grpc::ClientContext* context, const ::InforGuard_::CheckReq* request, ::InforGuard_::CheckRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Check_, context, request, response, std::move(f));
}

void FileTran::Stub::experimental_async::Check(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::CheckRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Check_, context, request, response, std::move(f));
}

void FileTran::Stub::experimental_async::Check(::grpc::ClientContext* context, const ::InforGuard_::CheckReq* request, ::InforGuard_::CheckRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Check_, context, request, response, reactor);
}

void FileTran::Stub::experimental_async::Check(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::CheckRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Check_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::CheckRes>* FileTran::Stub::AsyncCheckRaw(::grpc::ClientContext* context, const ::InforGuard_::CheckReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::CheckRes>::Create(channel_.get(), cq, rpcmethod_Check_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::CheckRes>* FileTran::Stub::PrepareAsyncCheckRaw(::grpc::ClientContext* context, const ::InforGuard_::CheckReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::CheckRes>::Create(channel_.get(), cq, rpcmethod_Check_, context, request, false);
}

::grpc::Status FileTran::Stub::GetFileBlock(::grpc::ClientContext* context, const ::InforGuard_::GetFileBlockReq& request, ::InforGuard_::GetFileBlockRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetFileBlock_, context, request, response);
}

void FileTran::Stub::experimental_async::GetFileBlock(::grpc::ClientContext* context, const ::InforGuard_::GetFileBlockReq* request, ::InforGuard_::GetFileBlockRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetFileBlock_, context, request, response, std::move(f));
}

void FileTran::Stub::experimental_async::GetFileBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetFileBlockRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetFileBlock_, context, request, response, std::move(f));
}

void FileTran::Stub::experimental_async::GetFileBlock(::grpc::ClientContext* context, const ::InforGuard_::GetFileBlockReq* request, ::InforGuard_::GetFileBlockRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetFileBlock_, context, request, response, reactor);
}

void FileTran::Stub::experimental_async::GetFileBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::GetFileBlockRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetFileBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::GetFileBlockRes>* FileTran::Stub::AsyncGetFileBlockRaw(::grpc::ClientContext* context, const ::InforGuard_::GetFileBlockReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::GetFileBlockRes>::Create(channel_.get(), cq, rpcmethod_GetFileBlock_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::GetFileBlockRes>* FileTran::Stub::PrepareAsyncGetFileBlockRaw(::grpc::ClientContext* context, const ::InforGuard_::GetFileBlockReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::GetFileBlockRes>::Create(channel_.get(), cq, rpcmethod_GetFileBlock_, context, request, false);
}

::grpc::Status FileTran::Stub::PutFileBlock(::grpc::ClientContext* context, const ::InforGuard_::PutFileBlockReq& request, ::InforGuard_::PutFileBlockRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PutFileBlock_, context, request, response);
}

void FileTran::Stub::experimental_async::PutFileBlock(::grpc::ClientContext* context, const ::InforGuard_::PutFileBlockReq* request, ::InforGuard_::PutFileBlockRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PutFileBlock_, context, request, response, std::move(f));
}

void FileTran::Stub::experimental_async::PutFileBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::PutFileBlockRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PutFileBlock_, context, request, response, std::move(f));
}

void FileTran::Stub::experimental_async::PutFileBlock(::grpc::ClientContext* context, const ::InforGuard_::PutFileBlockReq* request, ::InforGuard_::PutFileBlockRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PutFileBlock_, context, request, response, reactor);
}

void FileTran::Stub::experimental_async::PutFileBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::PutFileBlockRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PutFileBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::PutFileBlockRes>* FileTran::Stub::AsyncPutFileBlockRaw(::grpc::ClientContext* context, const ::InforGuard_::PutFileBlockReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::PutFileBlockRes>::Create(channel_.get(), cq, rpcmethod_PutFileBlock_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::PutFileBlockRes>* FileTran::Stub::PrepareAsyncPutFileBlockRaw(::grpc::ClientContext* context, const ::InforGuard_::PutFileBlockReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::PutFileBlockRes>::Create(channel_.get(), cq, rpcmethod_PutFileBlock_, context, request, false);
}

::grpc::Status FileTran::Stub::MakeDirectory(::grpc::ClientContext* context, const ::InforGuard_::MakeDirectoryReq& request, ::InforGuard_::MakeDirectoryRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MakeDirectory_, context, request, response);
}

void FileTran::Stub::experimental_async::MakeDirectory(::grpc::ClientContext* context, const ::InforGuard_::MakeDirectoryReq* request, ::InforGuard_::MakeDirectoryRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MakeDirectory_, context, request, response, std::move(f));
}

void FileTran::Stub::experimental_async::MakeDirectory(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::MakeDirectoryRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MakeDirectory_, context, request, response, std::move(f));
}

void FileTran::Stub::experimental_async::MakeDirectory(::grpc::ClientContext* context, const ::InforGuard_::MakeDirectoryReq* request, ::InforGuard_::MakeDirectoryRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MakeDirectory_, context, request, response, reactor);
}

void FileTran::Stub::experimental_async::MakeDirectory(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::MakeDirectoryRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MakeDirectory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::MakeDirectoryRes>* FileTran::Stub::AsyncMakeDirectoryRaw(::grpc::ClientContext* context, const ::InforGuard_::MakeDirectoryReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::MakeDirectoryRes>::Create(channel_.get(), cq, rpcmethod_MakeDirectory_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::MakeDirectoryRes>* FileTran::Stub::PrepareAsyncMakeDirectoryRaw(::grpc::ClientContext* context, const ::InforGuard_::MakeDirectoryReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::MakeDirectoryRes>::Create(channel_.get(), cq, rpcmethod_MakeDirectory_, context, request, false);
}

::grpc::Status FileTran::Stub::MoveFileIn(::grpc::ClientContext* context, const ::InforGuard_::MoveFileInReq& request, ::InforGuard_::MoveFileInRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MoveFileIn_, context, request, response);
}

void FileTran::Stub::experimental_async::MoveFileIn(::grpc::ClientContext* context, const ::InforGuard_::MoveFileInReq* request, ::InforGuard_::MoveFileInRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveFileIn_, context, request, response, std::move(f));
}

void FileTran::Stub::experimental_async::MoveFileIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::MoveFileInRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveFileIn_, context, request, response, std::move(f));
}

void FileTran::Stub::experimental_async::MoveFileIn(::grpc::ClientContext* context, const ::InforGuard_::MoveFileInReq* request, ::InforGuard_::MoveFileInRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveFileIn_, context, request, response, reactor);
}

void FileTran::Stub::experimental_async::MoveFileIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::MoveFileInRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveFileIn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::MoveFileInRes>* FileTran::Stub::AsyncMoveFileInRaw(::grpc::ClientContext* context, const ::InforGuard_::MoveFileInReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::MoveFileInRes>::Create(channel_.get(), cq, rpcmethod_MoveFileIn_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::MoveFileInRes>* FileTran::Stub::PrepareAsyncMoveFileInRaw(::grpc::ClientContext* context, const ::InforGuard_::MoveFileInReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::MoveFileInRes>::Create(channel_.get(), cq, rpcmethod_MoveFileIn_, context, request, false);
}

::grpc::Status FileTran::Stub::MoveFileOut(::grpc::ClientContext* context, const ::InforGuard_::MoveFileOutReq& request, ::InforGuard_::MoveFileOutRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MoveFileOut_, context, request, response);
}

void FileTran::Stub::experimental_async::MoveFileOut(::grpc::ClientContext* context, const ::InforGuard_::MoveFileOutReq* request, ::InforGuard_::MoveFileOutRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveFileOut_, context, request, response, std::move(f));
}

void FileTran::Stub::experimental_async::MoveFileOut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::MoveFileOutRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveFileOut_, context, request, response, std::move(f));
}

void FileTran::Stub::experimental_async::MoveFileOut(::grpc::ClientContext* context, const ::InforGuard_::MoveFileOutReq* request, ::InforGuard_::MoveFileOutRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveFileOut_, context, request, response, reactor);
}

void FileTran::Stub::experimental_async::MoveFileOut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::MoveFileOutRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveFileOut_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::MoveFileOutRes>* FileTran::Stub::AsyncMoveFileOutRaw(::grpc::ClientContext* context, const ::InforGuard_::MoveFileOutReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::MoveFileOutRes>::Create(channel_.get(), cq, rpcmethod_MoveFileOut_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::MoveFileOutRes>* FileTran::Stub::PrepareAsyncMoveFileOutRaw(::grpc::ClientContext* context, const ::InforGuard_::MoveFileOutReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::MoveFileOutRes>::Create(channel_.get(), cq, rpcmethod_MoveFileOut_, context, request, false);
}

::grpc::Status FileTran::Stub::RenameFile(::grpc::ClientContext* context, const ::InforGuard_::RenameFileReq& request, ::InforGuard_::RenameFileRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RenameFile_, context, request, response);
}

void FileTran::Stub::experimental_async::RenameFile(::grpc::ClientContext* context, const ::InforGuard_::RenameFileReq* request, ::InforGuard_::RenameFileRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RenameFile_, context, request, response, std::move(f));
}

void FileTran::Stub::experimental_async::RenameFile(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::RenameFileRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RenameFile_, context, request, response, std::move(f));
}

void FileTran::Stub::experimental_async::RenameFile(::grpc::ClientContext* context, const ::InforGuard_::RenameFileReq* request, ::InforGuard_::RenameFileRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RenameFile_, context, request, response, reactor);
}

void FileTran::Stub::experimental_async::RenameFile(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::RenameFileRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RenameFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::RenameFileRes>* FileTran::Stub::AsyncRenameFileRaw(::grpc::ClientContext* context, const ::InforGuard_::RenameFileReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::RenameFileRes>::Create(channel_.get(), cq, rpcmethod_RenameFile_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::RenameFileRes>* FileTran::Stub::PrepareAsyncRenameFileRaw(::grpc::ClientContext* context, const ::InforGuard_::RenameFileReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::RenameFileRes>::Create(channel_.get(), cq, rpcmethod_RenameFile_, context, request, false);
}

::grpc::Status FileTran::Stub::QueryBasePath(::grpc::ClientContext* context, const ::InforGuard_::QueryBasePathReq& request, ::InforGuard_::QueryBasePathRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_QueryBasePath_, context, request, response);
}

void FileTran::Stub::experimental_async::QueryBasePath(::grpc::ClientContext* context, const ::InforGuard_::QueryBasePathReq* request, ::InforGuard_::QueryBasePathRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_QueryBasePath_, context, request, response, std::move(f));
}

void FileTran::Stub::experimental_async::QueryBasePath(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::QueryBasePathRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_QueryBasePath_, context, request, response, std::move(f));
}

void FileTran::Stub::experimental_async::QueryBasePath(::grpc::ClientContext* context, const ::InforGuard_::QueryBasePathReq* request, ::InforGuard_::QueryBasePathRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_QueryBasePath_, context, request, response, reactor);
}

void FileTran::Stub::experimental_async::QueryBasePath(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::QueryBasePathRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_QueryBasePath_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::QueryBasePathRes>* FileTran::Stub::AsyncQueryBasePathRaw(::grpc::ClientContext* context, const ::InforGuard_::QueryBasePathReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::QueryBasePathRes>::Create(channel_.get(), cq, rpcmethod_QueryBasePath_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::QueryBasePathRes>* FileTran::Stub::PrepareAsyncQueryBasePathRaw(::grpc::ClientContext* context, const ::InforGuard_::QueryBasePathReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::QueryBasePathRes>::Create(channel_.get(), cq, rpcmethod_QueryBasePath_, context, request, false);
}

::grpc::Status FileTran::Stub::isFileExist(::grpc::ClientContext* context, const ::InforGuard_::isFileExistReq& request, ::InforGuard_::isFileExistRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_isFileExist_, context, request, response);
}

void FileTran::Stub::experimental_async::isFileExist(::grpc::ClientContext* context, const ::InforGuard_::isFileExistReq* request, ::InforGuard_::isFileExistRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_isFileExist_, context, request, response, std::move(f));
}

void FileTran::Stub::experimental_async::isFileExist(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::isFileExistRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_isFileExist_, context, request, response, std::move(f));
}

void FileTran::Stub::experimental_async::isFileExist(::grpc::ClientContext* context, const ::InforGuard_::isFileExistReq* request, ::InforGuard_::isFileExistRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_isFileExist_, context, request, response, reactor);
}

void FileTran::Stub::experimental_async::isFileExist(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::isFileExistRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_isFileExist_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::isFileExistRes>* FileTran::Stub::AsyncisFileExistRaw(::grpc::ClientContext* context, const ::InforGuard_::isFileExistReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::isFileExistRes>::Create(channel_.get(), cq, rpcmethod_isFileExist_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::isFileExistRes>* FileTran::Stub::PrepareAsyncisFileExistRaw(::grpc::ClientContext* context, const ::InforGuard_::isFileExistReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::isFileExistRes>::Create(channel_.get(), cq, rpcmethod_isFileExist_, context, request, false);
}

::grpc::Status FileTran::Stub::setFileTime(::grpc::ClientContext* context, const ::InforGuard_::setFileTimeReq& request, ::InforGuard_::setFileTimeRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_setFileTime_, context, request, response);
}

void FileTran::Stub::experimental_async::setFileTime(::grpc::ClientContext* context, const ::InforGuard_::setFileTimeReq* request, ::InforGuard_::setFileTimeRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_setFileTime_, context, request, response, std::move(f));
}

void FileTran::Stub::experimental_async::setFileTime(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::setFileTimeRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_setFileTime_, context, request, response, std::move(f));
}

void FileTran::Stub::experimental_async::setFileTime(::grpc::ClientContext* context, const ::InforGuard_::setFileTimeReq* request, ::InforGuard_::setFileTimeRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_setFileTime_, context, request, response, reactor);
}

void FileTran::Stub::experimental_async::setFileTime(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::setFileTimeRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_setFileTime_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::setFileTimeRes>* FileTran::Stub::AsyncsetFileTimeRaw(::grpc::ClientContext* context, const ::InforGuard_::setFileTimeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::setFileTimeRes>::Create(channel_.get(), cq, rpcmethod_setFileTime_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::setFileTimeRes>* FileTran::Stub::PrepareAsyncsetFileTimeRaw(::grpc::ClientContext* context, const ::InforGuard_::setFileTimeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::setFileTimeRes>::Create(channel_.get(), cq, rpcmethod_setFileTime_, context, request, false);
}

::grpc::Status FileTran::Stub::getFileTime(::grpc::ClientContext* context, const ::InforGuard_::getFileTimeReq& request, ::InforGuard_::getFileTimeRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getFileTime_, context, request, response);
}

void FileTran::Stub::experimental_async::getFileTime(::grpc::ClientContext* context, const ::InforGuard_::getFileTimeReq* request, ::InforGuard_::getFileTimeRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getFileTime_, context, request, response, std::move(f));
}

void FileTran::Stub::experimental_async::getFileTime(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::getFileTimeRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getFileTime_, context, request, response, std::move(f));
}

void FileTran::Stub::experimental_async::getFileTime(::grpc::ClientContext* context, const ::InforGuard_::getFileTimeReq* request, ::InforGuard_::getFileTimeRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getFileTime_, context, request, response, reactor);
}

void FileTran::Stub::experimental_async::getFileTime(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::getFileTimeRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getFileTime_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::getFileTimeRes>* FileTran::Stub::AsyncgetFileTimeRaw(::grpc::ClientContext* context, const ::InforGuard_::getFileTimeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::getFileTimeRes>::Create(channel_.get(), cq, rpcmethod_getFileTime_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::getFileTimeRes>* FileTran::Stub::PrepareAsyncgetFileTimeRaw(::grpc::ClientContext* context, const ::InforGuard_::getFileTimeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::getFileTimeRes>::Create(channel_.get(), cq, rpcmethod_getFileTime_, context, request, false);
}

::grpc::Status FileTran::Stub::sendFileList(::grpc::ClientContext* context, const ::InforGuard_::sendFileListReq& request, ::InforGuard_::sendFileListRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_sendFileList_, context, request, response);
}

void FileTran::Stub::experimental_async::sendFileList(::grpc::ClientContext* context, const ::InforGuard_::sendFileListReq* request, ::InforGuard_::sendFileListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_sendFileList_, context, request, response, std::move(f));
}

void FileTran::Stub::experimental_async::sendFileList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::sendFileListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_sendFileList_, context, request, response, std::move(f));
}

void FileTran::Stub::experimental_async::sendFileList(::grpc::ClientContext* context, const ::InforGuard_::sendFileListReq* request, ::InforGuard_::sendFileListRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_sendFileList_, context, request, response, reactor);
}

void FileTran::Stub::experimental_async::sendFileList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::sendFileListRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_sendFileList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::sendFileListRes>* FileTran::Stub::AsyncsendFileListRaw(::grpc::ClientContext* context, const ::InforGuard_::sendFileListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::sendFileListRes>::Create(channel_.get(), cq, rpcmethod_sendFileList_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::sendFileListRes>* FileTran::Stub::PrepareAsyncsendFileListRaw(::grpc::ClientContext* context, const ::InforGuard_::sendFileListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::sendFileListRes>::Create(channel_.get(), cq, rpcmethod_sendFileList_, context, request, false);
}

::grpc::Status FileTran::Stub::sendAccess(::grpc::ClientContext* context, const ::InforGuard_::sendAccessReq& request, ::InforGuard_::sendAccessRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_sendAccess_, context, request, response);
}

void FileTran::Stub::experimental_async::sendAccess(::grpc::ClientContext* context, const ::InforGuard_::sendAccessReq* request, ::InforGuard_::sendAccessRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_sendAccess_, context, request, response, std::move(f));
}

void FileTran::Stub::experimental_async::sendAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::sendAccessRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_sendAccess_, context, request, response, std::move(f));
}

void FileTran::Stub::experimental_async::sendAccess(::grpc::ClientContext* context, const ::InforGuard_::sendAccessReq* request, ::InforGuard_::sendAccessRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_sendAccess_, context, request, response, reactor);
}

void FileTran::Stub::experimental_async::sendAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::sendAccessRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_sendAccess_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::sendAccessRes>* FileTran::Stub::AsyncsendAccessRaw(::grpc::ClientContext* context, const ::InforGuard_::sendAccessReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::sendAccessRes>::Create(channel_.get(), cq, rpcmethod_sendAccess_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::sendAccessRes>* FileTran::Stub::PrepareAsyncsendAccessRaw(::grpc::ClientContext* context, const ::InforGuard_::sendAccessReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::sendAccessRes>::Create(channel_.get(), cq, rpcmethod_sendAccess_, context, request, false);
}

::grpc::Status FileTran::Stub::checkFileList(::grpc::ClientContext* context, const ::InforGuard_::checkFileListReq& request, ::InforGuard_::checkFileListRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_checkFileList_, context, request, response);
}

void FileTran::Stub::experimental_async::checkFileList(::grpc::ClientContext* context, const ::InforGuard_::checkFileListReq* request, ::InforGuard_::checkFileListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_checkFileList_, context, request, response, std::move(f));
}

void FileTran::Stub::experimental_async::checkFileList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::checkFileListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_checkFileList_, context, request, response, std::move(f));
}

void FileTran::Stub::experimental_async::checkFileList(::grpc::ClientContext* context, const ::InforGuard_::checkFileListReq* request, ::InforGuard_::checkFileListRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_checkFileList_, context, request, response, reactor);
}

void FileTran::Stub::experimental_async::checkFileList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::InforGuard_::checkFileListRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_checkFileList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::checkFileListRes>* FileTran::Stub::AsynccheckFileListRaw(::grpc::ClientContext* context, const ::InforGuard_::checkFileListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::checkFileListRes>::Create(channel_.get(), cq, rpcmethod_checkFileList_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::InforGuard_::checkFileListRes>* FileTran::Stub::PrepareAsynccheckFileListRaw(::grpc::ClientContext* context, const ::InforGuard_::checkFileListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::InforGuard_::checkFileListRes>::Create(channel_.get(), cq, rpcmethod_checkFileList_, context, request, false);
}

FileTran::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileTran_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileTran::Service, ::InforGuard_::CheckReq, ::InforGuard_::CheckRes>(
          [](FileTran::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::InforGuard_::CheckReq* req,
             ::InforGuard_::CheckRes* resp) {
               return service->Check(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileTran_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileTran::Service, ::InforGuard_::GetFileBlockReq, ::InforGuard_::GetFileBlockRes>(
          [](FileTran::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::InforGuard_::GetFileBlockReq* req,
             ::InforGuard_::GetFileBlockRes* resp) {
               return service->GetFileBlock(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileTran_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileTran::Service, ::InforGuard_::PutFileBlockReq, ::InforGuard_::PutFileBlockRes>(
          [](FileTran::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::InforGuard_::PutFileBlockReq* req,
             ::InforGuard_::PutFileBlockRes* resp) {
               return service->PutFileBlock(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileTran_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileTran::Service, ::InforGuard_::MakeDirectoryReq, ::InforGuard_::MakeDirectoryRes>(
          [](FileTran::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::InforGuard_::MakeDirectoryReq* req,
             ::InforGuard_::MakeDirectoryRes* resp) {
               return service->MakeDirectory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileTran_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileTran::Service, ::InforGuard_::MoveFileInReq, ::InforGuard_::MoveFileInRes>(
          [](FileTran::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::InforGuard_::MoveFileInReq* req,
             ::InforGuard_::MoveFileInRes* resp) {
               return service->MoveFileIn(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileTran_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileTran::Service, ::InforGuard_::MoveFileOutReq, ::InforGuard_::MoveFileOutRes>(
          [](FileTran::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::InforGuard_::MoveFileOutReq* req,
             ::InforGuard_::MoveFileOutRes* resp) {
               return service->MoveFileOut(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileTran_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileTran::Service, ::InforGuard_::RenameFileReq, ::InforGuard_::RenameFileRes>(
          [](FileTran::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::InforGuard_::RenameFileReq* req,
             ::InforGuard_::RenameFileRes* resp) {
               return service->RenameFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileTran_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileTran::Service, ::InforGuard_::QueryBasePathReq, ::InforGuard_::QueryBasePathRes>(
          [](FileTran::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::InforGuard_::QueryBasePathReq* req,
             ::InforGuard_::QueryBasePathRes* resp) {
               return service->QueryBasePath(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileTran_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileTran::Service, ::InforGuard_::isFileExistReq, ::InforGuard_::isFileExistRes>(
          [](FileTran::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::InforGuard_::isFileExistReq* req,
             ::InforGuard_::isFileExistRes* resp) {
               return service->isFileExist(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileTran_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileTran::Service, ::InforGuard_::setFileTimeReq, ::InforGuard_::setFileTimeRes>(
          [](FileTran::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::InforGuard_::setFileTimeReq* req,
             ::InforGuard_::setFileTimeRes* resp) {
               return service->setFileTime(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileTran_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileTran::Service, ::InforGuard_::getFileTimeReq, ::InforGuard_::getFileTimeRes>(
          [](FileTran::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::InforGuard_::getFileTimeReq* req,
             ::InforGuard_::getFileTimeRes* resp) {
               return service->getFileTime(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileTran_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileTran::Service, ::InforGuard_::sendFileListReq, ::InforGuard_::sendFileListRes>(
          [](FileTran::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::InforGuard_::sendFileListReq* req,
             ::InforGuard_::sendFileListRes* resp) {
               return service->sendFileList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileTran_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileTran::Service, ::InforGuard_::sendAccessReq, ::InforGuard_::sendAccessRes>(
          [](FileTran::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::InforGuard_::sendAccessReq* req,
             ::InforGuard_::sendAccessRes* resp) {
               return service->sendAccess(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileTran_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileTran::Service, ::InforGuard_::checkFileListReq, ::InforGuard_::checkFileListRes>(
          [](FileTran::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::InforGuard_::checkFileListReq* req,
             ::InforGuard_::checkFileListRes* resp) {
               return service->checkFileList(ctx, req, resp);
             }, this)));
}

FileTran::Service::~Service() {
}

::grpc::Status FileTran::Service::Check(::grpc::ServerContext* context, const ::InforGuard_::CheckReq* request, ::InforGuard_::CheckRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileTran::Service::GetFileBlock(::grpc::ServerContext* context, const ::InforGuard_::GetFileBlockReq* request, ::InforGuard_::GetFileBlockRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileTran::Service::PutFileBlock(::grpc::ServerContext* context, const ::InforGuard_::PutFileBlockReq* request, ::InforGuard_::PutFileBlockRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileTran::Service::MakeDirectory(::grpc::ServerContext* context, const ::InforGuard_::MakeDirectoryReq* request, ::InforGuard_::MakeDirectoryRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileTran::Service::MoveFileIn(::grpc::ServerContext* context, const ::InforGuard_::MoveFileInReq* request, ::InforGuard_::MoveFileInRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileTran::Service::MoveFileOut(::grpc::ServerContext* context, const ::InforGuard_::MoveFileOutReq* request, ::InforGuard_::MoveFileOutRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileTran::Service::RenameFile(::grpc::ServerContext* context, const ::InforGuard_::RenameFileReq* request, ::InforGuard_::RenameFileRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileTran::Service::QueryBasePath(::grpc::ServerContext* context, const ::InforGuard_::QueryBasePathReq* request, ::InforGuard_::QueryBasePathRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileTran::Service::isFileExist(::grpc::ServerContext* context, const ::InforGuard_::isFileExistReq* request, ::InforGuard_::isFileExistRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileTran::Service::setFileTime(::grpc::ServerContext* context, const ::InforGuard_::setFileTimeReq* request, ::InforGuard_::setFileTimeRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileTran::Service::getFileTime(::grpc::ServerContext* context, const ::InforGuard_::getFileTimeReq* request, ::InforGuard_::getFileTimeRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileTran::Service::sendFileList(::grpc::ServerContext* context, const ::InforGuard_::sendFileListReq* request, ::InforGuard_::sendFileListRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileTran::Service::sendAccess(::grpc::ServerContext* context, const ::InforGuard_::sendAccessReq* request, ::InforGuard_::sendAccessRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileTran::Service::checkFileList(::grpc::ServerContext* context, const ::InforGuard_::checkFileListReq* request, ::InforGuard_::checkFileListRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace InforGuard_

