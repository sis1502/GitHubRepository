// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Metadata.proto

#include "Metadata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Metadata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExceptionError_Metadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Metadata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_s_FileNodeInfo_Metadata_2eproto;
namespace InforGuard_ {
class netCallDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<netCallData> _instance;
} _netCallData_default_instance_;
class netIpPortDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<netIpPort> _instance;
} _netIpPort_default_instance_;
class ExceptionErrorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExceptionError> _instance;
} _ExceptionError_default_instance_;
class NetFileTreeNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetFileTreeNode> _instance;
} _NetFileTreeNode_default_instance_;
class NetFileListNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetFileListNode> _instance;
} _NetFileListNode_default_instance_;
class s_FileNodeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<s_FileNodeInfo> _instance;
} _s_FileNodeInfo_default_instance_;
class RemoteDirectoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoteDirectory> _instance;
} _RemoteDirectory_default_instance_;
class MsgBlockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgBlock> _instance;
} _MsgBlock_default_instance_;
class CheckReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckReq> _instance;
} _CheckReq_default_instance_;
class CheckResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckRes> _instance;
} _CheckRes_default_instance_;
}  // namespace InforGuard_
static void InitDefaultsscc_info_CheckReq_Metadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_CheckReq_default_instance_;
    new (ptr) ::InforGuard_::CheckReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::CheckReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckReq_Metadata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CheckReq_Metadata_2eproto}, {}};

static void InitDefaultsscc_info_CheckRes_Metadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_CheckRes_default_instance_;
    new (ptr) ::InforGuard_::CheckRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::CheckRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CheckRes_Metadata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CheckRes_Metadata_2eproto}, {
      &scc_info_ExceptionError_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_ExceptionError_Metadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_ExceptionError_default_instance_;
    new (ptr) ::InforGuard_::ExceptionError();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::ExceptionError::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExceptionError_Metadata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExceptionError_Metadata_2eproto}, {}};

static void InitDefaultsscc_info_MsgBlock_Metadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_MsgBlock_default_instance_;
    new (ptr) ::InforGuard_::MsgBlock();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::MsgBlock::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgBlock_Metadata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgBlock_Metadata_2eproto}, {}};

static void InitDefaultsscc_info_NetFileListNode_Metadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_NetFileListNode_default_instance_;
    new (ptr) ::InforGuard_::NetFileListNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::NetFileListNode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetFileListNode_Metadata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NetFileListNode_Metadata_2eproto}, {}};

static void InitDefaultsscc_info_NetFileTreeNode_Metadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_NetFileTreeNode_default_instance_;
    new (ptr) ::InforGuard_::NetFileTreeNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::NetFileTreeNode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetFileTreeNode_Metadata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NetFileTreeNode_Metadata_2eproto}, {}};

static void InitDefaultsscc_info_RemoteDirectory_Metadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_RemoteDirectory_default_instance_;
    new (ptr) ::InforGuard_::RemoteDirectory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::RemoteDirectory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RemoteDirectory_Metadata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RemoteDirectory_Metadata_2eproto}, {
      &scc_info_s_FileNodeInfo_Metadata_2eproto.base,}};

static void InitDefaultsscc_info_netCallData_Metadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_netCallData_default_instance_;
    new (ptr) ::InforGuard_::netCallData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::netCallData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_netCallData_Metadata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_netCallData_Metadata_2eproto}, {}};

static void InitDefaultsscc_info_netIpPort_Metadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_netIpPort_default_instance_;
    new (ptr) ::InforGuard_::netIpPort();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::netIpPort::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_netIpPort_Metadata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_netIpPort_Metadata_2eproto}, {}};

static void InitDefaultsscc_info_s_FileNodeInfo_Metadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::InforGuard_::_s_FileNodeInfo_default_instance_;
    new (ptr) ::InforGuard_::s_FileNodeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InforGuard_::s_FileNodeInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_s_FileNodeInfo_Metadata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_s_FileNodeInfo_Metadata_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Metadata_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Metadata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Metadata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Metadata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::netCallData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::netCallData, nthreadid_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::netCallData, sip_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::netCallData, sport_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::netCallData, nserial_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::netCallData, nsubserial_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::netCallData, nrecserial_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::netCallData, nindent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::netIpPort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::netIpPort, sip_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::netIpPort, sport_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::ExceptionError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::ExceptionError, nerrcode_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::ExceptionError, verrtext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::NetFileTreeNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::NetFileTreeNode, name_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::NetFileTreeNode, size_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::NetFileTreeNode, time_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::NetFileTreeNode, isfolder_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::NetFileListNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::NetFileListNode, name_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::NetFileListNode, size_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::NetFileListNode, time_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::NetFileListNode, isfolder_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::s_FileNodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::s_FileNodeInfo, name_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::s_FileNodeInfo, isfile_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::s_FileNodeInfo, mtime_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::s_FileNodeInfo, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::RemoteDirectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::RemoteDirectory, nodes_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::RemoteDirectory, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::MsgBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::MsgBlock, mid_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::MsgBlock, level_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::MsgBlock, serial_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::MsgBlock, src_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::MsgBlock, dst_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::MsgBlock, pl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::CheckReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::CheckReq, check_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::CheckRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InforGuard_::CheckRes, ex_),
  PROTOBUF_FIELD_OFFSET(::InforGuard_::CheckRes, ret_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::InforGuard_::netCallData)},
  { 12, -1, sizeof(::InforGuard_::netIpPort)},
  { 19, -1, sizeof(::InforGuard_::ExceptionError)},
  { 26, -1, sizeof(::InforGuard_::NetFileTreeNode)},
  { 35, -1, sizeof(::InforGuard_::NetFileListNode)},
  { 44, -1, sizeof(::InforGuard_::s_FileNodeInfo)},
  { 53, -1, sizeof(::InforGuard_::RemoteDirectory)},
  { 60, -1, sizeof(::InforGuard_::MsgBlock)},
  { 71, -1, sizeof(::InforGuard_::CheckReq)},
  { 77, -1, sizeof(::InforGuard_::CheckRes)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_netCallData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_netIpPort_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_ExceptionError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_NetFileTreeNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_NetFileListNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_s_FileNodeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_RemoteDirectory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_MsgBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_CheckReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::InforGuard_::_CheckRes_default_instance_),
};

const char descriptor_table_protodef_Metadata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Metadata.proto\022\013InforGuard_\"\206\001\n\013netCal"
  "lData\022\021\n\tnThreadId\030\001 \001(\005\022\013\n\003sIp\030\002 \001(\014\022\r\n"
  "\005sPort\030\003 \001(\005\022\017\n\007nSerial\030\004 \001(\005\022\022\n\nnSubSer"
  "ial\030\005 \001(\005\022\022\n\nnRecSerial\030\006 \001(\005\022\017\n\007nIndent"
  "\030\007 \001(\005\"\'\n\tnetIpPort\022\013\n\003sIp\030\001 \001(\014\022\r\n\005sPor"
  "t\030\002 \001(\014\"4\n\016ExceptionError\022\020\n\010nErrCode\030\001 "
  "\001(\005\022\020\n\010vErrText\030\002 \003(\014\"M\n\017NetFileTreeNode"
  "\022\014\n\004name\030\001 \001(\014\022\014\n\004size\030\002 \001(\005\022\014\n\004time\030\003 \001"
  "(\005\022\020\n\010isfolder\030\004 \001(\010\"M\n\017NetFileListNode\022"
  "\014\n\004name\030\001 \001(\014\022\014\n\004size\030\002 \001(\005\022\014\n\004time\030\003 \001("
  "\005\022\020\n\010isfolder\030\004 \001(\010\"K\n\016s_FileNodeInfo\022\014\n"
  "\004name\030\001 \001(\014\022\016\n\006isfile\030\002 \001(\010\022\r\n\005mtime\030\003 \001"
  "(\005\022\014\n\004type\030\004 \001(\005\"I\n\017RemoteDirectory\022*\n\005n"
  "odes\030\001 \003(\0132\033.InforGuard_.s_FileNodeInfo\022"
  "\n\n\002id\030\002 \001(\014\"\\\n\010MsgBlock\022\013\n\003mid\030\001 \001(\005\022\r\n\005"
  "level\030\002 \001(\005\022\016\n\006serial\030\003 \001(\005\022\013\n\003src\030\004 \001(\014"
  "\022\013\n\003dst\030\005 \001(\014\022\n\n\002pl\030\006 \003(\014\"\031\n\010CheckReq\022\r\n"
  "\005check\030\001 \001(\010\"@\n\010CheckRes\022\'\n\002ex\030\001 \001(\0132\033.I"
  "nforGuard_.ExceptionError\022\013\n\003ret\030\002 \001(\005b\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Metadata_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Metadata_2eproto_sccs[10] = {
  &scc_info_CheckReq_Metadata_2eproto.base,
  &scc_info_CheckRes_Metadata_2eproto.base,
  &scc_info_ExceptionError_Metadata_2eproto.base,
  &scc_info_MsgBlock_Metadata_2eproto.base,
  &scc_info_NetFileListNode_Metadata_2eproto.base,
  &scc_info_NetFileTreeNode_Metadata_2eproto.base,
  &scc_info_RemoteDirectory_Metadata_2eproto.base,
  &scc_info_netCallData_Metadata_2eproto.base,
  &scc_info_netIpPort_Metadata_2eproto.base,
  &scc_info_s_FileNodeInfo_Metadata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Metadata_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Metadata_2eproto = {
  false, false, descriptor_table_protodef_Metadata_2eproto, "Metadata.proto", 766,
  &descriptor_table_Metadata_2eproto_once, descriptor_table_Metadata_2eproto_sccs, descriptor_table_Metadata_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_Metadata_2eproto::offsets,
  file_level_metadata_Metadata_2eproto, 10, file_level_enum_descriptors_Metadata_2eproto, file_level_service_descriptors_Metadata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Metadata_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Metadata_2eproto)), true);
namespace InforGuard_ {

// ===================================================================

void netCallData::InitAsDefaultInstance() {
}
class netCallData::_Internal {
 public:
};

netCallData::netCallData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.netCallData)
}
netCallData::netCallData(const netCallData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sip().empty()) {
    sip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sip(),
      GetArena());
  }
  ::memcpy(&nthreadid_, &from.nthreadid_,
    static_cast<size_t>(reinterpret_cast<char*>(&nindent_) -
    reinterpret_cast<char*>(&nthreadid_)) + sizeof(nindent_));
  // @@protoc_insertion_point(copy_constructor:InforGuard_.netCallData)
}

void netCallData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_netCallData_Metadata_2eproto.base);
  sip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&nthreadid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nindent_) -
      reinterpret_cast<char*>(&nthreadid_)) + sizeof(nindent_));
}

netCallData::~netCallData() {
  // @@protoc_insertion_point(destructor:InforGuard_.netCallData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void netCallData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void netCallData::ArenaDtor(void* object) {
  netCallData* _this = reinterpret_cast< netCallData* >(object);
  (void)_this;
}
void netCallData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void netCallData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const netCallData& netCallData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_netCallData_Metadata_2eproto.base);
  return *internal_default_instance();
}


void netCallData::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.netCallData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&nthreadid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nindent_) -
      reinterpret_cast<char*>(&nthreadid_)) + sizeof(nindent_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* netCallData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 nThreadId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nthreadid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sIp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sPort = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nSerial = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          nserial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nSubSerial = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          nsubserial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nRecSerial = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          nrecserial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nIndent = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          nindent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* netCallData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.netCallData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 nThreadId = 1;
  if (this->nthreadid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_nthreadid(), target);
  }

  // bytes sIp = 2;
  if (this->sip().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sip(), target);
  }

  // int32 sPort = 3;
  if (this->sport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sport(), target);
  }

  // int32 nSerial = 4;
  if (this->nserial() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_nserial(), target);
  }

  // int32 nSubSerial = 5;
  if (this->nsubserial() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_nsubserial(), target);
  }

  // int32 nRecSerial = 6;
  if (this->nrecserial() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_nrecserial(), target);
  }

  // int32 nIndent = 7;
  if (this->nindent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_nindent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.netCallData)
  return target;
}

size_t netCallData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.netCallData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sIp = 2;
  if (this->sip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sip());
  }

  // int32 nThreadId = 1;
  if (this->nthreadid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nthreadid());
  }

  // int32 sPort = 3;
  if (this->sport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sport());
  }

  // int32 nSerial = 4;
  if (this->nserial() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nserial());
  }

  // int32 nSubSerial = 5;
  if (this->nsubserial() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nsubserial());
  }

  // int32 nRecSerial = 6;
  if (this->nrecserial() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nrecserial());
  }

  // int32 nIndent = 7;
  if (this->nindent() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nindent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void netCallData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.netCallData)
  GOOGLE_DCHECK_NE(&from, this);
  const netCallData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<netCallData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.netCallData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.netCallData)
    MergeFrom(*source);
  }
}

void netCallData::MergeFrom(const netCallData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.netCallData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sip().size() > 0) {
    _internal_set_sip(from._internal_sip());
  }
  if (from.nthreadid() != 0) {
    _internal_set_nthreadid(from._internal_nthreadid());
  }
  if (from.sport() != 0) {
    _internal_set_sport(from._internal_sport());
  }
  if (from.nserial() != 0) {
    _internal_set_nserial(from._internal_nserial());
  }
  if (from.nsubserial() != 0) {
    _internal_set_nsubserial(from._internal_nsubserial());
  }
  if (from.nrecserial() != 0) {
    _internal_set_nrecserial(from._internal_nrecserial());
  }
  if (from.nindent() != 0) {
    _internal_set_nindent(from._internal_nindent());
  }
}

void netCallData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.netCallData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void netCallData::CopyFrom(const netCallData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.netCallData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool netCallData::IsInitialized() const {
  return true;
}

void netCallData::InternalSwap(netCallData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sip_.Swap(&other->sip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(netCallData, nindent_)
      + sizeof(netCallData::nindent_)
      - PROTOBUF_FIELD_OFFSET(netCallData, nthreadid_)>(
          reinterpret_cast<char*>(&nthreadid_),
          reinterpret_cast<char*>(&other->nthreadid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata netCallData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void netIpPort::InitAsDefaultInstance() {
}
class netIpPort::_Internal {
 public:
};

netIpPort::netIpPort(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.netIpPort)
}
netIpPort::netIpPort(const netIpPort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sip().empty()) {
    sip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sip(),
      GetArena());
  }
  sport_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sport().empty()) {
    sport_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sport(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:InforGuard_.netIpPort)
}

void netIpPort::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_netIpPort_Metadata_2eproto.base);
  sip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sport_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

netIpPort::~netIpPort() {
  // @@protoc_insertion_point(destructor:InforGuard_.netIpPort)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void netIpPort::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sport_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void netIpPort::ArenaDtor(void* object) {
  netIpPort* _this = reinterpret_cast< netIpPort* >(object);
  (void)_this;
}
void netIpPort::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void netIpPort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const netIpPort& netIpPort::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_netIpPort_Metadata_2eproto.base);
  return *internal_default_instance();
}


void netIpPort::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.netIpPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sport_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* netIpPort::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes sIp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sPort = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sport();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* netIpPort::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.netIpPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sIp = 1;
  if (this->sip().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sip(), target);
  }

  // bytes sPort = 2;
  if (this->sport().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sport(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.netIpPort)
  return target;
}

size_t netIpPort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.netIpPort)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sIp = 1;
  if (this->sip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sip());
  }

  // bytes sPort = 2;
  if (this->sport().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sport());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void netIpPort::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.netIpPort)
  GOOGLE_DCHECK_NE(&from, this);
  const netIpPort* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<netIpPort>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.netIpPort)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.netIpPort)
    MergeFrom(*source);
  }
}

void netIpPort::MergeFrom(const netIpPort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.netIpPort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sip().size() > 0) {
    _internal_set_sip(from._internal_sip());
  }
  if (from.sport().size() > 0) {
    _internal_set_sport(from._internal_sport());
  }
}

void netIpPort::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.netIpPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void netIpPort::CopyFrom(const netIpPort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.netIpPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool netIpPort::IsInitialized() const {
  return true;
}

void netIpPort::InternalSwap(netIpPort* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sip_.Swap(&other->sip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sport_.Swap(&other->sport_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata netIpPort::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExceptionError::InitAsDefaultInstance() {
}
class ExceptionError::_Internal {
 public:
};

ExceptionError::ExceptionError(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  verrtext_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.ExceptionError)
}
ExceptionError::ExceptionError(const ExceptionError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      verrtext_(from.verrtext_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nerrcode_ = from.nerrcode_;
  // @@protoc_insertion_point(copy_constructor:InforGuard_.ExceptionError)
}

void ExceptionError::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExceptionError_Metadata_2eproto.base);
  nerrcode_ = 0;
}

ExceptionError::~ExceptionError() {
  // @@protoc_insertion_point(destructor:InforGuard_.ExceptionError)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExceptionError::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ExceptionError::ArenaDtor(void* object) {
  ExceptionError* _this = reinterpret_cast< ExceptionError* >(object);
  (void)_this;
}
void ExceptionError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExceptionError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExceptionError& ExceptionError::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExceptionError_Metadata_2eproto.base);
  return *internal_default_instance();
}


void ExceptionError::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.ExceptionError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  verrtext_.Clear();
  nerrcode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExceptionError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 nErrCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nerrcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes vErrText = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_verrtext();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExceptionError::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.ExceptionError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 nErrCode = 1;
  if (this->nerrcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_nerrcode(), target);
  }

  // repeated bytes vErrText = 2;
  for (int i = 0, n = this->_internal_verrtext_size(); i < n; i++) {
    const auto& s = this->_internal_verrtext(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.ExceptionError)
  return target;
}

size_t ExceptionError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.ExceptionError)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes vErrText = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(verrtext_.size());
  for (int i = 0, n = verrtext_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      verrtext_.Get(i));
  }

  // int32 nErrCode = 1;
  if (this->nerrcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nerrcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExceptionError::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.ExceptionError)
  GOOGLE_DCHECK_NE(&from, this);
  const ExceptionError* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExceptionError>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.ExceptionError)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.ExceptionError)
    MergeFrom(*source);
  }
}

void ExceptionError::MergeFrom(const ExceptionError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.ExceptionError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  verrtext_.MergeFrom(from.verrtext_);
  if (from.nerrcode() != 0) {
    _internal_set_nerrcode(from._internal_nerrcode());
  }
}

void ExceptionError::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.ExceptionError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExceptionError::CopyFrom(const ExceptionError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.ExceptionError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExceptionError::IsInitialized() const {
  return true;
}

void ExceptionError::InternalSwap(ExceptionError* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  verrtext_.InternalSwap(&other->verrtext_);
  swap(nerrcode_, other->nerrcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExceptionError::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NetFileTreeNode::InitAsDefaultInstance() {
}
class NetFileTreeNode::_Internal {
 public:
};

NetFileTreeNode::NetFileTreeNode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.NetFileTreeNode)
}
NetFileTreeNode::NetFileTreeNode(const NetFileTreeNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&isfolder_) -
    reinterpret_cast<char*>(&size_)) + sizeof(isfolder_));
  // @@protoc_insertion_point(copy_constructor:InforGuard_.NetFileTreeNode)
}

void NetFileTreeNode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetFileTreeNode_Metadata_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isfolder_) -
      reinterpret_cast<char*>(&size_)) + sizeof(isfolder_));
}

NetFileTreeNode::~NetFileTreeNode() {
  // @@protoc_insertion_point(destructor:InforGuard_.NetFileTreeNode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetFileTreeNode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NetFileTreeNode::ArenaDtor(void* object) {
  NetFileTreeNode* _this = reinterpret_cast< NetFileTreeNode* >(object);
  (void)_this;
}
void NetFileTreeNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetFileTreeNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetFileTreeNode& NetFileTreeNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetFileTreeNode_Metadata_2eproto.base);
  return *internal_default_instance();
}


void NetFileTreeNode::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.NetFileTreeNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isfolder_) -
      reinterpret_cast<char*>(&size_)) + sizeof(isfolder_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetFileTreeNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isfolder = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          isfolder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetFileTreeNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.NetFileTreeNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 size = 2;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_size(), target);
  }

  // int32 time = 3;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_time(), target);
  }

  // bool isfolder = 4;
  if (this->isfolder() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_isfolder(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.NetFileTreeNode)
  return target;
}

size_t NetFileTreeNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.NetFileTreeNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // int32 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());
  }

  // int32 time = 3;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());
  }

  // bool isfolder = 4;
  if (this->isfolder() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetFileTreeNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.NetFileTreeNode)
  GOOGLE_DCHECK_NE(&from, this);
  const NetFileTreeNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetFileTreeNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.NetFileTreeNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.NetFileTreeNode)
    MergeFrom(*source);
  }
}

void NetFileTreeNode::MergeFrom(const NetFileTreeNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.NetFileTreeNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.isfolder() != 0) {
    _internal_set_isfolder(from._internal_isfolder());
  }
}

void NetFileTreeNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.NetFileTreeNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetFileTreeNode::CopyFrom(const NetFileTreeNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.NetFileTreeNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetFileTreeNode::IsInitialized() const {
  return true;
}

void NetFileTreeNode::InternalSwap(NetFileTreeNode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetFileTreeNode, isfolder_)
      + sizeof(NetFileTreeNode::isfolder_)
      - PROTOBUF_FIELD_OFFSET(NetFileTreeNode, size_)>(
          reinterpret_cast<char*>(&size_),
          reinterpret_cast<char*>(&other->size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetFileTreeNode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NetFileListNode::InitAsDefaultInstance() {
}
class NetFileListNode::_Internal {
 public:
};

NetFileListNode::NetFileListNode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.NetFileListNode)
}
NetFileListNode::NetFileListNode(const NetFileListNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&isfolder_) -
    reinterpret_cast<char*>(&size_)) + sizeof(isfolder_));
  // @@protoc_insertion_point(copy_constructor:InforGuard_.NetFileListNode)
}

void NetFileListNode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetFileListNode_Metadata_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isfolder_) -
      reinterpret_cast<char*>(&size_)) + sizeof(isfolder_));
}

NetFileListNode::~NetFileListNode() {
  // @@protoc_insertion_point(destructor:InforGuard_.NetFileListNode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetFileListNode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NetFileListNode::ArenaDtor(void* object) {
  NetFileListNode* _this = reinterpret_cast< NetFileListNode* >(object);
  (void)_this;
}
void NetFileListNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetFileListNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetFileListNode& NetFileListNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetFileListNode_Metadata_2eproto.base);
  return *internal_default_instance();
}


void NetFileListNode::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.NetFileListNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isfolder_) -
      reinterpret_cast<char*>(&size_)) + sizeof(isfolder_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetFileListNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isfolder = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          isfolder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetFileListNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.NetFileListNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 size = 2;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_size(), target);
  }

  // int32 time = 3;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_time(), target);
  }

  // bool isfolder = 4;
  if (this->isfolder() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_isfolder(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.NetFileListNode)
  return target;
}

size_t NetFileListNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.NetFileListNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // int32 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());
  }

  // int32 time = 3;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());
  }

  // bool isfolder = 4;
  if (this->isfolder() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetFileListNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.NetFileListNode)
  GOOGLE_DCHECK_NE(&from, this);
  const NetFileListNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetFileListNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.NetFileListNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.NetFileListNode)
    MergeFrom(*source);
  }
}

void NetFileListNode::MergeFrom(const NetFileListNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.NetFileListNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.isfolder() != 0) {
    _internal_set_isfolder(from._internal_isfolder());
  }
}

void NetFileListNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.NetFileListNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetFileListNode::CopyFrom(const NetFileListNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.NetFileListNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetFileListNode::IsInitialized() const {
  return true;
}

void NetFileListNode::InternalSwap(NetFileListNode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetFileListNode, isfolder_)
      + sizeof(NetFileListNode::isfolder_)
      - PROTOBUF_FIELD_OFFSET(NetFileListNode, size_)>(
          reinterpret_cast<char*>(&size_),
          reinterpret_cast<char*>(&other->size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetFileListNode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void s_FileNodeInfo::InitAsDefaultInstance() {
}
class s_FileNodeInfo::_Internal {
 public:
};

s_FileNodeInfo::s_FileNodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.s_FileNodeInfo)
}
s_FileNodeInfo::s_FileNodeInfo(const s_FileNodeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&isfile_, &from.isfile_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&isfile_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:InforGuard_.s_FileNodeInfo)
}

void s_FileNodeInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_s_FileNodeInfo_Metadata_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&isfile_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&isfile_)) + sizeof(type_));
}

s_FileNodeInfo::~s_FileNodeInfo() {
  // @@protoc_insertion_point(destructor:InforGuard_.s_FileNodeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void s_FileNodeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void s_FileNodeInfo::ArenaDtor(void* object) {
  s_FileNodeInfo* _this = reinterpret_cast< s_FileNodeInfo* >(object);
  (void)_this;
}
void s_FileNodeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void s_FileNodeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const s_FileNodeInfo& s_FileNodeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_s_FileNodeInfo_Metadata_2eproto.base);
  return *internal_default_instance();
}


void s_FileNodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.s_FileNodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&isfile_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&isfile_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* s_FileNodeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isfile = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isfile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mtime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          mtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* s_FileNodeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.s_FileNodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bool isfile = 2;
  if (this->isfile() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isfile(), target);
  }

  // int32 mtime = 3;
  if (this->mtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mtime(), target);
  }

  // int32 type = 4;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.s_FileNodeInfo)
  return target;
}

size_t s_FileNodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.s_FileNodeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // bool isfile = 2;
  if (this->isfile() != 0) {
    total_size += 1 + 1;
  }

  // int32 mtime = 3;
  if (this->mtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mtime());
  }

  // int32 type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void s_FileNodeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.s_FileNodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const s_FileNodeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<s_FileNodeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.s_FileNodeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.s_FileNodeInfo)
    MergeFrom(*source);
  }
}

void s_FileNodeInfo::MergeFrom(const s_FileNodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.s_FileNodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.isfile() != 0) {
    _internal_set_isfile(from._internal_isfile());
  }
  if (from.mtime() != 0) {
    _internal_set_mtime(from._internal_mtime());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void s_FileNodeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.s_FileNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_FileNodeInfo::CopyFrom(const s_FileNodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.s_FileNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_FileNodeInfo::IsInitialized() const {
  return true;
}

void s_FileNodeInfo::InternalSwap(s_FileNodeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(s_FileNodeInfo, type_)
      + sizeof(s_FileNodeInfo::type_)
      - PROTOBUF_FIELD_OFFSET(s_FileNodeInfo, isfile_)>(
          reinterpret_cast<char*>(&isfile_),
          reinterpret_cast<char*>(&other->isfile_));
}

::PROTOBUF_NAMESPACE_ID::Metadata s_FileNodeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoteDirectory::InitAsDefaultInstance() {
}
class RemoteDirectory::_Internal {
 public:
};

RemoteDirectory::RemoteDirectory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  nodes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.RemoteDirectory)
}
RemoteDirectory::RemoteDirectory(const RemoteDirectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:InforGuard_.RemoteDirectory)
}

void RemoteDirectory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoteDirectory_Metadata_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RemoteDirectory::~RemoteDirectory() {
  // @@protoc_insertion_point(destructor:InforGuard_.RemoteDirectory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoteDirectory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemoteDirectory::ArenaDtor(void* object) {
  RemoteDirectory* _this = reinterpret_cast< RemoteDirectory* >(object);
  (void)_this;
}
void RemoteDirectory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoteDirectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteDirectory& RemoteDirectory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoteDirectory_Metadata_2eproto.base);
  return *internal_default_instance();
}


void RemoteDirectory::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.RemoteDirectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteDirectory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .InforGuard_.s_FileNodeInfo nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteDirectory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.RemoteDirectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .InforGuard_.s_FileNodeInfo nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_nodes(i), target, stream);
  }

  // bytes id = 2;
  if (this->id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.RemoteDirectory)
  return target;
}

size_t RemoteDirectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.RemoteDirectory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .InforGuard_.s_FileNodeInfo nodes = 1;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteDirectory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.RemoteDirectory)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteDirectory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteDirectory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.RemoteDirectory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.RemoteDirectory)
    MergeFrom(*source);
  }
}

void RemoteDirectory::MergeFrom(const RemoteDirectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.RemoteDirectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void RemoteDirectory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.RemoteDirectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteDirectory::CopyFrom(const RemoteDirectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.RemoteDirectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteDirectory::IsInitialized() const {
  return true;
}

void RemoteDirectory::InternalSwap(RemoteDirectory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nodes_.InternalSwap(&other->nodes_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteDirectory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MsgBlock::InitAsDefaultInstance() {
}
class MsgBlock::_Internal {
 public:
};

MsgBlock::MsgBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pl_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.MsgBlock)
}
MsgBlock::MsgBlock(const MsgBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pl_(from.pl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  src_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_src().empty()) {
    src_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_src(),
      GetArena());
  }
  dst_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dst().empty()) {
    dst_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dst(),
      GetArena());
  }
  ::memcpy(&mid_, &from.mid_,
    static_cast<size_t>(reinterpret_cast<char*>(&serial_) -
    reinterpret_cast<char*>(&mid_)) + sizeof(serial_));
  // @@protoc_insertion_point(copy_constructor:InforGuard_.MsgBlock)
}

void MsgBlock::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgBlock_Metadata_2eproto.base);
  src_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serial_) -
      reinterpret_cast<char*>(&mid_)) + sizeof(serial_));
}

MsgBlock::~MsgBlock() {
  // @@protoc_insertion_point(destructor:InforGuard_.MsgBlock)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  src_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgBlock::ArenaDtor(void* object) {
  MsgBlock* _this = reinterpret_cast< MsgBlock* >(object);
  (void)_this;
}
void MsgBlock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgBlock& MsgBlock::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgBlock_Metadata_2eproto.base);
  return *internal_default_instance();
}


void MsgBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.MsgBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pl_.Clear();
  src_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dst_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&mid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serial_) -
      reinterpret_cast<char*>(&mid_)) + sizeof(serial_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 serial = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          serial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes src = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_src();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes dst = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_dst();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes pl = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_pl();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgBlock::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.MsgBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mid = 1;
  if (this->mid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mid(), target);
  }

  // int32 level = 2;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_level(), target);
  }

  // int32 serial = 3;
  if (this->serial() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_serial(), target);
  }

  // bytes src = 4;
  if (this->src().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_src(), target);
  }

  // bytes dst = 5;
  if (this->dst().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_dst(), target);
  }

  // repeated bytes pl = 6;
  for (int i = 0, n = this->_internal_pl_size(); i < n; i++) {
    const auto& s = this->_internal_pl(i);
    target = stream->WriteBytes(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.MsgBlock)
  return target;
}

size_t MsgBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.MsgBlock)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes pl = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(pl_.size());
  for (int i = 0, n = pl_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      pl_.Get(i));
  }

  // bytes src = 4;
  if (this->src().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_src());
  }

  // bytes dst = 5;
  if (this->dst().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_dst());
  }

  // int32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mid());
  }

  // int32 level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  // int32 serial = 3;
  if (this->serial() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serial());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgBlock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.MsgBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgBlock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.MsgBlock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.MsgBlock)
    MergeFrom(*source);
  }
}

void MsgBlock::MergeFrom(const MsgBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.MsgBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pl_.MergeFrom(from.pl_);
  if (from.src().size() > 0) {
    _internal_set_src(from._internal_src());
  }
  if (from.dst().size() > 0) {
    _internal_set_dst(from._internal_dst());
  }
  if (from.mid() != 0) {
    _internal_set_mid(from._internal_mid());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.serial() != 0) {
    _internal_set_serial(from._internal_serial());
  }
}

void MsgBlock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.MsgBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBlock::CopyFrom(const MsgBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.MsgBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBlock::IsInitialized() const {
  return true;
}

void MsgBlock::InternalSwap(MsgBlock* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pl_.InternalSwap(&other->pl_);
  src_.Swap(&other->src_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dst_.Swap(&other->dst_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgBlock, serial_)
      + sizeof(MsgBlock::serial_)
      - PROTOBUF_FIELD_OFFSET(MsgBlock, mid_)>(
          reinterpret_cast<char*>(&mid_),
          reinterpret_cast<char*>(&other->mid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgBlock::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CheckReq::InitAsDefaultInstance() {
}
class CheckReq::_Internal {
 public:
};

CheckReq::CheckReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.CheckReq)
}
CheckReq::CheckReq(const CheckReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  check_ = from.check_;
  // @@protoc_insertion_point(copy_constructor:InforGuard_.CheckReq)
}

void CheckReq::SharedCtor() {
  check_ = false;
}

CheckReq::~CheckReq() {
  // @@protoc_insertion_point(destructor:InforGuard_.CheckReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CheckReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CheckReq::ArenaDtor(void* object) {
  CheckReq* _this = reinterpret_cast< CheckReq* >(object);
  (void)_this;
}
void CheckReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckReq& CheckReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckReq_Metadata_2eproto.base);
  return *internal_default_instance();
}


void CheckReq::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.CheckReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  check_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool check = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.CheckReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool check = 1;
  if (this->check() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_check(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.CheckReq)
  return target;
}

size_t CheckReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.CheckReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool check = 1;
  if (this->check() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.CheckReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.CheckReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.CheckReq)
    MergeFrom(*source);
  }
}

void CheckReq::MergeFrom(const CheckReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.CheckReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.check() != 0) {
    _internal_set_check(from._internal_check());
  }
}

void CheckReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.CheckReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckReq::CopyFrom(const CheckReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.CheckReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckReq::IsInitialized() const {
  return true;
}

void CheckReq::InternalSwap(CheckReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(check_, other->check_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CheckRes::InitAsDefaultInstance() {
  ::InforGuard_::_CheckRes_default_instance_._instance.get_mutable()->ex_ = const_cast< ::InforGuard_::ExceptionError*>(
      ::InforGuard_::ExceptionError::internal_default_instance());
}
class CheckRes::_Internal {
 public:
  static const ::InforGuard_::ExceptionError& ex(const CheckRes* msg);
};

const ::InforGuard_::ExceptionError&
CheckRes::_Internal::ex(const CheckRes* msg) {
  return *msg->ex_;
}
CheckRes::CheckRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InforGuard_.CheckRes)
}
CheckRes::CheckRes(const CheckRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ex()) {
    ex_ = new ::InforGuard_::ExceptionError(*from.ex_);
  } else {
    ex_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:InforGuard_.CheckRes)
}

void CheckRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CheckRes_Metadata_2eproto.base);
  ::memset(&ex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&ex_)) + sizeof(ret_));
}

CheckRes::~CheckRes() {
  // @@protoc_insertion_point(destructor:InforGuard_.CheckRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CheckRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ex_;
}

void CheckRes::ArenaDtor(void* object) {
  CheckRes* _this = reinterpret_cast< CheckRes* >(object);
  (void)_this;
}
void CheckRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckRes& CheckRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckRes_Metadata_2eproto.base);
  return *internal_default_instance();
}


void CheckRes::Clear() {
// @@protoc_insertion_point(message_clear_start:InforGuard_.CheckRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && ex_ != nullptr) {
    delete ex_;
  }
  ex_ = nullptr;
  ret_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .InforGuard_.ExceptionError ex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InforGuard_.CheckRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InforGuard_.ExceptionError ex = 1;
  if (this->has_ex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ex(this), target, stream);
  }

  // int32 ret = 2;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InforGuard_.CheckRes)
  return target;
}

size_t CheckRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InforGuard_.CheckRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .InforGuard_.ExceptionError ex = 1;
  if (this->has_ex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ex_);
  }

  // int32 ret = 2;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InforGuard_.CheckRes)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InforGuard_.CheckRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InforGuard_.CheckRes)
    MergeFrom(*source);
  }
}

void CheckRes::MergeFrom(const CheckRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InforGuard_.CheckRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ex()) {
    _internal_mutable_ex()->::InforGuard_::ExceptionError::MergeFrom(from._internal_ex());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void CheckRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InforGuard_.CheckRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckRes::CopyFrom(const CheckRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InforGuard_.CheckRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckRes::IsInitialized() const {
  return true;
}

void CheckRes::InternalSwap(CheckRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CheckRes, ret_)
      + sizeof(CheckRes::ret_)
      - PROTOBUF_FIELD_OFFSET(CheckRes, ex_)>(
          reinterpret_cast<char*>(&ex_),
          reinterpret_cast<char*>(&other->ex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckRes::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace InforGuard_
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::InforGuard_::netCallData* Arena::CreateMaybeMessage< ::InforGuard_::netCallData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::netCallData >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::netIpPort* Arena::CreateMaybeMessage< ::InforGuard_::netIpPort >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::netIpPort >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::ExceptionError* Arena::CreateMaybeMessage< ::InforGuard_::ExceptionError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::ExceptionError >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::NetFileTreeNode* Arena::CreateMaybeMessage< ::InforGuard_::NetFileTreeNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::NetFileTreeNode >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::NetFileListNode* Arena::CreateMaybeMessage< ::InforGuard_::NetFileListNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::NetFileListNode >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::s_FileNodeInfo* Arena::CreateMaybeMessage< ::InforGuard_::s_FileNodeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::s_FileNodeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::RemoteDirectory* Arena::CreateMaybeMessage< ::InforGuard_::RemoteDirectory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::RemoteDirectory >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::MsgBlock* Arena::CreateMaybeMessage< ::InforGuard_::MsgBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::MsgBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::CheckReq* Arena::CreateMaybeMessage< ::InforGuard_::CheckReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::CheckReq >(arena);
}
template<> PROTOBUF_NOINLINE ::InforGuard_::CheckRes* Arena::CreateMaybeMessage< ::InforGuard_::CheckRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InforGuard_::CheckRes >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
